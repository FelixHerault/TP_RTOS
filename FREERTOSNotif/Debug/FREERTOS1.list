
FREERTOS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006644  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08006814  08006814  00016814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006994  08006994  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006994  08006994  00016994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800699c  0800699c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800699c  0800699c  0001699c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069a0  080069a0  000169a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080069a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040b0  20000078  08006a1c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004128  08006a1c  00024128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017152  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ae  00000000  00000000  000371fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003a6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003ba18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028de4  00000000  00000000  0003cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173ae  00000000  00000000  00065a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa184  00000000  00000000  0007cdb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176f36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f4  00000000  00000000  00176f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080067fc 	.word	0x080067fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080067fc 	.word	0x080067fc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000098 	.word	0x20000098
 80005e4:	200000ec 	.word	0x200000ec

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f002 ffbd 	bl	8003584 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <MX_FREERTOS_Init+0x34>)
 800060e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	08006820 	.word	0x08006820
 800061c:	20000094 	.word	0x20000094

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f002 fff7 	bl	800361c <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <MX_GPIO_Init+0xa4>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_GPIO_Init+0xa4>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <MX_GPIO_Init+0xa4>)
 800067c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <MX_GPIO_Init+0xa4>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_GPIO_Init+0xa4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2102      	movs	r1, #2
 80006aa:	480b      	ldr	r0, [pc, #44]	; (80006d8 <MX_GPIO_Init+0xa8>)
 80006ac:	f000 fe80 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_GPIO_Init+0xa8>)
 80006c8:	f000 fcc6 	bl	8001058 <HAL_GPIO_Init>

}
 80006cc:	bf00      	nop
 80006ce:	3728      	adds	r7, #40	; 0x28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40022000 	.word	0x40022000

080006dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006e0:	f3bf 8f4f 	dsb	sy
}
 80006e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <__NVIC_SystemReset+0x24>)
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ee:	4904      	ldr	r1, [pc, #16]	; (8000700 <__NVIC_SystemReset+0x24>)
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__NVIC_SystemReset+0x28>)
 80006f2:	4313      	orrs	r3, r2
 80006f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006f6:	f3bf 8f4f 	dsb	sy
}
 80006fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <__NVIC_SystemReset+0x20>
 8000700:	e000ed00 	.word	0xe000ed00
 8000704:	05fa0004 	.word	0x05fa0004

08000708 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000710:	1d39      	adds	r1, r7, #4
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	2201      	movs	r2, #1
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <__io_putchar+0x20>)
 800071a:	f002 fa8d 	bl	8002c38 <HAL_UART_Transmit>
return ch;
 800071e:	687b      	ldr	r3, [r7, #4]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000340 	.word	0x20000340

0800072c <TaskGive>:
//        // pour appeller la fonction dans 100 ms
//    	vTaskDelay(100);
//    }
//}

void TaskGive(void * unused){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		printf("je vais donner le semaphore\r\n");
 8000734:	4809      	ldr	r0, [pc, #36]	; (800075c <TaskGive+0x30>)
 8000736:	f005 f8e3 	bl	8005900 <puts>
		xSemaphoreGive(semaphore1);
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <TaskGive+0x34>)
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	2300      	movs	r3, #0
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	f003 f8fe 	bl	8003944 <xQueueGenericSend>
		printf("j'ai donné le semaphore\r\n");
 8000748:	4806      	ldr	r0, [pc, #24]	; (8000764 <TaskGive+0x38>)
 800074a:	f005 f8d9 	bl	8005900 <puts>
		vTaskDelay(delay);
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <TaskGive+0x3c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fdae 	bl	80042b4 <vTaskDelay>
		printf("je vais donner le semaphore\r\n");
 8000758:	e7ec      	b.n	8000734 <TaskGive+0x8>
 800075a:	bf00      	nop
 800075c:	0800683c 	.word	0x0800683c
 8000760:	200002ec 	.word	0x200002ec
 8000764:	0800685c 	.word	0x0800685c
 8000768:	20000000 	.word	0x20000000

0800076c <TaskTake>:
	}
}

void TaskTake(void * unused){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		printf("je vais recevoir le semaphore\r\n");
 8000774:	480f      	ldr	r0, [pc, #60]	; (80007b4 <TaskTake+0x48>)
 8000776:	f005 f8c3 	bl	8005900 <puts>
		if(xSemaphoreTake(semaphore1,1000))
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <TaskTake+0x4c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000782:	4618      	mov	r0, r3
 8000784:	f003 f9e4 	bl	8003b50 <xQueueSemaphoreTake>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d003      	beq.n	8000796 <TaskTake+0x2a>
		{
			printf("j'ai reçu le semaphore\r\n");
 800078e:	480b      	ldr	r0, [pc, #44]	; (80007bc <TaskTake+0x50>)
 8000790:	f005 f8b6 	bl	8005900 <puts>
 8000794:	e001      	b.n	800079a <TaskTake+0x2e>
		}
		else
		{
			NVIC_SystemReset();
 8000796:	f7ff ffa1 	bl	80006dc <__NVIC_SystemReset>
		}
		delay += 100;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <TaskTake+0x54>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3364      	adds	r3, #100	; 0x64
 80007a0:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <TaskTake+0x54>)
 80007a2:	6013      	str	r3, [r2, #0]
		printf("delay  de %d \r\n",delay);
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <TaskTake+0x54>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <TaskTake+0x58>)
 80007ac:	f005 f822 	bl	80057f4 <iprintf>
		printf("je vais recevoir le semaphore\r\n");
 80007b0:	e7e0      	b.n	8000774 <TaskTake+0x8>
 80007b2:	bf00      	nop
 80007b4:	08006878 	.word	0x08006878
 80007b8:	200002ec 	.word	0x200002ec
 80007bc:	08006898 	.word	0x08006898
 80007c0:	20000000 	.word	0x20000000
 80007c4:	080068b4 	.word	0x080068b4

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f000 fb34 	bl	8000e3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f859 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f7ff ff2b 	bl	8000630 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007da:	f000 fa53 	bl	8000c84 <MX_USART1_UART_Init>

  //BaseType_t xLED;
  BaseType_t xReturned1;
  BaseType_t xReturned2;
  //TaskHandle_t xHandle = NULL;
  TaskHandle_t xHandleGive = NULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  TaskHandle_t xHandleTake = NULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]

  // Semaphore
  semaphore1 = xSemaphoreCreateBinary();
 80007e6:	2203      	movs	r2, #3
 80007e8:	2100      	movs	r1, #0
 80007ea:	2001      	movs	r0, #1
 80007ec:	f003 f848 	bl	8003880 <xQueueGenericCreate>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4a20      	ldr	r2, [pc, #128]	; (8000874 <main+0xac>)
 80007f4:	6013      	str	r3, [r2, #0]
//					&xHandle );      /* Used to pass out the created task's handle. */
//    configASSERT(xLED == pdPASS);

   // On met en priorité la tache avec le give, lorsque l'on change cet priorité on a : on peux arriver à un delay de 1200 et commence avec le delay = 200, (je vais donner / j'ai donné / j'ai recu / delay de / je vais recevoir)

    xReturned1 = xTaskCreate(TaskGive,"TaskGive",STACK_SIZE,NULL,Priority2,&xHandleGive);
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	2305      	movs	r3, #5
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2300      	movs	r3, #0
 8000800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000804:	491c      	ldr	r1, [pc, #112]	; (8000878 <main+0xb0>)
 8000806:	481d      	ldr	r0, [pc, #116]	; (800087c <main+0xb4>)
 8000808:	f003 fc1b 	bl	8004042 <xTaskCreate>
 800080c:	6178      	str	r0, [r7, #20]
    configASSERT(xReturned1 == pdPASS);
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d00c      	beq.n	800082e <main+0x66>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000818:	b672      	cpsid	i
 800081a:	f383 8811 	msr	BASEPRI, r3
 800081e:	f3bf 8f6f 	isb	sy
 8000822:	f3bf 8f4f 	dsb	sy
 8000826:	b662      	cpsie	i
 8000828:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800082a:	bf00      	nop
 800082c:	e7fe      	b.n	800082c <main+0x64>

    xReturned2 = xTaskCreate(TaskTake,"TaskTake",STACK_SIZE,NULL,Priority1,&xHandleTake);
 800082e:	463b      	mov	r3, r7
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	2304      	movs	r3, #4
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2300      	movs	r3, #0
 8000838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083c:	4910      	ldr	r1, [pc, #64]	; (8000880 <main+0xb8>)
 800083e:	4811      	ldr	r0, [pc, #68]	; (8000884 <main+0xbc>)
 8000840:	f003 fbff 	bl	8004042 <xTaskCreate>
 8000844:	6138      	str	r0, [r7, #16]
    configASSERT(xReturned2 == pdPASS);
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d00c      	beq.n	8000866 <main+0x9e>
	__asm volatile
 800084c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000850:	b672      	cpsid	i
 8000852:	f383 8811 	msr	BASEPRI, r3
 8000856:	f3bf 8f6f 	isb	sy
 800085a:	f3bf 8f4f 	dsb	sy
 800085e:	b662      	cpsie	i
 8000860:	60bb      	str	r3, [r7, #8]
}
 8000862:	bf00      	nop
 8000864:	e7fe      	b.n	8000864 <main+0x9c>

    vTaskStartScheduler();
 8000866:	f003 fd5b 	bl	8004320 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800086a:	f7ff febd 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800086e:	f002 fe82 	bl	8003576 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000872:	e7fe      	b.n	8000872 <main+0xaa>
 8000874:	200002ec 	.word	0x200002ec
 8000878:	080068c4 	.word	0x080068c4
 800087c:	0800072d 	.word	0x0800072d
 8000880:	080068d0 	.word	0x080068d0
 8000884:	0800076d 	.word	0x0800076d

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	; 0x50
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	2230      	movs	r2, #48	; 0x30
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f004 ffa4 	bl	80057e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	4b2b      	ldr	r3, [pc, #172]	; (800095c <SystemClock_Config+0xd4>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a2a      	ldr	r2, [pc, #168]	; (800095c <SystemClock_Config+0xd4>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <SystemClock_Config+0xd4>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	4b26      	ldr	r3, [pc, #152]	; (8000960 <SystemClock_Config+0xd8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a25      	ldr	r2, [pc, #148]	; (8000960 <SystemClock_Config+0xd8>)
 80008ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <SystemClock_Config+0xd8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e6:	2302      	movs	r3, #2
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008f0:	2319      	movs	r3, #25
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80008f4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80008f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fdbc 	bl	8001484 <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000912:	f000 f839 	bl	8000988 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000916:	f000 fd65 	bl	80013e4 <HAL_PWREx_EnableOverDrive>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000920:	f000 f832 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000924:	230f      	movs	r3, #15
 8000926:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000928:	2302      	movs	r3, #2
 800092a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000930:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000934:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2107      	movs	r1, #7
 8000942:	4618      	mov	r0, r3
 8000944:	f001 f842 	bl	80019cc <HAL_RCC_ClockConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800094e:	f000 f81b 	bl	8000988 <Error_Handler>
  }
}
 8000952:	bf00      	nop
 8000954:	3750      	adds	r7, #80	; 0x50
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40007000 	.word	0x40007000

08000964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d101      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000976:	f000 fa6d 	bl	8000e54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40001000 	.word	0x40001000

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_MspInit+0x4c>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210f      	movs	r1, #15
 80009ce:	f06f 0001 	mvn.w	r0, #1
 80009d2:	f000 fb17 	bl	8001004 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009f4:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <HAL_InitTick+0xe0>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	4a32      	ldr	r2, [pc, #200]	; (8000ac4 <HAL_InitTick+0xe0>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000a00:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <HAL_InitTick+0xe0>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a0c:	f107 0210 	add.w	r2, r7, #16
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 f9be 	bl	8001d98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d103      	bne.n	8000a2e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a26:	f001 f98f 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 8000a2a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a2c:	e004      	b.n	8000a38 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a2e:	f001 f98b 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 8000a32:	4603      	mov	r3, r0
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3a:	4a23      	ldr	r2, [pc, #140]	; (8000ac8 <HAL_InitTick+0xe4>)
 8000a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a40:	0c9b      	lsrs	r3, r3, #18
 8000a42:	3b01      	subs	r3, #1
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <HAL_InitTick+0xe8>)
 8000a48:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <HAL_InitTick+0xec>)
 8000a4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <HAL_InitTick+0xe8>)
 8000a4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a54:	4a1d      	ldr	r2, [pc, #116]	; (8000acc <HAL_InitTick+0xe8>)
 8000a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_InitTick+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <HAL_InitTick+0xe8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_InitTick+0xe8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a6c:	4817      	ldr	r0, [pc, #92]	; (8000acc <HAL_InitTick+0xe8>)
 8000a6e:	f001 fdb5 	bl	80025dc <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d11b      	bne.n	8000ab8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a80:	4812      	ldr	r0, [pc, #72]	; (8000acc <HAL_InitTick+0xe8>)
 8000a82:	f001 fe0d 	bl	80026a0 <HAL_TIM_Base_Start_IT>
 8000a86:	4603      	mov	r3, r0
 8000a88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d111      	bne.n	8000ab8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a94:	2036      	movs	r0, #54	; 0x36
 8000a96:	f000 fad1 	bl	800103c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d808      	bhi.n	8000ab2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2036      	movs	r0, #54	; 0x36
 8000aa6:	f000 faad 	bl	8001004 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_InitTick+0xf0>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	e002      	b.n	8000ab8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ab8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3738      	adds	r7, #56	; 0x38
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	431bde83 	.word	0x431bde83
 8000acc:	200002f0 	.word	0x200002f0
 8000ad0:	40001000 	.word	0x40001000
 8000ad4:	20000008 	.word	0x20000008

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <TIM6_DAC_IRQHandler+0x10>)
 8000b0a:	f001 fe41 	bl	8002790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200002f0 	.word	0x200002f0

08000b18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e00a      	b.n	8000b40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b2a:	f3af 8000 	nop.w
 8000b2e:	4601      	mov	r1, r0
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	60ba      	str	r2, [r7, #8]
 8000b36:	b2ca      	uxtb	r2, r1
 8000b38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dbf0      	blt.n	8000b2a <_read+0x12>
	}

return len;
 8000b48:	687b      	ldr	r3, [r7, #4]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	e009      	b.n	8000b78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fdcb 	bl	8000708 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbf1      	blt.n	8000b64 <_write+0x12>
	}
	return len;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_close>:

int _close(int file)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
	return -1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb2:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_isatty>:

int _isatty(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
	return 0;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f004 fda6 	bl	8005774 <__errno>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20050000 	.word	0x20050000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	2000033c 	.word	0x2000033c
 8000c5c:	20004128 	.word	0x20004128

08000c60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000c8a:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <MX_USART1_UART_Init+0x5c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_USART1_UART_Init+0x58>)
 8000cc8:	f001 ff68 	bl	8002b9c <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cd2:	f7ff fe59 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000340 	.word	0x20000340
 8000ce0:	40011000 	.word	0x40011000

08000ce4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0ac      	sub	sp, #176	; 0xb0
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	2284      	movs	r2, #132	; 0x84
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fd6d 	bl	80057e4 <memset>
  if(uartHandle->Instance==USART1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a32      	ldr	r2, [pc, #200]	; (8000dd8 <HAL_UART_MspInit+0xf4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d15c      	bne.n	8000dce <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d14:	2340      	movs	r3, #64	; 0x40
 8000d16:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1c:	f107 0318 	add.w	r3, r7, #24
 8000d20:	4618      	mov	r0, r3
 8000d22:	f001 f86b 	bl	8001dfc <HAL_RCCEx_PeriphCLKConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d2c:	f7ff fe2c 	bl	8000988 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	4a29      	ldr	r2, [pc, #164]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d40:	f003 0310 	and.w	r3, r3, #16
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	6313      	str	r3, [r2, #48]	; 0x30
 8000d54:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d90:	2307      	movs	r3, #7
 8000d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4810      	ldr	r0, [pc, #64]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d9e:	f000 f95b 	bl	8001058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <HAL_UART_MspInit+0x100>)
 8000dca:	f000 f945 	bl	8001058 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000dce:	bf00      	nop
 8000dd0:	37b0      	adds	r7, #176	; 0xb0
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40020000 	.word	0x40020000

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ff25 	bl	8000c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f004 fcb3 	bl	8005780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fcd5 	bl	80007c8 <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e2c:	080069a4 	.word	0x080069a4
  ldr r2, =_sbss
 8000e30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e34:	20004128 	.word	0x20004128

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>

08000e3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f000 f8d5 	bl	8000fee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e44:	200f      	movs	r0, #15
 8000e46:	f7ff fdcd 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4a:	f7ff fda3 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	2000000c 	.word	0x2000000c
 8000e78:	200003c8 	.word	0x200003c8

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200003c8 	.word	0x200003c8

08000e94 <__NVIC_SetPriorityGrouping>:
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00
 8000ed8:	05fa0000 	.word	0x05fa0000

08000edc <__NVIC_GetPriorityGrouping>:
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4907      	ldr	r1, [pc, #28]	; (8000f30 <__NVIC_EnableIRQ+0x38>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_SetPriority>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ff4c 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001016:	f7ff ff61 	bl	8000edc <__NVIC_GetPriorityGrouping>
 800101a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	68b9      	ldr	r1, [r7, #8]
 8001020:	6978      	ldr	r0, [r7, #20]
 8001022:	f7ff ffb1 	bl	8000f88 <NVIC_EncodePriority>
 8001026:	4602      	mov	r2, r0
 8001028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff80 	bl	8000f34 <__NVIC_SetPriority>
}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff54 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	e175      	b.n	8001364 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001078:	2201      	movs	r2, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	429a      	cmp	r2, r3
 8001092:	f040 8164 	bne.w	800135e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d005      	beq.n	80010ae <HAL_GPIO_Init+0x56>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d130      	bne.n	8001110 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	091b      	lsrs	r3, r3, #4
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b03      	cmp	r3, #3
 800111a:	d017      	beq.n	800114c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d123      	bne.n	80011a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	08da      	lsrs	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3208      	adds	r2, #8
 800119a:	69b9      	ldr	r1, [r7, #24]
 800119c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0203 	and.w	r2, r3, #3
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80be 	beq.w	800135e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	4b66      	ldr	r3, [pc, #408]	; (800137c <HAL_GPIO_Init+0x324>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a65      	ldr	r2, [pc, #404]	; (800137c <HAL_GPIO_Init+0x324>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b63      	ldr	r3, [pc, #396]	; (800137c <HAL_GPIO_Init+0x324>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011fa:	4a61      	ldr	r2, [pc, #388]	; (8001380 <HAL_GPIO_Init+0x328>)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a58      	ldr	r2, [pc, #352]	; (8001384 <HAL_GPIO_Init+0x32c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d037      	beq.n	8001296 <HAL_GPIO_Init+0x23e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a57      	ldr	r2, [pc, #348]	; (8001388 <HAL_GPIO_Init+0x330>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d031      	beq.n	8001292 <HAL_GPIO_Init+0x23a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a56      	ldr	r2, [pc, #344]	; (800138c <HAL_GPIO_Init+0x334>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d02b      	beq.n	800128e <HAL_GPIO_Init+0x236>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a55      	ldr	r2, [pc, #340]	; (8001390 <HAL_GPIO_Init+0x338>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d025      	beq.n	800128a <HAL_GPIO_Init+0x232>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a54      	ldr	r2, [pc, #336]	; (8001394 <HAL_GPIO_Init+0x33c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d01f      	beq.n	8001286 <HAL_GPIO_Init+0x22e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a53      	ldr	r2, [pc, #332]	; (8001398 <HAL_GPIO_Init+0x340>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d019      	beq.n	8001282 <HAL_GPIO_Init+0x22a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	; (800139c <HAL_GPIO_Init+0x344>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0x226>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a51      	ldr	r2, [pc, #324]	; (80013a0 <HAL_GPIO_Init+0x348>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00d      	beq.n	800127a <HAL_GPIO_Init+0x222>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a50      	ldr	r2, [pc, #320]	; (80013a4 <HAL_GPIO_Init+0x34c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0x21e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4f      	ldr	r2, [pc, #316]	; (80013a8 <HAL_GPIO_Init+0x350>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_GPIO_Init+0x21a>
 800126e:	2309      	movs	r3, #9
 8001270:	e012      	b.n	8001298 <HAL_GPIO_Init+0x240>
 8001272:	230a      	movs	r3, #10
 8001274:	e010      	b.n	8001298 <HAL_GPIO_Init+0x240>
 8001276:	2308      	movs	r3, #8
 8001278:	e00e      	b.n	8001298 <HAL_GPIO_Init+0x240>
 800127a:	2307      	movs	r3, #7
 800127c:	e00c      	b.n	8001298 <HAL_GPIO_Init+0x240>
 800127e:	2306      	movs	r3, #6
 8001280:	e00a      	b.n	8001298 <HAL_GPIO_Init+0x240>
 8001282:	2305      	movs	r3, #5
 8001284:	e008      	b.n	8001298 <HAL_GPIO_Init+0x240>
 8001286:	2304      	movs	r3, #4
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x240>
 800128a:	2303      	movs	r3, #3
 800128c:	e004      	b.n	8001298 <HAL_GPIO_Init+0x240>
 800128e:	2302      	movs	r3, #2
 8001290:	e002      	b.n	8001298 <HAL_GPIO_Init+0x240>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_GPIO_Init+0x240>
 8001296:	2300      	movs	r3, #0
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	f002 0203 	and.w	r2, r2, #3
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	4093      	lsls	r3, r2
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012a8:	4935      	ldr	r1, [pc, #212]	; (8001380 <HAL_GPIO_Init+0x328>)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b6:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <HAL_GPIO_Init+0x354>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012da:	4a34      	ldr	r2, [pc, #208]	; (80013ac <HAL_GPIO_Init+0x354>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e0:	4b32      	ldr	r3, [pc, #200]	; (80013ac <HAL_GPIO_Init+0x354>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001304:	4a29      	ldr	r2, [pc, #164]	; (80013ac <HAL_GPIO_Init+0x354>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800130a:	4b28      	ldr	r3, [pc, #160]	; (80013ac <HAL_GPIO_Init+0x354>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132e:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <HAL_GPIO_Init+0x354>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_GPIO_Init+0x354>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <HAL_GPIO_Init+0x354>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3301      	adds	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	2b0f      	cmp	r3, #15
 8001368:	f67f ae86 	bls.w	8001078 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40013800 	.word	0x40013800
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400
 800138c:	40020800 	.word	0x40020800
 8001390:	40020c00 	.word	0x40020c00
 8001394:	40021000 	.word	0x40021000
 8001398:	40021400 	.word	0x40021400
 800139c:	40021800 	.word	0x40021800
 80013a0:	40021c00 	.word	0x40021c00
 80013a4:	40022000 	.word	0x40022000
 80013a8:	40022400 	.word	0x40022400
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013cc:	e003      	b.n	80013d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_PWREx_EnableOverDrive+0x98>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a22      	ldr	r2, [pc, #136]	; (800147c <HAL_PWREx_EnableOverDrive+0x98>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_PWREx_EnableOverDrive+0x98>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001412:	f7ff fd33 	bl	8000e7c <HAL_GetTick>
 8001416:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001418:	e009      	b.n	800142e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800141a:	f7ff fd2f 	bl	8000e7c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001428:	d901      	bls.n	800142e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e022      	b.n	8001474 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143a:	d1ee      	bne.n	800141a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001446:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001448:	f7ff fd18 	bl	8000e7c <HAL_GetTick>
 800144c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800144e:	e009      	b.n	8001464 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001450:	f7ff fd14 	bl	8000e7c <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800145e:	d901      	bls.n	8001464 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e007      	b.n	8001474 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001470:	d1ee      	bne.n	8001450 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000

08001484 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e291      	b.n	80019be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 8087 	beq.w	80015b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014a8:	4b96      	ldr	r3, [pc, #600]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 030c 	and.w	r3, r3, #12
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d00c      	beq.n	80014ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b4:	4b93      	ldr	r3, [pc, #588]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d112      	bne.n	80014e6 <HAL_RCC_OscConfig+0x62>
 80014c0:	4b90      	ldr	r3, [pc, #576]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014cc:	d10b      	bne.n	80014e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ce:	4b8d      	ldr	r3, [pc, #564]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d06c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x130>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d168      	bne.n	80015b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e26b      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ee:	d106      	bne.n	80014fe <HAL_RCC_OscConfig+0x7a>
 80014f0:	4b84      	ldr	r3, [pc, #528]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a83      	ldr	r2, [pc, #524]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80014f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e02e      	b.n	800155c <HAL_RCC_OscConfig+0xd8>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x9c>
 8001506:	4b7f      	ldr	r3, [pc, #508]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a7e      	ldr	r2, [pc, #504]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 800150c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b7c      	ldr	r3, [pc, #496]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a7b      	ldr	r2, [pc, #492]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e01d      	b.n	800155c <HAL_RCC_OscConfig+0xd8>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0xc0>
 800152a:	4b76      	ldr	r3, [pc, #472]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a75      	ldr	r2, [pc, #468]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b73      	ldr	r3, [pc, #460]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a72      	ldr	r2, [pc, #456]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0xd8>
 8001544:	4b6f      	ldr	r3, [pc, #444]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a6e      	ldr	r2, [pc, #440]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 800154a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b6c      	ldr	r3, [pc, #432]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a6b      	ldr	r2, [pc, #428]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d013      	beq.n	800158c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fc8a 	bl	8000e7c <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fc86 	bl	8000e7c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e21f      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	4b61      	ldr	r3, [pc, #388]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0xe8>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fc76 	bl	8000e7c <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fc72 	bl	8000e7c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e20b      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	4b57      	ldr	r3, [pc, #348]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x110>
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d069      	beq.n	8001696 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015c2:	4b50      	ldr	r3, [pc, #320]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00b      	beq.n	80015e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ce:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d11c      	bne.n	8001614 <HAL_RCC_OscConfig+0x190>
 80015da:	4b4a      	ldr	r3, [pc, #296]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d116      	bne.n	8001614 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e6:	4b47      	ldr	r3, [pc, #284]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <HAL_RCC_OscConfig+0x17a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d001      	beq.n	80015fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e1df      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	493d      	ldr	r1, [pc, #244]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001612:	e040      	b.n	8001696 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d023      	beq.n	8001664 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800161c:	4b39      	ldr	r3, [pc, #228]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a38      	ldr	r2, [pc, #224]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fc28 	bl	8000e7c <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fc24 	bl	8000e7c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1bd      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164e:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4929      	ldr	r1, [pc, #164]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]
 8001662:	e018      	b.n	8001696 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001664:	4b27      	ldr	r3, [pc, #156]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a26      	ldr	r2, [pc, #152]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fc04 	bl	8000e7c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fc00 	bl	8000e7c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e199      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d038      	beq.n	8001714 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d019      	beq.n	80016de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80016ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ae:	4a15      	ldr	r2, [pc, #84]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff fbe1 	bl	8000e7c <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff fbdd 	bl	8000e7c <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e176      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80016d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x23a>
 80016dc:	e01a      	b.n	8001714 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80016e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ea:	f7ff fbc7 	bl	8000e7c <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f2:	f7ff fbc3 	bl	8000e7c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d903      	bls.n	8001708 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e15c      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
 8001704:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	4b91      	ldr	r3, [pc, #580]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 800170a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1ee      	bne.n	80016f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80a4 	beq.w	800186a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001722:	4b8b      	ldr	r3, [pc, #556]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10d      	bne.n	800174a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b88      	ldr	r3, [pc, #544]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a87      	ldr	r2, [pc, #540]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b85      	ldr	r3, [pc, #532]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001746:	2301      	movs	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174a:	4b82      	ldr	r3, [pc, #520]	; (8001954 <HAL_RCC_OscConfig+0x4d0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001756:	4b7f      	ldr	r3, [pc, #508]	; (8001954 <HAL_RCC_OscConfig+0x4d0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a7e      	ldr	r2, [pc, #504]	; (8001954 <HAL_RCC_OscConfig+0x4d0>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001762:	f7ff fb8b 	bl	8000e7c <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176a:	f7ff fb87 	bl	8000e7c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b64      	cmp	r3, #100	; 0x64
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e120      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177c:	4b75      	ldr	r3, [pc, #468]	; (8001954 <HAL_RCC_OscConfig+0x4d0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x31a>
 8001790:	4b6f      	ldr	r3, [pc, #444]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	4a6e      	ldr	r2, [pc, #440]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	; 0x70
 800179c:	e02d      	b.n	80017fa <HAL_RCC_OscConfig+0x376>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x33c>
 80017a6:	4b6a      	ldr	r3, [pc, #424]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a69      	ldr	r2, [pc, #420]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	4b67      	ldr	r3, [pc, #412]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a66      	ldr	r2, [pc, #408]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80017b8:	f023 0304 	bic.w	r3, r3, #4
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
 80017be:	e01c      	b.n	80017fa <HAL_RCC_OscConfig+0x376>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d10c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x35e>
 80017c8:	4b61      	ldr	r3, [pc, #388]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	4a60      	ldr	r2, [pc, #384]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6713      	str	r3, [r2, #112]	; 0x70
 80017d4:	4b5e      	ldr	r3, [pc, #376]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d8:	4a5d      	ldr	r2, [pc, #372]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6713      	str	r3, [r2, #112]	; 0x70
 80017e0:	e00b      	b.n	80017fa <HAL_RCC_OscConfig+0x376>
 80017e2:	4b5b      	ldr	r3, [pc, #364]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e6:	4a5a      	ldr	r2, [pc, #360]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	6713      	str	r3, [r2, #112]	; 0x70
 80017ee:	4b58      	ldr	r3, [pc, #352]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f2:	4a57      	ldr	r2, [pc, #348]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80017f4:	f023 0304 	bic.w	r3, r3, #4
 80017f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d015      	beq.n	800182e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001802:	f7ff fb3b 	bl	8000e7c <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7ff fb37 	bl	8000e7c <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f241 3288 	movw	r2, #5000	; 0x1388
 8001818:	4293      	cmp	r3, r2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e0ce      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001820:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0ee      	beq.n	800180a <HAL_RCC_OscConfig+0x386>
 800182c:	e014      	b.n	8001858 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182e:	f7ff fb25 	bl	8000e7c <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001834:	e00a      	b.n	800184c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001836:	f7ff fb21 	bl	8000e7c <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	f241 3288 	movw	r2, #5000	; 0x1388
 8001844:	4293      	cmp	r3, r2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e0b8      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184c:	4b40      	ldr	r3, [pc, #256]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1ee      	bne.n	8001836 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001858:	7dfb      	ldrb	r3, [r7, #23]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d105      	bne.n	800186a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800185e:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a3b      	ldr	r2, [pc, #236]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 8001864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80a4 	beq.w	80019bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001874:	4b36      	ldr	r3, [pc, #216]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b08      	cmp	r3, #8
 800187e:	d06b      	beq.n	8001958 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d149      	bne.n	800191c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a30      	ldr	r2, [pc, #192]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 800188e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7ff faf2 	bl	8000e7c <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff faee 	bl	8000e7c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e087      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ae:	4b28      	ldr	r3, [pc, #160]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69da      	ldr	r2, [r3, #28]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	019b      	lsls	r3, r3, #6
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	3b01      	subs	r3, #1
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	4313      	orrs	r3, r2
 80018e0:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80018e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a18      	ldr	r2, [pc, #96]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 80018ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fac2 	bl	8000e7c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff fabe 	bl	8000e7c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e057      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x478>
 800191a:	e04f      	b.n	80019bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 8001922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff faa8 	bl	8000e7c <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff faa4 	bl	8000e7c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e03d      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	4b03      	ldr	r3, [pc, #12]	; (8001950 <HAL_RCC_OscConfig+0x4cc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x4ac>
 800194e:	e035      	b.n	80019bc <HAL_RCC_OscConfig+0x538>
 8001950:	40023800 	.word	0x40023800
 8001954:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_RCC_OscConfig+0x544>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d028      	beq.n	80019b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d121      	bne.n	80019b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d11a      	bne.n	80019b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001988:	4013      	ands	r3, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800198e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001990:	4293      	cmp	r3, r2
 8001992:	d111      	bne.n	80019b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	3b01      	subs	r3, #1
 80019a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800

080019cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0d0      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b6a      	ldr	r3, [pc, #424]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d910      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b67      	ldr	r3, [pc, #412]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 020f 	bic.w	r2, r3, #15
 80019fa:	4965      	ldr	r1, [pc, #404]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0b8      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d020      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a2c:	4b59      	ldr	r3, [pc, #356]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a58      	ldr	r2, [pc, #352]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a44:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4a52      	ldr	r2, [pc, #328]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a50:	4b50      	ldr	r3, [pc, #320]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	494d      	ldr	r1, [pc, #308]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d040      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	4b47      	ldr	r3, [pc, #284]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d115      	bne.n	8001aae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e07f      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e073      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e06b      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aae:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f023 0203 	bic.w	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4936      	ldr	r1, [pc, #216]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac0:	f7ff f9dc 	bl	8000e7c <HAL_GetTick>
 8001ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac8:	f7ff f9d8 	bl	8000e7c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e053      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 020c 	and.w	r2, r3, #12
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d1eb      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d210      	bcs.n	8001b20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 020f 	bic.w	r2, r3, #15
 8001b06:	4922      	ldr	r1, [pc, #136]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e032      	b.n	8001b86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4916      	ldr	r1, [pc, #88]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	490e      	ldr	r1, [pc, #56]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b5e:	f000 f821 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001b62:	4602      	mov	r2, r0
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	490a      	ldr	r1, [pc, #40]	; (8001b98 <HAL_RCC_ClockConfig+0x1cc>)
 8001b70:	5ccb      	ldrb	r3, [r1, r3]
 8001b72:	fa22 f303 	lsr.w	r3, r2, r3
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <HAL_RCC_ClockConfig+0x1d0>)
 8001b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_RCC_ClockConfig+0x1d4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe ff30 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023c00 	.word	0x40023c00
 8001b94:	40023800 	.word	0x40023800
 8001b98:	080068e4 	.word	0x080068e4
 8001b9c:	20000004 	.word	0x20000004
 8001ba0:	20000008 	.word	0x20000008

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ba8:	b090      	sub	sp, #64	; 0x40
 8001baa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d00d      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0x40>
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	f200 80a1 	bhi.w	8001d10 <HAL_RCC_GetSysClockFreq+0x16c>
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d003      	beq.n	8001bde <HAL_RCC_GetSysClockFreq+0x3a>
 8001bd6:	e09b      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bd8:	4b53      	ldr	r3, [pc, #332]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bdc:	e09b      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bde:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001be0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001be2:	e098      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be4:	4b4f      	ldr	r3, [pc, #316]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bec:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bee:	4b4d      	ldr	r3, [pc, #308]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d028      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfa:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	099b      	lsrs	r3, r3, #6
 8001c00:	2200      	movs	r2, #0
 8001c02:	623b      	str	r3, [r7, #32]
 8001c04:	627a      	str	r2, [r7, #36]	; 0x24
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c10:	fb03 f201 	mul.w	r2, r3, r1
 8001c14:	2300      	movs	r3, #0
 8001c16:	fb00 f303 	mul.w	r3, r0, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a43      	ldr	r2, [pc, #268]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c1e:	fba0 1202 	umull	r1, r2, r0, r2
 8001c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c24:	460a      	mov	r2, r1
 8001c26:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c2a:	4413      	add	r3, r2
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c30:	2200      	movs	r2, #0
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	61fa      	str	r2, [r7, #28]
 8001c36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c3e:	f7fe fb37 	bl	80002b0 <__aeabi_uldivmod>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4613      	mov	r3, r2
 8001c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c4a:	e053      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	099b      	lsrs	r3, r3, #6
 8001c52:	2200      	movs	r2, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	617a      	str	r2, [r7, #20]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c5e:	f04f 0b00 	mov.w	fp, #0
 8001c62:	4652      	mov	r2, sl
 8001c64:	465b      	mov	r3, fp
 8001c66:	f04f 0000 	mov.w	r0, #0
 8001c6a:	f04f 0100 	mov.w	r1, #0
 8001c6e:	0159      	lsls	r1, r3, #5
 8001c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c74:	0150      	lsls	r0, r2, #5
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	ebb2 080a 	subs.w	r8, r2, sl
 8001c7e:	eb63 090b 	sbc.w	r9, r3, fp
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c96:	ebb2 0408 	subs.w	r4, r2, r8
 8001c9a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	00eb      	lsls	r3, r5, #3
 8001ca8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cac:	00e2      	lsls	r2, r4, #3
 8001cae:	4614      	mov	r4, r2
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	eb14 030a 	adds.w	r3, r4, sl
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	eb45 030b 	adc.w	r3, r5, fp
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cca:	4629      	mov	r1, r5
 8001ccc:	028b      	lsls	r3, r1, #10
 8001cce:	4621      	mov	r1, r4
 8001cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	028a      	lsls	r2, r1, #10
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	60fa      	str	r2, [r7, #12]
 8001ce4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ce8:	f7fe fae2 	bl	80002b0 <__aeabi_uldivmod>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	0c1b      	lsrs	r3, r3, #16
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001d04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d0e:	e002      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3740      	adds	r7, #64	; 0x40
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	00f42400 	.word	0x00f42400
 8001d2c:	017d7840 	.word	0x017d7840

08001d30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d4c:	f7ff fff0 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	0a9b      	lsrs	r3, r3, #10
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	4903      	ldr	r1, [pc, #12]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5e:	5ccb      	ldrb	r3, [r1, r3]
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	080068f4 	.word	0x080068f4

08001d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d74:	f7ff ffdc 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	0b5b      	lsrs	r3, r3, #13
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	4903      	ldr	r1, [pc, #12]	; (8001d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40023800 	.word	0x40023800
 8001d94:	080068f4 	.word	0x080068f4

08001d98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	220f      	movs	r2, #15
 8001da6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_RCC_GetClockConfig+0x5c>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0203 	and.w	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_RCC_GetClockConfig+0x5c>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_RCC_GetClockConfig+0x5c>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_RCC_GetClockConfig+0x5c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_RCC_GetClockConfig+0x60>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 020f 	and.w	r2, r3, #15
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	601a      	str	r2, [r3, #0]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40023c00 	.word	0x40023c00

08001dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d012      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e24:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a68      	ldr	r2, [pc, #416]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e2e:	6093      	str	r3, [r2, #8]
 8001e30:	4b66      	ldr	r3, [pc, #408]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e38:	4964      	ldr	r1, [pc, #400]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d017      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e56:	4b5d      	ldr	r3, [pc, #372]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	4959      	ldr	r1, [pc, #356]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e74:	d101      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d017      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e92:	4b4e      	ldr	r3, [pc, #312]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	494a      	ldr	r1, [pc, #296]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 808b 	beq.w	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	4a39      	ldr	r2, [pc, #228]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eea:	6413      	str	r3, [r2, #64]	; 0x40
 8001eec:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a34      	ldr	r2, [pc, #208]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f04:	f7fe ffba 	bl	8000e7c <HAL_GetTick>
 8001f08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0c:	f7fe ffb6 	bl	8000e7c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e357      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d035      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d02e      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f48:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f6a:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d114      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ff7e 	bl	8000e7c <HAL_GetTick>
 8001f80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f82:	e00a      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7fe ff7a 	bl	8000e7c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e319      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0ee      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fb2:	d111      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fc2:	400b      	ands	r3, r1
 8001fc4:	4901      	ldr	r1, [pc, #4]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	0ffffcff 	.word	0x0ffffcff
 8001fd8:	4baa      	ldr	r3, [pc, #680]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4aa9      	ldr	r2, [pc, #676]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fe2:	6093      	str	r3, [r2, #8]
 8001fe4:	4ba7      	ldr	r3, [pc, #668]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fe6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff0:	49a4      	ldr	r1, [pc, #656]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d010      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002002:	4ba0      	ldr	r3, [pc, #640]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002008:	4a9e      	ldr	r2, [pc, #632]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800200a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800200e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002012:	4b9c      	ldr	r3, [pc, #624]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002014:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	4999      	ldr	r1, [pc, #612]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002030:	4b94      	ldr	r3, [pc, #592]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800203e:	4991      	ldr	r1, [pc, #580]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002052:	4b8c      	ldr	r3, [pc, #560]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002060:	4988      	ldr	r1, [pc, #544]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002074:	4b83      	ldr	r3, [pc, #524]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002082:	4980      	ldr	r1, [pc, #512]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002096:	4b7b      	ldr	r3, [pc, #492]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4977      	ldr	r1, [pc, #476]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020b8:	4b72      	ldr	r3, [pc, #456]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	496f      	ldr	r1, [pc, #444]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020da:	4b6a      	ldr	r3, [pc, #424]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	f023 020c 	bic.w	r2, r3, #12
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e8:	4966      	ldr	r1, [pc, #408]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020fc:	4b61      	ldr	r3, [pc, #388]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	495e      	ldr	r1, [pc, #376]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800211e:	4b59      	ldr	r3, [pc, #356]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212c:	4955      	ldr	r1, [pc, #340]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002140:	4b50      	ldr	r3, [pc, #320]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	494d      	ldr	r1, [pc, #308]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002162:	4b48      	ldr	r3, [pc, #288]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	4944      	ldr	r1, [pc, #272]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002184:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	493c      	ldr	r1, [pc, #240]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80021a6:	4b37      	ldr	r3, [pc, #220]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b4:	4933      	ldr	r1, [pc, #204]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021c8:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021d6:	492b      	ldr	r1, [pc, #172]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d011      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021f8:	4922      	ldr	r1, [pc, #136]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002208:	d101      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800221a:	2301      	movs	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002230:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002238:	4912      	ldr	r1, [pc, #72]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800225c:	4909      	ldr	r1, [pc, #36]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d006      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80d9 	beq.w	800242a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002278:	4b02      	ldr	r3, [pc, #8]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a01      	ldr	r2, [pc, #4]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002282:	e001      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002284:	40023800 	.word	0x40023800
 8002288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800228a:	f7fe fdf7 	bl	8000e7c <HAL_GetTick>
 800228e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002292:	f7fe fdf3 	bl	8000e7c <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b64      	cmp	r3, #100	; 0x64
 800229e:	d901      	bls.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e194      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022a4:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f0      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d021      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11d      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022c4:	4b64      	ldr	r3, [pc, #400]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ca:	0c1b      	lsrs	r3, r3, #16
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022d2:	4b61      	ldr	r3, [pc, #388]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022d8:	0e1b      	lsrs	r3, r3, #24
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	019a      	lsls	r2, r3, #6
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	041b      	lsls	r3, r3, #16
 80022ea:	431a      	orrs	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	061b      	lsls	r3, r3, #24
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	071b      	lsls	r3, r3, #28
 80022f8:	4957      	ldr	r1, [pc, #348]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d004      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800231e:	2b00      	cmp	r3, #0
 8002320:	d02e      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232a:	d129      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800232c:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800232e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002332:	0c1b      	lsrs	r3, r3, #16
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800233a:	4b47      	ldr	r3, [pc, #284]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800233c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002340:	0f1b      	lsrs	r3, r3, #28
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	019a      	lsls	r2, r3, #6
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	041b      	lsls	r3, r3, #16
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	061b      	lsls	r3, r3, #24
 800235a:	431a      	orrs	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	071b      	lsls	r3, r3, #28
 8002360:	493d      	ldr	r1, [pc, #244]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002368:	4b3b      	ldr	r3, [pc, #236]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800236a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800236e:	f023 021f 	bic.w	r2, r3, #31
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	3b01      	subs	r3, #1
 8002378:	4937      	ldr	r1, [pc, #220]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01d      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800238c:	4b32      	ldr	r3, [pc, #200]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800238e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002392:	0e1b      	lsrs	r3, r3, #24
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800239a:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800239c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a0:	0f1b      	lsrs	r3, r3, #28
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	019a      	lsls	r2, r3, #6
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	431a      	orrs	r2, r3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	431a      	orrs	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	071b      	lsls	r3, r3, #28
 80023c0:	4925      	ldr	r1, [pc, #148]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d011      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	019a      	lsls	r2, r3, #6
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	071b      	lsls	r3, r3, #28
 80023f0:	4919      	ldr	r1, [pc, #100]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023f8:	4b17      	ldr	r3, [pc, #92]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a16      	ldr	r2, [pc, #88]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002404:	f7fe fd3a 	bl	8000e7c <HAL_GetTick>
 8002408:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800240c:	f7fe fd36 	bl	8000e7c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e0d7      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b01      	cmp	r3, #1
 800242e:	f040 80cd 	bne.w	80025cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800243e:	f7fe fd1d 	bl	8000e7c <HAL_GetTick>
 8002442:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002446:	f7fe fd19 	bl	8000e7c <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b64      	cmp	r3, #100	; 0x64
 8002452:	d903      	bls.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e0ba      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002458:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800245c:	4b5e      	ldr	r3, [pc, #376]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002468:	d0ed      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002486:	2b00      	cmp	r3, #0
 8002488:	d02e      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d12a      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002492:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024a0:	4b4d      	ldr	r3, [pc, #308]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	0f1b      	lsrs	r3, r3, #28
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	019a      	lsls	r2, r3, #6
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	041b      	lsls	r3, r3, #16
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	061b      	lsls	r3, r3, #24
 80024c0:	431a      	orrs	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	071b      	lsls	r3, r3, #28
 80024c6:	4944      	ldr	r1, [pc, #272]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024ce:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	3b01      	subs	r3, #1
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	493d      	ldr	r1, [pc, #244]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d022      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024fc:	d11d      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024fe:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002504:	0e1b      	lsrs	r3, r3, #24
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800250c:	4b32      	ldr	r3, [pc, #200]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	0f1b      	lsrs	r3, r3, #28
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	019a      	lsls	r2, r3, #6
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	041b      	lsls	r3, r3, #16
 8002526:	431a      	orrs	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	061b      	lsls	r3, r3, #24
 800252c:	431a      	orrs	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	071b      	lsls	r3, r3, #28
 8002532:	4929      	ldr	r1, [pc, #164]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d028      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254c:	0e1b      	lsrs	r3, r3, #24
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	0c1b      	lsrs	r3, r3, #16
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	019a      	lsls	r2, r3, #6
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	041b      	lsls	r3, r3, #16
 800256c:	431a      	orrs	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	061b      	lsls	r3, r3, #24
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	071b      	lsls	r3, r3, #28
 800257a:	4917      	ldr	r1, [pc, #92]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	4911      	ldr	r1, [pc, #68]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800259e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a4:	f7fe fc6a 	bl	8000e7c <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025ac:	f7fe fc66 	bl	8000e7c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e007      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025ca:	d1ef      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800

080025dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e049      	b.n	8002682 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f841 	bl	800268a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f000 fa00 	bl	8002a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d001      	beq.n	80026b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e054      	b.n	8002762 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a26      	ldr	r2, [pc, #152]	; (8002770 <HAL_TIM_Base_Start_IT+0xd0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d022      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e2:	d01d      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a22      	ldr	r2, [pc, #136]	; (8002774 <HAL_TIM_Base_Start_IT+0xd4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d018      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a21      	ldr	r2, [pc, #132]	; (8002778 <HAL_TIM_Base_Start_IT+0xd8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d013      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1f      	ldr	r2, [pc, #124]	; (800277c <HAL_TIM_Base_Start_IT+0xdc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00e      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1e      	ldr	r2, [pc, #120]	; (8002780 <HAL_TIM_Base_Start_IT+0xe0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d009      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_TIM_Base_Start_IT+0xe4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_TIM_Base_Start_IT+0x80>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <HAL_TIM_Base_Start_IT+0xe8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d115      	bne.n	800274c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_TIM_Base_Start_IT+0xec>)
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b06      	cmp	r3, #6
 8002730:	d015      	beq.n	800275e <HAL_TIM_Base_Start_IT+0xbe>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002738:	d011      	beq.n	800275e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274a:	e008      	b.n	800275e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e000      	b.n	8002760 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40010000 	.word	0x40010000
 8002774:	40000400 	.word	0x40000400
 8002778:	40000800 	.word	0x40000800
 800277c:	40000c00 	.word	0x40000c00
 8002780:	40010400 	.word	0x40010400
 8002784:	40014000 	.word	0x40014000
 8002788:	40001800 	.word	0x40001800
 800278c:	00010007 	.word	0x00010007

08002790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d122      	bne.n	80027ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d11b      	bne.n	80027ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0202 	mvn.w	r2, #2
 80027bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f905 	bl	80029e2 <HAL_TIM_IC_CaptureCallback>
 80027d8:	e005      	b.n	80027e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8f7 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f908 	bl	80029f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d122      	bne.n	8002840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b04      	cmp	r3, #4
 8002806:	d11b      	bne.n	8002840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0204 	mvn.w	r2, #4
 8002810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2202      	movs	r2, #2
 8002816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f8db 	bl	80029e2 <HAL_TIM_IC_CaptureCallback>
 800282c:	e005      	b.n	800283a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8cd 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f8de 	bl	80029f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b08      	cmp	r3, #8
 800284c:	d122      	bne.n	8002894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b08      	cmp	r3, #8
 800285a:	d11b      	bne.n	8002894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0208 	mvn.w	r2, #8
 8002864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2204      	movs	r2, #4
 800286a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8b1 	bl	80029e2 <HAL_TIM_IC_CaptureCallback>
 8002880:	e005      	b.n	800288e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f8a3 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f8b4 	bl	80029f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d122      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d11b      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0210 	mvn.w	r2, #16
 80028b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2208      	movs	r2, #8
 80028be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f887 	bl	80029e2 <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f879 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f88a 	bl	80029f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d10e      	bne.n	8002914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b01      	cmp	r3, #1
 8002902:	d107      	bne.n	8002914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0201 	mvn.w	r2, #1
 800290c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe f828 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291e:	2b80      	cmp	r3, #128	; 0x80
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292c:	2b80      	cmp	r3, #128	; 0x80
 800292e:	d107      	bne.n	8002940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f91a 	bl	8002b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294e:	d10e      	bne.n	800296e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	2b80      	cmp	r3, #128	; 0x80
 800295c:	d107      	bne.n	800296e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f90d 	bl	8002b88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	d10e      	bne.n	800299a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002986:	2b40      	cmp	r3, #64	; 0x40
 8002988:	d107      	bne.n	800299a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f838 	bl	8002a0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d10e      	bne.n	80029c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d107      	bne.n	80029c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f06f 0220 	mvn.w	r2, #32
 80029be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f8cd 	bl	8002b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a40      	ldr	r2, [pc, #256]	; (8002b34 <TIM_Base_SetConfig+0x114>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d013      	beq.n	8002a60 <TIM_Base_SetConfig+0x40>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3e:	d00f      	beq.n	8002a60 <TIM_Base_SetConfig+0x40>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a3d      	ldr	r2, [pc, #244]	; (8002b38 <TIM_Base_SetConfig+0x118>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00b      	beq.n	8002a60 <TIM_Base_SetConfig+0x40>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a3c      	ldr	r2, [pc, #240]	; (8002b3c <TIM_Base_SetConfig+0x11c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d007      	beq.n	8002a60 <TIM_Base_SetConfig+0x40>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a3b      	ldr	r2, [pc, #236]	; (8002b40 <TIM_Base_SetConfig+0x120>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d003      	beq.n	8002a60 <TIM_Base_SetConfig+0x40>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a3a      	ldr	r2, [pc, #232]	; (8002b44 <TIM_Base_SetConfig+0x124>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d108      	bne.n	8002a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a2f      	ldr	r2, [pc, #188]	; (8002b34 <TIM_Base_SetConfig+0x114>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02b      	beq.n	8002ad2 <TIM_Base_SetConfig+0xb2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a80:	d027      	beq.n	8002ad2 <TIM_Base_SetConfig+0xb2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a2c      	ldr	r2, [pc, #176]	; (8002b38 <TIM_Base_SetConfig+0x118>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d023      	beq.n	8002ad2 <TIM_Base_SetConfig+0xb2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a2b      	ldr	r2, [pc, #172]	; (8002b3c <TIM_Base_SetConfig+0x11c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d01f      	beq.n	8002ad2 <TIM_Base_SetConfig+0xb2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a2a      	ldr	r2, [pc, #168]	; (8002b40 <TIM_Base_SetConfig+0x120>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d01b      	beq.n	8002ad2 <TIM_Base_SetConfig+0xb2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a29      	ldr	r2, [pc, #164]	; (8002b44 <TIM_Base_SetConfig+0x124>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d017      	beq.n	8002ad2 <TIM_Base_SetConfig+0xb2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a28      	ldr	r2, [pc, #160]	; (8002b48 <TIM_Base_SetConfig+0x128>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d013      	beq.n	8002ad2 <TIM_Base_SetConfig+0xb2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a27      	ldr	r2, [pc, #156]	; (8002b4c <TIM_Base_SetConfig+0x12c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00f      	beq.n	8002ad2 <TIM_Base_SetConfig+0xb2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <TIM_Base_SetConfig+0x130>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00b      	beq.n	8002ad2 <TIM_Base_SetConfig+0xb2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a25      	ldr	r2, [pc, #148]	; (8002b54 <TIM_Base_SetConfig+0x134>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d007      	beq.n	8002ad2 <TIM_Base_SetConfig+0xb2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <TIM_Base_SetConfig+0x138>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d003      	beq.n	8002ad2 <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a23      	ldr	r2, [pc, #140]	; (8002b5c <TIM_Base_SetConfig+0x13c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d108      	bne.n	8002ae4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <TIM_Base_SetConfig+0x114>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <TIM_Base_SetConfig+0xf8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <TIM_Base_SetConfig+0x124>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d103      	bne.n	8002b20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	615a      	str	r2, [r3, #20]
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40010000 	.word	0x40010000
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	40000c00 	.word	0x40000c00
 8002b44:	40010400 	.word	0x40010400
 8002b48:	40014000 	.word	0x40014000
 8002b4c:	40014400 	.word	0x40014400
 8002b50:	40014800 	.word	0x40014800
 8002b54:	40001800 	.word	0x40001800
 8002b58:	40001c00 	.word	0x40001c00
 8002b5c:	40002000 	.word	0x40002000

08002b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e040      	b.n	8002c30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe f890 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f8b0 	bl	8002d40 <UART_SetConfig>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e022      	b.n	8002c30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fb08 	bl	8003208 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fb8f 	bl	800334c <UART_CheckIdleState>
 8002c2e:	4603      	mov	r3, r0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	; 0x28
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d171      	bne.n	8002d34 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_UART_Transmit+0x24>
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e06a      	b.n	8002d36 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2221      	movs	r2, #33	; 0x21
 8002c6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c6e:	f7fe f905 	bl	8000e7c <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	88fa      	ldrh	r2, [r7, #6]
 8002c78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8c:	d108      	bne.n	8002ca0 <HAL_UART_Transmit+0x68>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d104      	bne.n	8002ca0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e003      	b.n	8002ca8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ca8:	e02c      	b.n	8002d04 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2180      	movs	r1, #128	; 0x80
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fb80 	bl	80033ba <UART_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e038      	b.n	8002d36 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	3302      	adds	r3, #2
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	e007      	b.n	8002cf2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1cc      	bne.n	8002caa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2200      	movs	r2, #0
 8002d18:	2140      	movs	r1, #64	; 0x40
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fb4d 	bl	80033ba <UART_WaitOnFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e005      	b.n	8002d36 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4ba6      	ldr	r3, [pc, #664]	; (8003004 <UART_SetConfig+0x2c4>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	6979      	ldr	r1, [r7, #20]
 8002d74:	430b      	orrs	r3, r1
 8002d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a94      	ldr	r2, [pc, #592]	; (8003008 <UART_SetConfig+0x2c8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d120      	bne.n	8002dfe <UART_SetConfig+0xbe>
 8002dbc:	4b93      	ldr	r3, [pc, #588]	; (800300c <UART_SetConfig+0x2cc>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d816      	bhi.n	8002df8 <UART_SetConfig+0xb8>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <UART_SetConfig+0x90>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002de1 	.word	0x08002de1
 8002dd4:	08002ded 	.word	0x08002ded
 8002dd8:	08002de7 	.word	0x08002de7
 8002ddc:	08002df3 	.word	0x08002df3
 8002de0:	2301      	movs	r3, #1
 8002de2:	77fb      	strb	r3, [r7, #31]
 8002de4:	e150      	b.n	8003088 <UART_SetConfig+0x348>
 8002de6:	2302      	movs	r3, #2
 8002de8:	77fb      	strb	r3, [r7, #31]
 8002dea:	e14d      	b.n	8003088 <UART_SetConfig+0x348>
 8002dec:	2304      	movs	r3, #4
 8002dee:	77fb      	strb	r3, [r7, #31]
 8002df0:	e14a      	b.n	8003088 <UART_SetConfig+0x348>
 8002df2:	2308      	movs	r3, #8
 8002df4:	77fb      	strb	r3, [r7, #31]
 8002df6:	e147      	b.n	8003088 <UART_SetConfig+0x348>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	e144      	b.n	8003088 <UART_SetConfig+0x348>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a83      	ldr	r2, [pc, #524]	; (8003010 <UART_SetConfig+0x2d0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d132      	bne.n	8002e6e <UART_SetConfig+0x12e>
 8002e08:	4b80      	ldr	r3, [pc, #512]	; (800300c <UART_SetConfig+0x2cc>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d828      	bhi.n	8002e68 <UART_SetConfig+0x128>
 8002e16:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <UART_SetConfig+0xdc>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e51 	.word	0x08002e51
 8002e20:	08002e69 	.word	0x08002e69
 8002e24:	08002e69 	.word	0x08002e69
 8002e28:	08002e69 	.word	0x08002e69
 8002e2c:	08002e5d 	.word	0x08002e5d
 8002e30:	08002e69 	.word	0x08002e69
 8002e34:	08002e69 	.word	0x08002e69
 8002e38:	08002e69 	.word	0x08002e69
 8002e3c:	08002e57 	.word	0x08002e57
 8002e40:	08002e69 	.word	0x08002e69
 8002e44:	08002e69 	.word	0x08002e69
 8002e48:	08002e69 	.word	0x08002e69
 8002e4c:	08002e63 	.word	0x08002e63
 8002e50:	2300      	movs	r3, #0
 8002e52:	77fb      	strb	r3, [r7, #31]
 8002e54:	e118      	b.n	8003088 <UART_SetConfig+0x348>
 8002e56:	2302      	movs	r3, #2
 8002e58:	77fb      	strb	r3, [r7, #31]
 8002e5a:	e115      	b.n	8003088 <UART_SetConfig+0x348>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	77fb      	strb	r3, [r7, #31]
 8002e60:	e112      	b.n	8003088 <UART_SetConfig+0x348>
 8002e62:	2308      	movs	r3, #8
 8002e64:	77fb      	strb	r3, [r7, #31]
 8002e66:	e10f      	b.n	8003088 <UART_SetConfig+0x348>
 8002e68:	2310      	movs	r3, #16
 8002e6a:	77fb      	strb	r3, [r7, #31]
 8002e6c:	e10c      	b.n	8003088 <UART_SetConfig+0x348>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a68      	ldr	r2, [pc, #416]	; (8003014 <UART_SetConfig+0x2d4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d120      	bne.n	8002eba <UART_SetConfig+0x17a>
 8002e78:	4b64      	ldr	r3, [pc, #400]	; (800300c <UART_SetConfig+0x2cc>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e82:	2b30      	cmp	r3, #48	; 0x30
 8002e84:	d013      	beq.n	8002eae <UART_SetConfig+0x16e>
 8002e86:	2b30      	cmp	r3, #48	; 0x30
 8002e88:	d814      	bhi.n	8002eb4 <UART_SetConfig+0x174>
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d009      	beq.n	8002ea2 <UART_SetConfig+0x162>
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d810      	bhi.n	8002eb4 <UART_SetConfig+0x174>
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <UART_SetConfig+0x15c>
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d006      	beq.n	8002ea8 <UART_SetConfig+0x168>
 8002e9a:	e00b      	b.n	8002eb4 <UART_SetConfig+0x174>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e0f2      	b.n	8003088 <UART_SetConfig+0x348>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	77fb      	strb	r3, [r7, #31]
 8002ea6:	e0ef      	b.n	8003088 <UART_SetConfig+0x348>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	77fb      	strb	r3, [r7, #31]
 8002eac:	e0ec      	b.n	8003088 <UART_SetConfig+0x348>
 8002eae:	2308      	movs	r3, #8
 8002eb0:	77fb      	strb	r3, [r7, #31]
 8002eb2:	e0e9      	b.n	8003088 <UART_SetConfig+0x348>
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	e0e6      	b.n	8003088 <UART_SetConfig+0x348>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a56      	ldr	r2, [pc, #344]	; (8003018 <UART_SetConfig+0x2d8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d120      	bne.n	8002f06 <UART_SetConfig+0x1c6>
 8002ec4:	4b51      	ldr	r3, [pc, #324]	; (800300c <UART_SetConfig+0x2cc>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ece:	2bc0      	cmp	r3, #192	; 0xc0
 8002ed0:	d013      	beq.n	8002efa <UART_SetConfig+0x1ba>
 8002ed2:	2bc0      	cmp	r3, #192	; 0xc0
 8002ed4:	d814      	bhi.n	8002f00 <UART_SetConfig+0x1c0>
 8002ed6:	2b80      	cmp	r3, #128	; 0x80
 8002ed8:	d009      	beq.n	8002eee <UART_SetConfig+0x1ae>
 8002eda:	2b80      	cmp	r3, #128	; 0x80
 8002edc:	d810      	bhi.n	8002f00 <UART_SetConfig+0x1c0>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <UART_SetConfig+0x1a8>
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d006      	beq.n	8002ef4 <UART_SetConfig+0x1b4>
 8002ee6:	e00b      	b.n	8002f00 <UART_SetConfig+0x1c0>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e0cc      	b.n	8003088 <UART_SetConfig+0x348>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	e0c9      	b.n	8003088 <UART_SetConfig+0x348>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e0c6      	b.n	8003088 <UART_SetConfig+0x348>
 8002efa:	2308      	movs	r3, #8
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e0c3      	b.n	8003088 <UART_SetConfig+0x348>
 8002f00:	2310      	movs	r3, #16
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e0c0      	b.n	8003088 <UART_SetConfig+0x348>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a44      	ldr	r2, [pc, #272]	; (800301c <UART_SetConfig+0x2dc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d125      	bne.n	8002f5c <UART_SetConfig+0x21c>
 8002f10:	4b3e      	ldr	r3, [pc, #248]	; (800300c <UART_SetConfig+0x2cc>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f1e:	d017      	beq.n	8002f50 <UART_SetConfig+0x210>
 8002f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f24:	d817      	bhi.n	8002f56 <UART_SetConfig+0x216>
 8002f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2a:	d00b      	beq.n	8002f44 <UART_SetConfig+0x204>
 8002f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f30:	d811      	bhi.n	8002f56 <UART_SetConfig+0x216>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <UART_SetConfig+0x1fe>
 8002f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3a:	d006      	beq.n	8002f4a <UART_SetConfig+0x20a>
 8002f3c:	e00b      	b.n	8002f56 <UART_SetConfig+0x216>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	77fb      	strb	r3, [r7, #31]
 8002f42:	e0a1      	b.n	8003088 <UART_SetConfig+0x348>
 8002f44:	2302      	movs	r3, #2
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	e09e      	b.n	8003088 <UART_SetConfig+0x348>
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	77fb      	strb	r3, [r7, #31]
 8002f4e:	e09b      	b.n	8003088 <UART_SetConfig+0x348>
 8002f50:	2308      	movs	r3, #8
 8002f52:	77fb      	strb	r3, [r7, #31]
 8002f54:	e098      	b.n	8003088 <UART_SetConfig+0x348>
 8002f56:	2310      	movs	r3, #16
 8002f58:	77fb      	strb	r3, [r7, #31]
 8002f5a:	e095      	b.n	8003088 <UART_SetConfig+0x348>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2f      	ldr	r2, [pc, #188]	; (8003020 <UART_SetConfig+0x2e0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d125      	bne.n	8002fb2 <UART_SetConfig+0x272>
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <UART_SetConfig+0x2cc>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f74:	d017      	beq.n	8002fa6 <UART_SetConfig+0x266>
 8002f76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f7a:	d817      	bhi.n	8002fac <UART_SetConfig+0x26c>
 8002f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f80:	d00b      	beq.n	8002f9a <UART_SetConfig+0x25a>
 8002f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f86:	d811      	bhi.n	8002fac <UART_SetConfig+0x26c>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <UART_SetConfig+0x254>
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f90:	d006      	beq.n	8002fa0 <UART_SetConfig+0x260>
 8002f92:	e00b      	b.n	8002fac <UART_SetConfig+0x26c>
 8002f94:	2301      	movs	r3, #1
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e076      	b.n	8003088 <UART_SetConfig+0x348>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	77fb      	strb	r3, [r7, #31]
 8002f9e:	e073      	b.n	8003088 <UART_SetConfig+0x348>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e070      	b.n	8003088 <UART_SetConfig+0x348>
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e06d      	b.n	8003088 <UART_SetConfig+0x348>
 8002fac:	2310      	movs	r3, #16
 8002fae:	77fb      	strb	r3, [r7, #31]
 8002fb0:	e06a      	b.n	8003088 <UART_SetConfig+0x348>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1b      	ldr	r2, [pc, #108]	; (8003024 <UART_SetConfig+0x2e4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d138      	bne.n	800302e <UART_SetConfig+0x2ee>
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <UART_SetConfig+0x2cc>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002fc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fca:	d017      	beq.n	8002ffc <UART_SetConfig+0x2bc>
 8002fcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fd0:	d82a      	bhi.n	8003028 <UART_SetConfig+0x2e8>
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd6:	d00b      	beq.n	8002ff0 <UART_SetConfig+0x2b0>
 8002fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fdc:	d824      	bhi.n	8003028 <UART_SetConfig+0x2e8>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <UART_SetConfig+0x2aa>
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe6:	d006      	beq.n	8002ff6 <UART_SetConfig+0x2b6>
 8002fe8:	e01e      	b.n	8003028 <UART_SetConfig+0x2e8>
 8002fea:	2300      	movs	r3, #0
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e04b      	b.n	8003088 <UART_SetConfig+0x348>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e048      	b.n	8003088 <UART_SetConfig+0x348>
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e045      	b.n	8003088 <UART_SetConfig+0x348>
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e042      	b.n	8003088 <UART_SetConfig+0x348>
 8003002:	bf00      	nop
 8003004:	efff69f3 	.word	0xefff69f3
 8003008:	40011000 	.word	0x40011000
 800300c:	40023800 	.word	0x40023800
 8003010:	40004400 	.word	0x40004400
 8003014:	40004800 	.word	0x40004800
 8003018:	40004c00 	.word	0x40004c00
 800301c:	40005000 	.word	0x40005000
 8003020:	40011400 	.word	0x40011400
 8003024:	40007800 	.word	0x40007800
 8003028:	2310      	movs	r3, #16
 800302a:	77fb      	strb	r3, [r7, #31]
 800302c:	e02c      	b.n	8003088 <UART_SetConfig+0x348>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a72      	ldr	r2, [pc, #456]	; (80031fc <UART_SetConfig+0x4bc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d125      	bne.n	8003084 <UART_SetConfig+0x344>
 8003038:	4b71      	ldr	r3, [pc, #452]	; (8003200 <UART_SetConfig+0x4c0>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003042:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003046:	d017      	beq.n	8003078 <UART_SetConfig+0x338>
 8003048:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800304c:	d817      	bhi.n	800307e <UART_SetConfig+0x33e>
 800304e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003052:	d00b      	beq.n	800306c <UART_SetConfig+0x32c>
 8003054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003058:	d811      	bhi.n	800307e <UART_SetConfig+0x33e>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <UART_SetConfig+0x326>
 800305e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003062:	d006      	beq.n	8003072 <UART_SetConfig+0x332>
 8003064:	e00b      	b.n	800307e <UART_SetConfig+0x33e>
 8003066:	2300      	movs	r3, #0
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	e00d      	b.n	8003088 <UART_SetConfig+0x348>
 800306c:	2302      	movs	r3, #2
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	e00a      	b.n	8003088 <UART_SetConfig+0x348>
 8003072:	2304      	movs	r3, #4
 8003074:	77fb      	strb	r3, [r7, #31]
 8003076:	e007      	b.n	8003088 <UART_SetConfig+0x348>
 8003078:	2308      	movs	r3, #8
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e004      	b.n	8003088 <UART_SetConfig+0x348>
 800307e:	2310      	movs	r3, #16
 8003080:	77fb      	strb	r3, [r7, #31]
 8003082:	e001      	b.n	8003088 <UART_SetConfig+0x348>
 8003084:	2310      	movs	r3, #16
 8003086:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003090:	d15b      	bne.n	800314a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003092:	7ffb      	ldrb	r3, [r7, #31]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d828      	bhi.n	80030ea <UART_SetConfig+0x3aa>
 8003098:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <UART_SetConfig+0x360>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030c5 	.word	0x080030c5
 80030a4:	080030cd 	.word	0x080030cd
 80030a8:	080030d5 	.word	0x080030d5
 80030ac:	080030eb 	.word	0x080030eb
 80030b0:	080030db 	.word	0x080030db
 80030b4:	080030eb 	.word	0x080030eb
 80030b8:	080030eb 	.word	0x080030eb
 80030bc:	080030eb 	.word	0x080030eb
 80030c0:	080030e3 	.word	0x080030e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030c4:	f7fe fe40 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 80030c8:	61b8      	str	r0, [r7, #24]
        break;
 80030ca:	e013      	b.n	80030f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030cc:	f7fe fe50 	bl	8001d70 <HAL_RCC_GetPCLK2Freq>
 80030d0:	61b8      	str	r0, [r7, #24]
        break;
 80030d2:	e00f      	b.n	80030f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030d4:	4b4b      	ldr	r3, [pc, #300]	; (8003204 <UART_SetConfig+0x4c4>)
 80030d6:	61bb      	str	r3, [r7, #24]
        break;
 80030d8:	e00c      	b.n	80030f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030da:	f7fe fd63 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 80030de:	61b8      	str	r0, [r7, #24]
        break;
 80030e0:	e008      	b.n	80030f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030e6:	61bb      	str	r3, [r7, #24]
        break;
 80030e8:	e004      	b.n	80030f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	77bb      	strb	r3, [r7, #30]
        break;
 80030f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d074      	beq.n	80031e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	005a      	lsls	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2b0f      	cmp	r3, #15
 8003114:	d916      	bls.n	8003144 <UART_SetConfig+0x404>
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d212      	bcs.n	8003144 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	b29b      	uxth	r3, r3
 8003122:	f023 030f 	bic.w	r3, r3, #15
 8003126:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	085b      	lsrs	r3, r3, #1
 800312c:	b29b      	uxth	r3, r3
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	b29a      	uxth	r2, r3
 8003134:	89fb      	ldrh	r3, [r7, #14]
 8003136:	4313      	orrs	r3, r2
 8003138:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	89fa      	ldrh	r2, [r7, #14]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	e04f      	b.n	80031e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	77bb      	strb	r3, [r7, #30]
 8003148:	e04c      	b.n	80031e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800314a:	7ffb      	ldrb	r3, [r7, #31]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d828      	bhi.n	80031a2 <UART_SetConfig+0x462>
 8003150:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <UART_SetConfig+0x418>)
 8003152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003156:	bf00      	nop
 8003158:	0800317d 	.word	0x0800317d
 800315c:	08003185 	.word	0x08003185
 8003160:	0800318d 	.word	0x0800318d
 8003164:	080031a3 	.word	0x080031a3
 8003168:	08003193 	.word	0x08003193
 800316c:	080031a3 	.word	0x080031a3
 8003170:	080031a3 	.word	0x080031a3
 8003174:	080031a3 	.word	0x080031a3
 8003178:	0800319b 	.word	0x0800319b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800317c:	f7fe fde4 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 8003180:	61b8      	str	r0, [r7, #24]
        break;
 8003182:	e013      	b.n	80031ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003184:	f7fe fdf4 	bl	8001d70 <HAL_RCC_GetPCLK2Freq>
 8003188:	61b8      	str	r0, [r7, #24]
        break;
 800318a:	e00f      	b.n	80031ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800318c:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <UART_SetConfig+0x4c4>)
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e00c      	b.n	80031ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003192:	f7fe fd07 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8003196:	61b8      	str	r0, [r7, #24]
        break;
 8003198:	e008      	b.n	80031ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319e:	61bb      	str	r3, [r7, #24]
        break;
 80031a0:	e004      	b.n	80031ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	77bb      	strb	r3, [r7, #30]
        break;
 80031aa:	bf00      	nop
    }

    if (pclk != 0U)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d018      	beq.n	80031e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	085a      	lsrs	r2, r3, #1
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	441a      	add	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b0f      	cmp	r3, #15
 80031ca:	d909      	bls.n	80031e0 <UART_SetConfig+0x4a0>
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d2:	d205      	bcs.n	80031e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	e001      	b.n	80031e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40007c00 	.word	0x40007c00
 8003200:	40023800 	.word	0x40023800
 8003204:	00f42400 	.word	0x00f42400

08003208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01a      	beq.n	800331e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003306:	d10a      	bne.n	800331e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	605a      	str	r2, [r3, #4]
  }
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af02      	add	r7, sp, #8
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800335c:	f7fd fd8e 	bl	8000e7c <HAL_GetTick>
 8003360:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b08      	cmp	r3, #8
 800336e:	d10e      	bne.n	800338e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f81b 	bl	80033ba <UART_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e011      	b.n	80033b2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b09c      	sub	sp, #112	; 0x70
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	603b      	str	r3, [r7, #0]
 80033c6:	4613      	mov	r3, r2
 80033c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ca:	e0a7      	b.n	800351c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d2:	f000 80a3 	beq.w	800351c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d6:	f7fd fd51 	bl	8000e7c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <UART_WaitOnFlagUntilTimeout+0x32>
 80033e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d13f      	bne.n	800346c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f4:	e853 3f00 	ldrex	r3, [r3]
 80033f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003400:	667b      	str	r3, [r7, #100]	; 0x64
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800340a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800340c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003410:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e6      	bne.n	80033ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3308      	adds	r3, #8
 8003424:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	663b      	str	r3, [r7, #96]	; 0x60
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3308      	adds	r3, #8
 800343c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800343e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003440:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003442:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003446:	e841 2300 	strex	r3, r2, [r1]
 800344a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800344c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e5      	bne.n	800341e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e068      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d050      	beq.n	800351c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003488:	d148      	bne.n	800351c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003492:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
 80034b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ba:	e841 2300 	strex	r3, r2, [r1]
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1e6      	bne.n	8003494 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3308      	adds	r3, #8
 80034cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	e853 3f00 	ldrex	r3, [r3]
 80034d4:	613b      	str	r3, [r7, #16]
   return(result);
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3308      	adds	r3, #8
 80034e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034e6:	623a      	str	r2, [r7, #32]
 80034e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	69f9      	ldr	r1, [r7, #28]
 80034ec:	6a3a      	ldr	r2, [r7, #32]
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e5      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e010      	b.n	800353e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	4013      	ands	r3, r2
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	429a      	cmp	r2, r3
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	429a      	cmp	r2, r3
 8003538:	f43f af48 	beq.w	80033cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3770      	adds	r7, #112	; 0x70
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003558:	2b84      	cmp	r3, #132	; 0x84
 800355a:	d005      	beq.n	8003568 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800355c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	3303      	adds	r3, #3
 8003566:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003568:	68fb      	ldr	r3, [r7, #12]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800357a:	f000 fed1 	bl	8004320 <vTaskStartScheduler>
  
  return osOK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	bd80      	pop	{r7, pc}

08003584 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003586:	b089      	sub	sp, #36	; 0x24
 8003588:	af04      	add	r7, sp, #16
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d020      	beq.n	80035d8 <osThreadCreate+0x54>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01c      	beq.n	80035d8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685c      	ldr	r4, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681d      	ldr	r5, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691e      	ldr	r6, [r3, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ffc8 	bl	8003546 <makeFreeRtosPriority>
 80035b6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035c0:	9202      	str	r2, [sp, #8]
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	9100      	str	r1, [sp, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	4632      	mov	r2, r6
 80035ca:	4629      	mov	r1, r5
 80035cc:	4620      	mov	r0, r4
 80035ce:	f000 fcd5 	bl	8003f7c <xTaskCreateStatic>
 80035d2:	4603      	mov	r3, r0
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	e01c      	b.n	8003612 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685c      	ldr	r4, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035e4:	b29e      	uxth	r6, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ffaa 	bl	8003546 <makeFreeRtosPriority>
 80035f2:	4602      	mov	r2, r0
 80035f4:	f107 030c 	add.w	r3, r7, #12
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	9200      	str	r2, [sp, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4632      	mov	r2, r6
 8003600:	4629      	mov	r1, r5
 8003602:	4620      	mov	r0, r4
 8003604:	f000 fd1d 	bl	8004042 <xTaskCreate>
 8003608:	4603      	mov	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003612:	68fb      	ldr	r3, [r7, #12]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800361c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <osDelay+0x16>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	e000      	b.n	8003634 <osDelay+0x18>
 8003632:	2301      	movs	r3, #1
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fe3d 	bl	80042b4 <vTaskDelay>
  
  return osOK;
 800363a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f103 0208 	add.w	r2, r3, #8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f04f 32ff 	mov.w	r2, #4294967295
 800365c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f103 0208 	add.w	r2, r3, #8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f103 0208 	add.w	r2, r3, #8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	601a      	str	r2, [r3, #0]
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d103      	bne.n	8003706 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e00c      	b.n	8003720 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3308      	adds	r3, #8
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	e002      	b.n	8003714 <vListInsert+0x2e>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	429a      	cmp	r2, r3
 800371e:	d2f6      	bcs.n	800370e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	601a      	str	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6892      	ldr	r2, [r2, #8]
 800376e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6852      	ldr	r2, [r2, #4]
 8003778:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	429a      	cmp	r2, r3
 8003782:	d103      	bne.n	800378c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	1e5a      	subs	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10c      	bne.n	80037da <xQueueGenericReset+0x2e>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	b672      	cpsid	i
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	b662      	cpsie	i
 80037d4:	60bb      	str	r3, [r7, #8]
}
 80037d6:	bf00      	nop
 80037d8:	e7fe      	b.n	80037d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80037da:	f001 fcff 	bl	80051dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	68f9      	ldr	r1, [r7, #12]
 80037e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	441a      	add	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	3b01      	subs	r3, #1
 800380c:	68f9      	ldr	r1, [r7, #12]
 800380e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	441a      	add	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	22ff      	movs	r2, #255	; 0xff
 800381e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	22ff      	movs	r2, #255	; 0xff
 8003826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d114      	bne.n	800385a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01a      	beq.n	800386e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3310      	adds	r3, #16
 800383c:	4618      	mov	r0, r3
 800383e:	f000 ffbd 	bl	80047bc <xTaskRemoveFromEventList>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d012      	beq.n	800386e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <xQueueGenericReset+0xd0>)
 800384a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	e009      	b.n	800386e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3310      	adds	r3, #16
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fef0 	bl	8003644 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3324      	adds	r3, #36	; 0x24
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff feeb 	bl	8003644 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800386e:	f001 fce9 	bl	8005244 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003872:	2301      	movs	r3, #1
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	e000ed04 	.word	0xe000ed04

08003880 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	4613      	mov	r3, r2
 800388c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10c      	bne.n	80038ae <xQueueGenericCreate+0x2e>
	__asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	b672      	cpsid	i
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	b662      	cpsie	i
 80038a8:	613b      	str	r3, [r7, #16]
}
 80038aa:	bf00      	nop
 80038ac:	e7fe      	b.n	80038ac <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d102      	bne.n	80038ba <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	e004      	b.n	80038c4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	3348      	adds	r3, #72	; 0x48
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 fd6f 	bl	80053ac <pvPortMalloc>
 80038ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d011      	beq.n	80038fa <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	3348      	adds	r3, #72	; 0x48
 80038de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038e8:	79fa      	ldrb	r2, [r7, #7]
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f805 	bl	8003904 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80038fa:	69bb      	ldr	r3, [r7, #24]
	}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d103      	bne.n	8003920 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e002      	b.n	8003926 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003932:	2101      	movs	r1, #1
 8003934:	69b8      	ldr	r0, [r7, #24]
 8003936:	f7ff ff39 	bl	80037ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08e      	sub	sp, #56	; 0x38
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003952:	2300      	movs	r3, #0
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10c      	bne.n	800397a <xQueueGenericSend+0x36>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	b672      	cpsid	i
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	b662      	cpsie	i
 8003974:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <xQueueGenericSend+0x44>
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <xQueueGenericSend+0x48>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <xQueueGenericSend+0x4a>
 800398c:	2300      	movs	r3, #0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10c      	bne.n	80039ac <xQueueGenericSend+0x68>
	__asm volatile
 8003992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003996:	b672      	cpsid	i
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	b662      	cpsie	i
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039a8:	bf00      	nop
 80039aa:	e7fe      	b.n	80039aa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d103      	bne.n	80039ba <xQueueGenericSend+0x76>
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <xQueueGenericSend+0x7a>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <xQueueGenericSend+0x7c>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10c      	bne.n	80039de <xQueueGenericSend+0x9a>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	b672      	cpsid	i
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	b662      	cpsie	i
 80039d8:	623b      	str	r3, [r7, #32]
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039de:	f001 f8b1 	bl	8004b44 <xTaskGetSchedulerState>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d102      	bne.n	80039ee <xQueueGenericSend+0xaa>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <xQueueGenericSend+0xae>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <xQueueGenericSend+0xb0>
 80039f2:	2300      	movs	r3, #0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10c      	bne.n	8003a12 <xQueueGenericSend+0xce>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	b672      	cpsid	i
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	b662      	cpsie	i
 8003a0c:	61fb      	str	r3, [r7, #28]
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a12:	f001 fbe3 	bl	80051dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d302      	bcc.n	8003a28 <xQueueGenericSend+0xe4>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d129      	bne.n	8003a7c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a2e:	f000 f9bb 	bl	8003da8 <prvCopyDataToQueue>
 8003a32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d010      	beq.n	8003a5e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	3324      	adds	r3, #36	; 0x24
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 febb 	bl	80047bc <xTaskRemoveFromEventList>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d013      	beq.n	8003a74 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a4c:	4b3f      	ldr	r3, [pc, #252]	; (8003b4c <xQueueGenericSend+0x208>)
 8003a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	e00a      	b.n	8003a74 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a64:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <xQueueGenericSend+0x208>)
 8003a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a74:	f001 fbe6 	bl	8005244 <vPortExitCritical>
				return pdPASS;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e063      	b.n	8003b44 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d103      	bne.n	8003a8a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a82:	f001 fbdf 	bl	8005244 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e05c      	b.n	8003b44 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d106      	bne.n	8003a9e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fef5 	bl	8004884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a9e:	f001 fbd1 	bl	8005244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aa2:	f000 fca1 	bl	80043e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aa6:	f001 fb99 	bl	80051dc <vPortEnterCritical>
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ab0:	b25b      	sxtb	r3, r3
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d103      	bne.n	8003ac0 <xQueueGenericSend+0x17c>
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d103      	bne.n	8003ad6 <xQueueGenericSend+0x192>
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ad6:	f001 fbb5 	bl	8005244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ada:	1d3a      	adds	r2, r7, #4
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fee4 	bl	80048b0 <xTaskCheckForTimeOut>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d124      	bne.n	8003b38 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003aee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003af0:	f000 fa2c 	bl	8003f4c <prvIsQueueFull>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d018      	beq.n	8003b2c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	3310      	adds	r3, #16
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fe34 	bl	8004770 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b0a:	f000 f9b7 	bl	8003e7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b0e:	f000 fc79 	bl	8004404 <xTaskResumeAll>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f47f af7c 	bne.w	8003a12 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <xQueueGenericSend+0x208>)
 8003b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	e772      	b.n	8003a12 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b2e:	f000 f9a5 	bl	8003e7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b32:	f000 fc67 	bl	8004404 <xTaskResumeAll>
 8003b36:	e76c      	b.n	8003a12 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b3a:	f000 f99f 	bl	8003e7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b3e:	f000 fc61 	bl	8004404 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3738      	adds	r7, #56	; 0x38
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	e000ed04 	.word	0xe000ed04

08003b50 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08e      	sub	sp, #56	; 0x38
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10c      	bne.n	8003b86 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	b672      	cpsid	i
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	b662      	cpsie	i
 8003b80:	623b      	str	r3, [r7, #32]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00c      	beq.n	8003ba8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	b672      	cpsid	i
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	b662      	cpsie	i
 8003ba2:	61fb      	str	r3, [r7, #28]
}
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ba8:	f000 ffcc 	bl	8004b44 <xTaskGetSchedulerState>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <xQueueSemaphoreTake+0x68>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <xQueueSemaphoreTake+0x6c>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <xQueueSemaphoreTake+0x6e>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10c      	bne.n	8003bdc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	b672      	cpsid	i
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	b662      	cpsie	i
 8003bd6:	61bb      	str	r3, [r7, #24]
}
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bdc:	f001 fafe 	bl	80051dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d024      	beq.n	8003c36 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	1e5a      	subs	r2, r3, #1
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003bfc:	f001 f968 	bl	8004ed0 <pvTaskIncrementMutexHeldCount>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c04:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00f      	beq.n	8003c2e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	3310      	adds	r3, #16
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fdd2 	bl	80047bc <xTaskRemoveFromEventList>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c1e:	4b55      	ldr	r3, [pc, #340]	; (8003d74 <xQueueSemaphoreTake+0x224>)
 8003c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c2e:	f001 fb09 	bl	8005244 <vPortExitCritical>
				return pdPASS;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e099      	b.n	8003d6a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d113      	bne.n	8003c64 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00c      	beq.n	8003c5c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c46:	b672      	cpsid	i
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	b662      	cpsie	i
 8003c56:	617b      	str	r3, [r7, #20]
}
 8003c58:	bf00      	nop
 8003c5a:	e7fe      	b.n	8003c5a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003c5c:	f001 faf2 	bl	8005244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c60:	2300      	movs	r3, #0
 8003c62:	e082      	b.n	8003d6a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c6a:	f107 030c 	add.w	r3, r7, #12
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fe08 	bl	8004884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c74:	2301      	movs	r3, #1
 8003c76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c78:	f001 fae4 	bl	8005244 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c7c:	f000 fbb4 	bl	80043e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c80:	f001 faac 	bl	80051dc <vPortEnterCritical>
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c8a:	b25b      	sxtb	r3, r3
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d103      	bne.n	8003c9a <xQueueSemaphoreTake+0x14a>
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ca0:	b25b      	sxtb	r3, r3
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca6:	d103      	bne.n	8003cb0 <xQueueSemaphoreTake+0x160>
 8003ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb0:	f001 fac8 	bl	8005244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cb4:	463a      	mov	r2, r7
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fdf7 	bl	80048b0 <xTaskCheckForTimeOut>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d132      	bne.n	8003d2e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cca:	f000 f929 	bl	8003f20 <prvIsQueueEmpty>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d026      	beq.n	8003d22 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8003cdc:	f001 fa7e 	bl	80051dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 ff4b 	bl	8004b80 <xTaskPriorityInherit>
 8003cea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003cec:	f001 faaa 	bl	8005244 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf2:	3324      	adds	r3, #36	; 0x24
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fd39 	bl	8004770 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d00:	f000 f8bc 	bl	8003e7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d04:	f000 fb7e 	bl	8004404 <xTaskResumeAll>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f47f af66 	bne.w	8003bdc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8003d10:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <xQueueSemaphoreTake+0x224>)
 8003d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	e75c      	b.n	8003bdc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d24:	f000 f8aa 	bl	8003e7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d28:	f000 fb6c 	bl	8004404 <xTaskResumeAll>
 8003d2c:	e756      	b.n	8003bdc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003d2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d30:	f000 f8a4 	bl	8003e7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d34:	f000 fb66 	bl	8004404 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d3a:	f000 f8f1 	bl	8003f20 <prvIsQueueEmpty>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f43f af4b 	beq.w	8003bdc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00d      	beq.n	8003d68 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8003d4c:	f001 fa46 	bl	80051dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003d50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d52:	f000 f811 	bl	8003d78 <prvGetDisinheritPriorityAfterTimeout>
 8003d56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f001 f818 	bl	8004d94 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003d64:	f001 fa6e 	bl	8005244 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3738      	adds	r7, #56	; 0x38
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	e000ed04 	.word	0xe000ed04

08003d78 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d006      	beq.n	8003d96 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1c3 0307 	rsb	r3, r3, #7
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e001      	b.n	8003d9a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
	}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d14d      	bne.n	8003e6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 ff54 	bl	8004c80 <xTaskPriorityDisinherit>
 8003dd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	e043      	b.n	8003e6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d119      	bne.n	8003e1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6858      	ldr	r0, [r3, #4]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	461a      	mov	r2, r3
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	f001 fce8 	bl	80057c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	441a      	add	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d32b      	bcc.n	8003e6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	e026      	b.n	8003e6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68d8      	ldr	r0, [r3, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	461a      	mov	r2, r3
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	f001 fcce 	bl	80057c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	425b      	negs	r3, r3
 8003e36:	441a      	add	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d207      	bcs.n	8003e58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	425b      	negs	r3, r3
 8003e52:	441a      	add	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d105      	bne.n	8003e6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e72:	697b      	ldr	r3, [r7, #20]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e84:	f001 f9aa 	bl	80051dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e90:	e011      	b.n	8003eb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d012      	beq.n	8003ec0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3324      	adds	r3, #36	; 0x24
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fc8c 	bl	80047bc <xTaskRemoveFromEventList>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eaa:	f000 fd67 	bl	800497c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	dce9      	bgt.n	8003e92 <prvUnlockQueue+0x16>
 8003ebe:	e000      	b.n	8003ec2 <prvUnlockQueue+0x46>
					break;
 8003ec0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	22ff      	movs	r2, #255	; 0xff
 8003ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003eca:	f001 f9bb 	bl	8005244 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ece:	f001 f985 	bl	80051dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ed8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eda:	e011      	b.n	8003f00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d012      	beq.n	8003f0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3310      	adds	r3, #16
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fc67 	bl	80047bc <xTaskRemoveFromEventList>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ef4:	f000 fd42 	bl	800497c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ef8:	7bbb      	ldrb	r3, [r7, #14]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	dce9      	bgt.n	8003edc <prvUnlockQueue+0x60>
 8003f08:	e000      	b.n	8003f0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	22ff      	movs	r2, #255	; 0xff
 8003f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f14:	f001 f996 	bl	8005244 <vPortExitCritical>
}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f28:	f001 f958 	bl	80051dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e001      	b.n	8003f3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f3e:	f001 f981 	bl	8005244 <vPortExitCritical>

	return xReturn;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f54:	f001 f942 	bl	80051dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d102      	bne.n	8003f6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	e001      	b.n	8003f6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f6e:	f001 f969 	bl	8005244 <vPortExitCritical>

	return xReturn;
 8003f72:	68fb      	ldr	r3, [r7, #12]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08e      	sub	sp, #56	; 0x38
 8003f80:	af04      	add	r7, sp, #16
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10c      	bne.n	8003faa <xTaskCreateStatic+0x2e>
	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	b672      	cpsid	i
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	b662      	cpsie	i
 8003fa4:	623b      	str	r3, [r7, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10c      	bne.n	8003fca <xTaskCreateStatic+0x4e>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	b672      	cpsid	i
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	b662      	cpsie	i
 8003fc4:	61fb      	str	r3, [r7, #28]
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fca:	2354      	movs	r3, #84	; 0x54
 8003fcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b54      	cmp	r3, #84	; 0x54
 8003fd2:	d00c      	beq.n	8003fee <xTaskCreateStatic+0x72>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	b672      	cpsid	i
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	b662      	cpsie	i
 8003fe8:	61bb      	str	r3, [r7, #24]
}
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003fee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01e      	beq.n	8004034 <xTaskCreateStatic+0xb8>
 8003ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01b      	beq.n	8004034 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004004:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	2202      	movs	r2, #2
 800400a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800400e:	2300      	movs	r3, #0
 8004010:	9303      	str	r3, [sp, #12]
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	9302      	str	r3, [sp, #8]
 8004016:	f107 0314 	add.w	r3, r7, #20
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f850 	bl	80040cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800402c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800402e:	f000 f8d7 	bl	80041e0 <prvAddNewTaskToReadyList>
 8004032:	e001      	b.n	8004038 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004038:	697b      	ldr	r3, [r7, #20]
	}
 800403a:	4618      	mov	r0, r3
 800403c:	3728      	adds	r7, #40	; 0x28
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004042:	b580      	push	{r7, lr}
 8004044:	b08c      	sub	sp, #48	; 0x30
 8004046:	af04      	add	r7, sp, #16
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	4613      	mov	r3, r2
 8004050:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4618      	mov	r0, r3
 8004058:	f001 f9a8 	bl	80053ac <pvPortMalloc>
 800405c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00e      	beq.n	8004082 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004064:	2054      	movs	r0, #84	; 0x54
 8004066:	f001 f9a1 	bl	80053ac <pvPortMalloc>
 800406a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
 8004078:	e005      	b.n	8004086 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800407a:	6978      	ldr	r0, [r7, #20]
 800407c:	f001 fa60 	bl	8005540 <vPortFree>
 8004080:	e001      	b.n	8004086 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d017      	beq.n	80040bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004094:	88fa      	ldrh	r2, [r7, #6]
 8004096:	2300      	movs	r3, #0
 8004098:	9303      	str	r3, [sp, #12]
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	9302      	str	r3, [sp, #8]
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f80e 	bl	80040cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040b0:	69f8      	ldr	r0, [r7, #28]
 80040b2:	f000 f895 	bl	80041e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040b6:	2301      	movs	r3, #1
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	e002      	b.n	80040c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295
 80040c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040c2:	69bb      	ldr	r3, [r7, #24]
	}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80040e4:	440b      	add	r3, r1
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f023 0307 	bic.w	r3, r3, #7
 80040f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	b672      	cpsid	i
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	b662      	cpsie	i
 8004112:	617b      	str	r3, [r7, #20]
}
 8004114:	bf00      	nop
 8004116:	e7fe      	b.n	8004116 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01f      	beq.n	800415e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	e012      	b.n	800414a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	4413      	add	r3, r2
 800412a:	7819      	ldrb	r1, [r3, #0]
 800412c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	4413      	add	r3, r2
 8004132:	3334      	adds	r3, #52	; 0x34
 8004134:	460a      	mov	r2, r1
 8004136:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4413      	add	r3, r2
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d006      	beq.n	8004152 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3301      	adds	r3, #1
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	2b0f      	cmp	r3, #15
 800414e:	d9e9      	bls.n	8004124 <prvInitialiseNewTask+0x58>
 8004150:	e000      	b.n	8004154 <prvInitialiseNewTask+0x88>
			{
				break;
 8004152:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800415c:	e003      	b.n	8004166 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	2b06      	cmp	r3, #6
 800416a:	d901      	bls.n	8004170 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800416c:	2306      	movs	r3, #6
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004174:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	2200      	movs	r2, #0
 8004180:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	3304      	adds	r3, #4
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fa7c 	bl	8003684 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	3318      	adds	r3, #24
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fa77 	bl	8003684 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	f1c3 0207 	rsb	r2, r3, #7
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	2200      	movs	r2, #0
 80041b0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	68f9      	ldr	r1, [r7, #12]
 80041be:	69b8      	ldr	r0, [r7, #24]
 80041c0:	f000 ff00 	bl	8004fc4 <pxPortInitialiseStack>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041d6:	bf00      	nop
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041e8:	f000 fff8 	bl	80051dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041ec:	4b2a      	ldr	r3, [pc, #168]	; (8004298 <prvAddNewTaskToReadyList+0xb8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	4a29      	ldr	r2, [pc, #164]	; (8004298 <prvAddNewTaskToReadyList+0xb8>)
 80041f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041f6:	4b29      	ldr	r3, [pc, #164]	; (800429c <prvAddNewTaskToReadyList+0xbc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041fe:	4a27      	ldr	r2, [pc, #156]	; (800429c <prvAddNewTaskToReadyList+0xbc>)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004204:	4b24      	ldr	r3, [pc, #144]	; (8004298 <prvAddNewTaskToReadyList+0xb8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d110      	bne.n	800422e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800420c:	f000 fbda 	bl	80049c4 <prvInitialiseTaskLists>
 8004210:	e00d      	b.n	800422e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004212:	4b23      	ldr	r3, [pc, #140]	; (80042a0 <prvAddNewTaskToReadyList+0xc0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800421a:	4b20      	ldr	r3, [pc, #128]	; (800429c <prvAddNewTaskToReadyList+0xbc>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	429a      	cmp	r2, r3
 8004226:	d802      	bhi.n	800422e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004228:	4a1c      	ldr	r2, [pc, #112]	; (800429c <prvAddNewTaskToReadyList+0xbc>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800422e:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <prvAddNewTaskToReadyList+0xc4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3301      	adds	r3, #1
 8004234:	4a1b      	ldr	r2, [pc, #108]	; (80042a4 <prvAddNewTaskToReadyList+0xc4>)
 8004236:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	2201      	movs	r2, #1
 800423e:	409a      	lsls	r2, r3
 8004240:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <prvAddNewTaskToReadyList+0xc8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4313      	orrs	r3, r2
 8004246:	4a18      	ldr	r2, [pc, #96]	; (80042a8 <prvAddNewTaskToReadyList+0xc8>)
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4a15      	ldr	r2, [pc, #84]	; (80042ac <prvAddNewTaskToReadyList+0xcc>)
 8004258:	441a      	add	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	4619      	mov	r1, r3
 8004260:	4610      	mov	r0, r2
 8004262:	f7ff fa1c 	bl	800369e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004266:	f000 ffed 	bl	8005244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800426a:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <prvAddNewTaskToReadyList+0xc0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00e      	beq.n	8004290 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004272:	4b0a      	ldr	r3, [pc, #40]	; (800429c <prvAddNewTaskToReadyList+0xbc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	429a      	cmp	r2, r3
 800427e:	d207      	bcs.n	8004290 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <prvAddNewTaskToReadyList+0xd0>)
 8004282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	200004cc 	.word	0x200004cc
 800429c:	200003cc 	.word	0x200003cc
 80042a0:	200004d8 	.word	0x200004d8
 80042a4:	200004e8 	.word	0x200004e8
 80042a8:	200004d4 	.word	0x200004d4
 80042ac:	200003d0 	.word	0x200003d0
 80042b0:	e000ed04 	.word	0xe000ed04

080042b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d019      	beq.n	80042fa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <vTaskDelay+0x64>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00c      	beq.n	80042e8 <vTaskDelay+0x34>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	b672      	cpsid	i
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	b662      	cpsie	i
 80042e2:	60bb      	str	r3, [r7, #8]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80042e8:	f000 f87e 	bl	80043e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042ec:	2100      	movs	r1, #0
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fe02 	bl	8004ef8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042f4:	f000 f886 	bl	8004404 <xTaskResumeAll>
 80042f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <vTaskDelay+0x68>)
 8004302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	200004f4 	.word	0x200004f4
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800432e:	463a      	mov	r2, r7
 8004330:	1d39      	adds	r1, r7, #4
 8004332:	f107 0308 	add.w	r3, r7, #8
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc f93c 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800433c:	6839      	ldr	r1, [r7, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	9202      	str	r2, [sp, #8]
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	2300      	movs	r3, #0
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	2300      	movs	r3, #0
 800434c:	460a      	mov	r2, r1
 800434e:	4920      	ldr	r1, [pc, #128]	; (80043d0 <vTaskStartScheduler+0xb0>)
 8004350:	4820      	ldr	r0, [pc, #128]	; (80043d4 <vTaskStartScheduler+0xb4>)
 8004352:	f7ff fe13 	bl	8003f7c <xTaskCreateStatic>
 8004356:	4603      	mov	r3, r0
 8004358:	4a1f      	ldr	r2, [pc, #124]	; (80043d8 <vTaskStartScheduler+0xb8>)
 800435a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800435c:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <vTaskStartScheduler+0xb8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004364:	2301      	movs	r3, #1
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e001      	b.n	800436e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d118      	bne.n	80043a6 <vTaskStartScheduler+0x86>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	b672      	cpsid	i
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	b662      	cpsie	i
 8004388:	613b      	str	r3, [r7, #16]
}
 800438a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800438c:	4b13      	ldr	r3, [pc, #76]	; (80043dc <vTaskStartScheduler+0xbc>)
 800438e:	f04f 32ff 	mov.w	r2, #4294967295
 8004392:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004394:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <vTaskStartScheduler+0xc0>)
 8004396:	2201      	movs	r2, #1
 8004398:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800439a:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <vTaskStartScheduler+0xc4>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043a0:	f000 fe9e 	bl	80050e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043a4:	e010      	b.n	80043c8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d10c      	bne.n	80043c8 <vTaskStartScheduler+0xa8>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	b672      	cpsid	i
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	b662      	cpsie	i
 80043c2:	60fb      	str	r3, [r7, #12]
}
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <vTaskStartScheduler+0xa6>
}
 80043c8:	bf00      	nop
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	080068dc 	.word	0x080068dc
 80043d4:	08004995 	.word	0x08004995
 80043d8:	200004f0 	.word	0x200004f0
 80043dc:	200004ec 	.word	0x200004ec
 80043e0:	200004d8 	.word	0x200004d8
 80043e4:	200004d0 	.word	0x200004d0

080043e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <vTaskSuspendAll+0x18>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	4a03      	ldr	r2, [pc, #12]	; (8004400 <vTaskSuspendAll+0x18>)
 80043f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	200004f4 	.word	0x200004f4

08004404 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004412:	4b42      	ldr	r3, [pc, #264]	; (800451c <xTaskResumeAll+0x118>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10c      	bne.n	8004434 <xTaskResumeAll+0x30>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	b672      	cpsid	i
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	b662      	cpsie	i
 800442e:	603b      	str	r3, [r7, #0]
}
 8004430:	bf00      	nop
 8004432:	e7fe      	b.n	8004432 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004434:	f000 fed2 	bl	80051dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004438:	4b38      	ldr	r3, [pc, #224]	; (800451c <xTaskResumeAll+0x118>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3b01      	subs	r3, #1
 800443e:	4a37      	ldr	r2, [pc, #220]	; (800451c <xTaskResumeAll+0x118>)
 8004440:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004442:	4b36      	ldr	r3, [pc, #216]	; (800451c <xTaskResumeAll+0x118>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d161      	bne.n	800450e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800444a:	4b35      	ldr	r3, [pc, #212]	; (8004520 <xTaskResumeAll+0x11c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d05d      	beq.n	800450e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004452:	e02e      	b.n	80044b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004454:	4b33      	ldr	r3, [pc, #204]	; (8004524 <xTaskResumeAll+0x120>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3318      	adds	r3, #24
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff f979 	bl	8003758 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3304      	adds	r3, #4
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff f974 	bl	8003758 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	2201      	movs	r2, #1
 8004476:	409a      	lsls	r2, r3
 8004478:	4b2b      	ldr	r3, [pc, #172]	; (8004528 <xTaskResumeAll+0x124>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4313      	orrs	r3, r2
 800447e:	4a2a      	ldr	r2, [pc, #168]	; (8004528 <xTaskResumeAll+0x124>)
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4a27      	ldr	r2, [pc, #156]	; (800452c <xTaskResumeAll+0x128>)
 8004490:	441a      	add	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3304      	adds	r3, #4
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f7ff f900 	bl	800369e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a2:	4b23      	ldr	r3, [pc, #140]	; (8004530 <xTaskResumeAll+0x12c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d302      	bcc.n	80044b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80044ac:	4b21      	ldr	r3, [pc, #132]	; (8004534 <xTaskResumeAll+0x130>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044b2:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <xTaskResumeAll+0x120>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1cc      	bne.n	8004454 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044c0:	f000 fb20 	bl	8004b04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044c4:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <xTaskResumeAll+0x134>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d010      	beq.n	80044f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044d0:	f000 f836 	bl	8004540 <xTaskIncrementTick>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80044da:	4b16      	ldr	r3, [pc, #88]	; (8004534 <xTaskResumeAll+0x130>)
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f1      	bne.n	80044d0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80044ec:	4b12      	ldr	r3, [pc, #72]	; (8004538 <xTaskResumeAll+0x134>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044f2:	4b10      	ldr	r3, [pc, #64]	; (8004534 <xTaskResumeAll+0x130>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044fa:	2301      	movs	r3, #1
 80044fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <xTaskResumeAll+0x138>)
 8004500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800450e:	f000 fe99 	bl	8005244 <vPortExitCritical>

	return xAlreadyYielded;
 8004512:	68bb      	ldr	r3, [r7, #8]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	200004f4 	.word	0x200004f4
 8004520:	200004cc 	.word	0x200004cc
 8004524:	2000048c 	.word	0x2000048c
 8004528:	200004d4 	.word	0x200004d4
 800452c:	200003d0 	.word	0x200003d0
 8004530:	200003cc 	.word	0x200003cc
 8004534:	200004e0 	.word	0x200004e0
 8004538:	200004dc 	.word	0x200004dc
 800453c:	e000ed04 	.word	0xe000ed04

08004540 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800454a:	4b4f      	ldr	r3, [pc, #316]	; (8004688 <xTaskIncrementTick+0x148>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	f040 808a 	bne.w	8004668 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004554:	4b4d      	ldr	r3, [pc, #308]	; (800468c <xTaskIncrementTick+0x14c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800455c:	4a4b      	ldr	r2, [pc, #300]	; (800468c <xTaskIncrementTick+0x14c>)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d122      	bne.n	80045ae <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004568:	4b49      	ldr	r3, [pc, #292]	; (8004690 <xTaskIncrementTick+0x150>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00c      	beq.n	800458c <xTaskIncrementTick+0x4c>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	b672      	cpsid	i
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	b662      	cpsie	i
 8004586:	603b      	str	r3, [r7, #0]
}
 8004588:	bf00      	nop
 800458a:	e7fe      	b.n	800458a <xTaskIncrementTick+0x4a>
 800458c:	4b40      	ldr	r3, [pc, #256]	; (8004690 <xTaskIncrementTick+0x150>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	4b40      	ldr	r3, [pc, #256]	; (8004694 <xTaskIncrementTick+0x154>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a3e      	ldr	r2, [pc, #248]	; (8004690 <xTaskIncrementTick+0x150>)
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	4a3e      	ldr	r2, [pc, #248]	; (8004694 <xTaskIncrementTick+0x154>)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	4b3d      	ldr	r3, [pc, #244]	; (8004698 <xTaskIncrementTick+0x158>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3301      	adds	r3, #1
 80045a6:	4a3c      	ldr	r2, [pc, #240]	; (8004698 <xTaskIncrementTick+0x158>)
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	f000 faab 	bl	8004b04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045ae:	4b3b      	ldr	r3, [pc, #236]	; (800469c <xTaskIncrementTick+0x15c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d348      	bcc.n	800464a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045b8:	4b35      	ldr	r3, [pc, #212]	; (8004690 <xTaskIncrementTick+0x150>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d104      	bne.n	80045cc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045c2:	4b36      	ldr	r3, [pc, #216]	; (800469c <xTaskIncrementTick+0x15c>)
 80045c4:	f04f 32ff 	mov.w	r2, #4294967295
 80045c8:	601a      	str	r2, [r3, #0]
					break;
 80045ca:	e03e      	b.n	800464a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045cc:	4b30      	ldr	r3, [pc, #192]	; (8004690 <xTaskIncrementTick+0x150>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d203      	bcs.n	80045ec <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045e4:	4a2d      	ldr	r2, [pc, #180]	; (800469c <xTaskIncrementTick+0x15c>)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045ea:	e02e      	b.n	800464a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff f8b1 	bl	8003758 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	3318      	adds	r3, #24
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff f8a8 	bl	8003758 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	2201      	movs	r2, #1
 800460e:	409a      	lsls	r2, r3
 8004610:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <xTaskIncrementTick+0x160>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4313      	orrs	r3, r2
 8004616:	4a22      	ldr	r2, [pc, #136]	; (80046a0 <xTaskIncrementTick+0x160>)
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4a1f      	ldr	r2, [pc, #124]	; (80046a4 <xTaskIncrementTick+0x164>)
 8004628:	441a      	add	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	3304      	adds	r3, #4
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f7ff f834 	bl	800369e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463a:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <xTaskIncrementTick+0x168>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	429a      	cmp	r2, r3
 8004642:	d3b9      	bcc.n	80045b8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004644:	2301      	movs	r3, #1
 8004646:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004648:	e7b6      	b.n	80045b8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800464a:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <xTaskIncrementTick+0x168>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	4914      	ldr	r1, [pc, #80]	; (80046a4 <xTaskIncrementTick+0x164>)
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d907      	bls.n	8004672 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004662:	2301      	movs	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e004      	b.n	8004672 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004668:	4b10      	ldr	r3, [pc, #64]	; (80046ac <xTaskIncrementTick+0x16c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	4a0f      	ldr	r2, [pc, #60]	; (80046ac <xTaskIncrementTick+0x16c>)
 8004670:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004672:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <xTaskIncrementTick+0x170>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800467a:	2301      	movs	r3, #1
 800467c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800467e:	697b      	ldr	r3, [r7, #20]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	200004f4 	.word	0x200004f4
 800468c:	200004d0 	.word	0x200004d0
 8004690:	20000484 	.word	0x20000484
 8004694:	20000488 	.word	0x20000488
 8004698:	200004e4 	.word	0x200004e4
 800469c:	200004ec 	.word	0x200004ec
 80046a0:	200004d4 	.word	0x200004d4
 80046a4:	200003d0 	.word	0x200003d0
 80046a8:	200003cc 	.word	0x200003cc
 80046ac:	200004dc 	.word	0x200004dc
 80046b0:	200004e0 	.word	0x200004e0

080046b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046ba:	4b28      	ldr	r3, [pc, #160]	; (800475c <vTaskSwitchContext+0xa8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046c2:	4b27      	ldr	r3, [pc, #156]	; (8004760 <vTaskSwitchContext+0xac>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046c8:	e041      	b.n	800474e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80046ca:	4b25      	ldr	r3, [pc, #148]	; (8004760 <vTaskSwitchContext+0xac>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d0:	4b24      	ldr	r3, [pc, #144]	; (8004764 <vTaskSwitchContext+0xb0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	fab3 f383 	clz	r3, r3
 80046dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046de:	7afb      	ldrb	r3, [r7, #11]
 80046e0:	f1c3 031f 	rsb	r3, r3, #31
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	4920      	ldr	r1, [pc, #128]	; (8004768 <vTaskSwitchContext+0xb4>)
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10c      	bne.n	8004714 <vTaskSwitchContext+0x60>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	b672      	cpsid	i
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	b662      	cpsie	i
 800470e:	607b      	str	r3, [r7, #4]
}
 8004710:	bf00      	nop
 8004712:	e7fe      	b.n	8004712 <vTaskSwitchContext+0x5e>
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4a12      	ldr	r2, [pc, #72]	; (8004768 <vTaskSwitchContext+0xb4>)
 8004720:	4413      	add	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	3308      	adds	r3, #8
 8004736:	429a      	cmp	r2, r3
 8004738:	d104      	bne.n	8004744 <vTaskSwitchContext+0x90>
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	605a      	str	r2, [r3, #4]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	4a08      	ldr	r2, [pc, #32]	; (800476c <vTaskSwitchContext+0xb8>)
 800474c:	6013      	str	r3, [r2, #0]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	200004f4 	.word	0x200004f4
 8004760:	200004e0 	.word	0x200004e0
 8004764:	200004d4 	.word	0x200004d4
 8004768:	200003d0 	.word	0x200003d0
 800476c:	200003cc 	.word	0x200003cc

08004770 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10c      	bne.n	800479a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	b672      	cpsid	i
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	b662      	cpsie	i
 8004794:	60fb      	str	r3, [r7, #12]
}
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800479a:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <vTaskPlaceOnEventList+0x48>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3318      	adds	r3, #24
 80047a0:	4619      	mov	r1, r3
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fe ff9f 	bl	80036e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047a8:	2101      	movs	r1, #1
 80047aa:	6838      	ldr	r0, [r7, #0]
 80047ac:	f000 fba4 	bl	8004ef8 <prvAddCurrentTaskToDelayedList>
}
 80047b0:	bf00      	nop
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	200003cc 	.word	0x200003cc

080047bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10c      	bne.n	80047ec <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	b672      	cpsid	i
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	b662      	cpsie	i
 80047e6:	60fb      	str	r3, [r7, #12]
}
 80047e8:	bf00      	nop
 80047ea:	e7fe      	b.n	80047ea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	3318      	adds	r3, #24
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fe ffb1 	bl	8003758 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047f6:	4b1d      	ldr	r3, [pc, #116]	; (800486c <xTaskRemoveFromEventList+0xb0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d11c      	bne.n	8004838 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	3304      	adds	r3, #4
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe ffa8 	bl	8003758 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	2201      	movs	r2, #1
 800480e:	409a      	lsls	r2, r3
 8004810:	4b17      	ldr	r3, [pc, #92]	; (8004870 <xTaskRemoveFromEventList+0xb4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4313      	orrs	r3, r2
 8004816:	4a16      	ldr	r2, [pc, #88]	; (8004870 <xTaskRemoveFromEventList+0xb4>)
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4a13      	ldr	r2, [pc, #76]	; (8004874 <xTaskRemoveFromEventList+0xb8>)
 8004828:	441a      	add	r2, r3
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3304      	adds	r3, #4
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f7fe ff34 	bl	800369e <vListInsertEnd>
 8004836:	e005      	b.n	8004844 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	3318      	adds	r3, #24
 800483c:	4619      	mov	r1, r3
 800483e:	480e      	ldr	r0, [pc, #56]	; (8004878 <xTaskRemoveFromEventList+0xbc>)
 8004840:	f7fe ff2d 	bl	800369e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	4b0c      	ldr	r3, [pc, #48]	; (800487c <xTaskRemoveFromEventList+0xc0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	429a      	cmp	r2, r3
 8004850:	d905      	bls.n	800485e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004852:	2301      	movs	r3, #1
 8004854:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004856:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <xTaskRemoveFromEventList+0xc4>)
 8004858:	2201      	movs	r2, #1
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e001      	b.n	8004862 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004862:	697b      	ldr	r3, [r7, #20]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	200004f4 	.word	0x200004f4
 8004870:	200004d4 	.word	0x200004d4
 8004874:	200003d0 	.word	0x200003d0
 8004878:	2000048c 	.word	0x2000048c
 800487c:	200003cc 	.word	0x200003cc
 8004880:	200004e0 	.word	0x200004e0

08004884 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <vTaskInternalSetTimeOutState+0x24>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <vTaskInternalSetTimeOutState+0x28>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	605a      	str	r2, [r3, #4]
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	200004e4 	.word	0x200004e4
 80048ac:	200004d0 	.word	0x200004d0

080048b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10c      	bne.n	80048da <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	b672      	cpsid	i
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	b662      	cpsie	i
 80048d4:	613b      	str	r3, [r7, #16]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10c      	bne.n	80048fa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	b672      	cpsid	i
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	b662      	cpsie	i
 80048f4:	60fb      	str	r3, [r7, #12]
}
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80048fa:	f000 fc6f 	bl	80051dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048fe:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <xTaskCheckForTimeOut+0xc4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d102      	bne.n	800491e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004918:	2300      	movs	r3, #0
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	e023      	b.n	8004966 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b15      	ldr	r3, [pc, #84]	; (8004978 <xTaskCheckForTimeOut+0xc8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d007      	beq.n	800493a <xTaskCheckForTimeOut+0x8a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	429a      	cmp	r2, r3
 8004932:	d302      	bcc.n	800493a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004934:	2301      	movs	r3, #1
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	e015      	b.n	8004966 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	429a      	cmp	r2, r3
 8004942:	d20b      	bcs.n	800495c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	1ad2      	subs	r2, r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff ff97 	bl	8004884 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	e004      	b.n	8004966 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004962:	2301      	movs	r3, #1
 8004964:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004966:	f000 fc6d 	bl	8005244 <vPortExitCritical>

	return xReturn;
 800496a:	69fb      	ldr	r3, [r7, #28]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3720      	adds	r7, #32
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	200004d0 	.word	0x200004d0
 8004978:	200004e4 	.word	0x200004e4

0800497c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004980:	4b03      	ldr	r3, [pc, #12]	; (8004990 <vTaskMissedYield+0x14>)
 8004982:	2201      	movs	r2, #1
 8004984:	601a      	str	r2, [r3, #0]
}
 8004986:	bf00      	nop
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	200004e0 	.word	0x200004e0

08004994 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800499c:	f000 f852 	bl	8004a44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049a0:	4b06      	ldr	r3, [pc, #24]	; (80049bc <prvIdleTask+0x28>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d9f9      	bls.n	800499c <prvIdleTask+0x8>
			{
				taskYIELD();
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <prvIdleTask+0x2c>)
 80049aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049b8:	e7f0      	b.n	800499c <prvIdleTask+0x8>
 80049ba:	bf00      	nop
 80049bc:	200003d0 	.word	0x200003d0
 80049c0:	e000ed04 	.word	0xe000ed04

080049c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049ca:	2300      	movs	r3, #0
 80049cc:	607b      	str	r3, [r7, #4]
 80049ce:	e00c      	b.n	80049ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <prvInitialiseTaskLists+0x60>)
 80049dc:	4413      	add	r3, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe fe30 	bl	8003644 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3301      	adds	r3, #1
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b06      	cmp	r3, #6
 80049ee:	d9ef      	bls.n	80049d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049f0:	480d      	ldr	r0, [pc, #52]	; (8004a28 <prvInitialiseTaskLists+0x64>)
 80049f2:	f7fe fe27 	bl	8003644 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049f6:	480d      	ldr	r0, [pc, #52]	; (8004a2c <prvInitialiseTaskLists+0x68>)
 80049f8:	f7fe fe24 	bl	8003644 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049fc:	480c      	ldr	r0, [pc, #48]	; (8004a30 <prvInitialiseTaskLists+0x6c>)
 80049fe:	f7fe fe21 	bl	8003644 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a02:	480c      	ldr	r0, [pc, #48]	; (8004a34 <prvInitialiseTaskLists+0x70>)
 8004a04:	f7fe fe1e 	bl	8003644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a08:	480b      	ldr	r0, [pc, #44]	; (8004a38 <prvInitialiseTaskLists+0x74>)
 8004a0a:	f7fe fe1b 	bl	8003644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <prvInitialiseTaskLists+0x78>)
 8004a10:	4a05      	ldr	r2, [pc, #20]	; (8004a28 <prvInitialiseTaskLists+0x64>)
 8004a12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <prvInitialiseTaskLists+0x7c>)
 8004a16:	4a05      	ldr	r2, [pc, #20]	; (8004a2c <prvInitialiseTaskLists+0x68>)
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	200003d0 	.word	0x200003d0
 8004a28:	2000045c 	.word	0x2000045c
 8004a2c:	20000470 	.word	0x20000470
 8004a30:	2000048c 	.word	0x2000048c
 8004a34:	200004a0 	.word	0x200004a0
 8004a38:	200004b8 	.word	0x200004b8
 8004a3c:	20000484 	.word	0x20000484
 8004a40:	20000488 	.word	0x20000488

08004a44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a4a:	e019      	b.n	8004a80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a4c:	f000 fbc6 	bl	80051dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a50:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <prvCheckTasksWaitingTermination+0x50>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe fe7b 	bl	8003758 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <prvCheckTasksWaitingTermination+0x54>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <prvCheckTasksWaitingTermination+0x54>)
 8004a6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <prvCheckTasksWaitingTermination+0x58>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <prvCheckTasksWaitingTermination+0x58>)
 8004a74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a76:	f000 fbe5 	bl	8005244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f810 	bl	8004aa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <prvCheckTasksWaitingTermination+0x58>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e1      	bne.n	8004a4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	200004a0 	.word	0x200004a0
 8004a98:	200004cc 	.word	0x200004cc
 8004a9c:	200004b4 	.word	0x200004b4

08004aa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d108      	bne.n	8004ac4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fd42 	bl	8005540 <vPortFree>
				vPortFree( pxTCB );
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fd3f 	bl	8005540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ac2:	e01a      	b.n	8004afa <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d103      	bne.n	8004ad6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fd36 	bl	8005540 <vPortFree>
	}
 8004ad4:	e011      	b.n	8004afa <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d00c      	beq.n	8004afa <prvDeleteTCB+0x5a>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	b672      	cpsid	i
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	b662      	cpsie	i
 8004af4:	60fb      	str	r3, [r7, #12]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <prvDeleteTCB+0x58>
	}
 8004afa:	bf00      	nop
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <prvResetNextTaskUnblockTime+0x38>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b14:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <prvResetNextTaskUnblockTime+0x3c>)
 8004b16:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b1c:	e008      	b.n	8004b30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1e:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <prvResetNextTaskUnblockTime+0x38>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <prvResetNextTaskUnblockTime+0x3c>)
 8004b2e:	6013      	str	r3, [r2, #0]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	20000484 	.word	0x20000484
 8004b40:	200004ec 	.word	0x200004ec

08004b44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <xTaskGetSchedulerState+0x34>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b52:	2301      	movs	r3, #1
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	e008      	b.n	8004b6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b58:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <xTaskGetSchedulerState+0x38>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d102      	bne.n	8004b66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b60:	2302      	movs	r3, #2
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	e001      	b.n	8004b6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b66:	2300      	movs	r3, #0
 8004b68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b6a:	687b      	ldr	r3, [r7, #4]
	}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	200004d8 	.word	0x200004d8
 8004b7c:	200004f4 	.word	0x200004f4

08004b80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d069      	beq.n	8004c6a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9a:	4b36      	ldr	r3, [pc, #216]	; (8004c74 <xTaskPriorityInherit+0xf4>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d259      	bcs.n	8004c58 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	db06      	blt.n	8004bba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bac:	4b31      	ldr	r3, [pc, #196]	; (8004c74 <xTaskPriorityInherit+0xf4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	f1c3 0207 	rsb	r2, r3, #7
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6959      	ldr	r1, [r3, #20]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4a2b      	ldr	r2, [pc, #172]	; (8004c78 <xTaskPriorityInherit+0xf8>)
 8004bcc:	4413      	add	r3, r2
 8004bce:	4299      	cmp	r1, r3
 8004bd0:	d13a      	bne.n	8004c48 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe fdbe 	bl	8003758 <uxListRemove>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d115      	bne.n	8004c0e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be6:	4924      	ldr	r1, [pc, #144]	; (8004c78 <xTaskPriorityInherit+0xf8>)
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <xTaskPriorityInherit+0x8e>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43da      	mvns	r2, r3
 8004c04:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <xTaskPriorityInherit+0xfc>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <xTaskPriorityInherit+0xfc>)
 8004c0c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c0e:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <xTaskPriorityInherit+0xf4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	409a      	lsls	r2, r3
 8004c20:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <xTaskPriorityInherit+0xfc>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <xTaskPriorityInherit+0xfc>)
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4a10      	ldr	r2, [pc, #64]	; (8004c78 <xTaskPriorityInherit+0xf8>)
 8004c38:	441a      	add	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f7fe fd2c 	bl	800369e <vListInsertEnd>
 8004c46:	e004      	b.n	8004c52 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <xTaskPriorityInherit+0xf4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004c52:	2301      	movs	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	e008      	b.n	8004c6a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <xTaskPriorityInherit+0xf4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d201      	bcs.n	8004c6a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004c66:	2301      	movs	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
	}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	200003cc 	.word	0x200003cc
 8004c78:	200003d0 	.word	0x200003d0
 8004c7c:	200004d4 	.word	0x200004d4

08004c80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d072      	beq.n	8004d7c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c96:	4b3c      	ldr	r3, [pc, #240]	; (8004d88 <xTaskPriorityDisinherit+0x108>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d00c      	beq.n	8004cba <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	b672      	cpsid	i
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	b662      	cpsie	i
 8004cb4:	60fb      	str	r3, [r7, #12]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10c      	bne.n	8004cdc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	b672      	cpsid	i
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	b662      	cpsie	i
 8004cd6:	60bb      	str	r3, [r7, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	e7fe      	b.n	8004cda <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce0:	1e5a      	subs	r2, r3, #1
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d044      	beq.n	8004d7c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d140      	bne.n	8004d7c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fe fd2a 	bl	8003758 <uxListRemove>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d115      	bne.n	8004d36 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0e:	491f      	ldr	r1, [pc, #124]	; (8004d8c <xTaskPriorityDisinherit+0x10c>)
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <xTaskPriorityDisinherit+0xb6>
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	2201      	movs	r2, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43da      	mvns	r2, r3
 8004d2c:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <xTaskPriorityDisinherit+0x110>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4013      	ands	r3, r2
 8004d32:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <xTaskPriorityDisinherit+0x110>)
 8004d34:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	f1c3 0207 	rsb	r2, r3, #7
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	2201      	movs	r2, #1
 8004d50:	409a      	lsls	r2, r3
 8004d52:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <xTaskPriorityDisinherit+0x110>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <xTaskPriorityDisinherit+0x110>)
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4a08      	ldr	r2, [pc, #32]	; (8004d8c <xTaskPriorityDisinherit+0x10c>)
 8004d6a:	441a      	add	r2, r3
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f7fe fc93 	bl	800369e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d7c:	697b      	ldr	r3, [r7, #20]
	}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	200003cc 	.word	0x200003cc
 8004d8c:	200003d0 	.word	0x200003d0
 8004d90:	200004d4 	.word	0x200004d4

08004d94 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004da2:	2301      	movs	r3, #1
 8004da4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8087 	beq.w	8004ebc <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10c      	bne.n	8004dd0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	b672      	cpsid	i
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	b662      	cpsie	i
 8004dca:	60fb      	str	r3, [r7, #12]
}
 8004dcc:	bf00      	nop
 8004dce:	e7fe      	b.n	8004dce <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d902      	bls.n	8004de0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	e002      	b.n	8004de6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d065      	beq.n	8004ebc <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d160      	bne.n	8004ebc <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004dfa:	4b32      	ldr	r3, [pc, #200]	; (8004ec4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d10c      	bne.n	8004e1e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	b672      	cpsid	i
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	b662      	cpsie	i
 8004e18:	60bb      	str	r3, [r7, #8]
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	db04      	blt.n	8004e3c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	f1c3 0207 	rsb	r2, r3, #7
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	6959      	ldr	r1, [r3, #20]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004e4c:	4413      	add	r3, r2
 8004e4e:	4299      	cmp	r1, r3
 8004e50:	d134      	bne.n	8004ebc <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	3304      	adds	r3, #4
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe fc7e 	bl	8003758 <uxListRemove>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d115      	bne.n	8004e8e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	4918      	ldr	r1, [pc, #96]	; (8004ec8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10a      	bne.n	8004e8e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43da      	mvns	r2, r3
 8004e84:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004e8c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	2201      	movs	r2, #1
 8004e94:	409a      	lsls	r2, r3
 8004e96:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	4a0b      	ldr	r2, [pc, #44]	; (8004ecc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4a06      	ldr	r2, [pc, #24]	; (8004ec8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004eae:	441a      	add	r2, r3
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	f7fe fbf1 	bl	800369e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ebc:	bf00      	nop
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	200003cc 	.word	0x200003cc
 8004ec8:	200003d0 	.word	0x200003d0
 8004ecc:	200004d4 	.word	0x200004d4

08004ed0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004ed4:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d004      	beq.n	8004ee6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004edc:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ee2:	3201      	adds	r2, #1
 8004ee4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004ee6:	4b03      	ldr	r3, [pc, #12]	; (8004ef4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
	}
 8004eea:	4618      	mov	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	200003cc 	.word	0x200003cc

08004ef8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f02:	4b29      	ldr	r3, [pc, #164]	; (8004fa8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f08:	4b28      	ldr	r3, [pc, #160]	; (8004fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe fc22 	bl	8003758 <uxListRemove>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f1a:	4b24      	ldr	r3, [pc, #144]	; (8004fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	2201      	movs	r2, #1
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	43da      	mvns	r2, r3
 8004f28:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	4a20      	ldr	r2, [pc, #128]	; (8004fb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d10a      	bne.n	8004f50 <prvAddCurrentTaskToDelayedList+0x58>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d007      	beq.n	8004f50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f40:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4619      	mov	r1, r3
 8004f48:	481a      	ldr	r0, [pc, #104]	; (8004fb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f4a:	f7fe fba8 	bl	800369e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f4e:	e026      	b.n	8004f9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4413      	add	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f58:	4b14      	ldr	r3, [pc, #80]	; (8004fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d209      	bcs.n	8004f7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f68:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f7fe fbb6 	bl	80036e6 <vListInsert>
}
 8004f7a:	e010      	b.n	8004f9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3304      	adds	r3, #4
 8004f86:	4619      	mov	r1, r3
 8004f88:	4610      	mov	r0, r2
 8004f8a:	f7fe fbac 	bl	80036e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f8e:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d202      	bcs.n	8004f9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f98:	4a09      	ldr	r2, [pc, #36]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6013      	str	r3, [r2, #0]
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	200004d0 	.word	0x200004d0
 8004fac:	200003cc 	.word	0x200003cc
 8004fb0:	200004d4 	.word	0x200004d4
 8004fb4:	200004b8 	.word	0x200004b8
 8004fb8:	20000488 	.word	0x20000488
 8004fbc:	20000484 	.word	0x20000484
 8004fc0:	200004ec 	.word	0x200004ec

08004fc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3b04      	subs	r3, #4
 8004fd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3b04      	subs	r3, #4
 8004fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f023 0201 	bic.w	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3b04      	subs	r3, #4
 8004ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ff4:	4a0c      	ldr	r2, [pc, #48]	; (8005028 <pxPortInitialiseStack+0x64>)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3b14      	subs	r3, #20
 8004ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3b04      	subs	r3, #4
 800500a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f06f 0202 	mvn.w	r2, #2
 8005012:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3b20      	subs	r3, #32
 8005018:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800501a:	68fb      	ldr	r3, [r7, #12]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	0800502d 	.word	0x0800502d

0800502c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005036:	4b14      	ldr	r3, [pc, #80]	; (8005088 <prvTaskExitError+0x5c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503e:	d00c      	beq.n	800505a <prvTaskExitError+0x2e>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	b672      	cpsid	i
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	b662      	cpsie	i
 8005054:	60fb      	str	r3, [r7, #12]
}
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <prvTaskExitError+0x2c>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	b672      	cpsid	i
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	b662      	cpsie	i
 800506e:	60bb      	str	r3, [r7, #8]
}
 8005070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005072:	bf00      	nop
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0fc      	beq.n	8005074 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800507a:	bf00      	nop
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	20000010 	.word	0x20000010
 800508c:	00000000 	.word	0x00000000

08005090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <pxCurrentTCBConst2>)
 8005092:	6819      	ldr	r1, [r3, #0]
 8005094:	6808      	ldr	r0, [r1, #0]
 8005096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509a:	f380 8809 	msr	PSP, r0
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f04f 0000 	mov.w	r0, #0
 80050a6:	f380 8811 	msr	BASEPRI, r0
 80050aa:	4770      	bx	lr
 80050ac:	f3af 8000 	nop.w

080050b0 <pxCurrentTCBConst2>:
 80050b0:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop

080050b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050b8:	4808      	ldr	r0, [pc, #32]	; (80050dc <prvPortStartFirstTask+0x24>)
 80050ba:	6800      	ldr	r0, [r0, #0]
 80050bc:	6800      	ldr	r0, [r0, #0]
 80050be:	f380 8808 	msr	MSP, r0
 80050c2:	f04f 0000 	mov.w	r0, #0
 80050c6:	f380 8814 	msr	CONTROL, r0
 80050ca:	b662      	cpsie	i
 80050cc:	b661      	cpsie	f
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	df00      	svc	0
 80050d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050da:	bf00      	nop
 80050dc:	e000ed08 	.word	0xe000ed08

080050e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050e6:	4b37      	ldr	r3, [pc, #220]	; (80051c4 <xPortStartScheduler+0xe4>)
 80050e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	22ff      	movs	r2, #255	; 0xff
 80050f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005108:	b2da      	uxtb	r2, r3
 800510a:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <xPortStartScheduler+0xe8>)
 800510c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800510e:	4b2f      	ldr	r3, [pc, #188]	; (80051cc <xPortStartScheduler+0xec>)
 8005110:	2207      	movs	r2, #7
 8005112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005114:	e009      	b.n	800512a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005116:	4b2d      	ldr	r3, [pc, #180]	; (80051cc <xPortStartScheduler+0xec>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3b01      	subs	r3, #1
 800511c:	4a2b      	ldr	r2, [pc, #172]	; (80051cc <xPortStartScheduler+0xec>)
 800511e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	b2db      	uxtb	r3, r3
 8005128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800512a:	78fb      	ldrb	r3, [r7, #3]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005132:	2b80      	cmp	r3, #128	; 0x80
 8005134:	d0ef      	beq.n	8005116 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005136:	4b25      	ldr	r3, [pc, #148]	; (80051cc <xPortStartScheduler+0xec>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f1c3 0307 	rsb	r3, r3, #7
 800513e:	2b04      	cmp	r3, #4
 8005140:	d00c      	beq.n	800515c <xPortStartScheduler+0x7c>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	b672      	cpsid	i
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	b662      	cpsie	i
 8005156:	60bb      	str	r3, [r7, #8]
}
 8005158:	bf00      	nop
 800515a:	e7fe      	b.n	800515a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800515c:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <xPortStartScheduler+0xec>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	4a1a      	ldr	r2, [pc, #104]	; (80051cc <xPortStartScheduler+0xec>)
 8005164:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005166:	4b19      	ldr	r3, [pc, #100]	; (80051cc <xPortStartScheduler+0xec>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800516e:	4a17      	ldr	r2, [pc, #92]	; (80051cc <xPortStartScheduler+0xec>)
 8005170:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	b2da      	uxtb	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800517a:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <xPortStartScheduler+0xf0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a14      	ldr	r2, [pc, #80]	; (80051d0 <xPortStartScheduler+0xf0>)
 8005180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005184:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005186:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <xPortStartScheduler+0xf0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a11      	ldr	r2, [pc, #68]	; (80051d0 <xPortStartScheduler+0xf0>)
 800518c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005190:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005192:	f000 f8dd 	bl	8005350 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005196:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <xPortStartScheduler+0xf4>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800519c:	f000 f8fc 	bl	8005398 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051a0:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <xPortStartScheduler+0xf8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a0c      	ldr	r2, [pc, #48]	; (80051d8 <xPortStartScheduler+0xf8>)
 80051a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80051aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051ac:	f7ff ff84 	bl	80050b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051b0:	f7ff fa80 	bl	80046b4 <vTaskSwitchContext>
	prvTaskExitError();
 80051b4:	f7ff ff3a 	bl	800502c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	e000e400 	.word	0xe000e400
 80051c8:	200004f8 	.word	0x200004f8
 80051cc:	200004fc 	.word	0x200004fc
 80051d0:	e000ed20 	.word	0xe000ed20
 80051d4:	20000010 	.word	0x20000010
 80051d8:	e000ef34 	.word	0xe000ef34

080051dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e6:	b672      	cpsid	i
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	b662      	cpsie	i
 80051f6:	607b      	str	r3, [r7, #4]
}
 80051f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051fa:	4b10      	ldr	r3, [pc, #64]	; (800523c <vPortEnterCritical+0x60>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3301      	adds	r3, #1
 8005200:	4a0e      	ldr	r2, [pc, #56]	; (800523c <vPortEnterCritical+0x60>)
 8005202:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005204:	4b0d      	ldr	r3, [pc, #52]	; (800523c <vPortEnterCritical+0x60>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d111      	bne.n	8005230 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800520c:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <vPortEnterCritical+0x64>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00c      	beq.n	8005230 <vPortEnterCritical+0x54>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	b672      	cpsid	i
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	b662      	cpsie	i
 800522a:	603b      	str	r3, [r7, #0]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <vPortEnterCritical+0x52>
	}
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	20000010 	.word	0x20000010
 8005240:	e000ed04 	.word	0xe000ed04

08005244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800524a:	4b13      	ldr	r3, [pc, #76]	; (8005298 <vPortExitCritical+0x54>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10c      	bne.n	800526c <vPortExitCritical+0x28>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	b672      	cpsid	i
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	b662      	cpsie	i
 8005266:	607b      	str	r3, [r7, #4]
}
 8005268:	bf00      	nop
 800526a:	e7fe      	b.n	800526a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <vPortExitCritical+0x54>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3b01      	subs	r3, #1
 8005272:	4a09      	ldr	r2, [pc, #36]	; (8005298 <vPortExitCritical+0x54>)
 8005274:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005276:	4b08      	ldr	r3, [pc, #32]	; (8005298 <vPortExitCritical+0x54>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d105      	bne.n	800528a <vPortExitCritical+0x46>
 800527e:	2300      	movs	r3, #0
 8005280:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005288:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000010 	.word	0x20000010
 800529c:	00000000 	.word	0x00000000

080052a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052a0:	f3ef 8009 	mrs	r0, PSP
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	4b15      	ldr	r3, [pc, #84]	; (8005300 <pxCurrentTCBConst>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	f01e 0f10 	tst.w	lr, #16
 80052b0:	bf08      	it	eq
 80052b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ba:	6010      	str	r0, [r2, #0]
 80052bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052c4:	b672      	cpsid	i
 80052c6:	f380 8811 	msr	BASEPRI, r0
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	b662      	cpsie	i
 80052d4:	f7ff f9ee 	bl	80046b4 <vTaskSwitchContext>
 80052d8:	f04f 0000 	mov.w	r0, #0
 80052dc:	f380 8811 	msr	BASEPRI, r0
 80052e0:	bc09      	pop	{r0, r3}
 80052e2:	6819      	ldr	r1, [r3, #0]
 80052e4:	6808      	ldr	r0, [r1, #0]
 80052e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ea:	f01e 0f10 	tst.w	lr, #16
 80052ee:	bf08      	it	eq
 80052f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052f4:	f380 8809 	msr	PSP, r0
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop

08005300 <pxCurrentTCBConst>:
 8005300:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop

08005308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	b672      	cpsid	i
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	b662      	cpsie	i
 8005322:	607b      	str	r3, [r7, #4]
}
 8005324:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005326:	f7ff f90b 	bl	8004540 <xTaskIncrementTick>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <SysTick_Handler+0x44>)
 8005332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	2300      	movs	r3, #0
 800533a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f383 8811 	msr	BASEPRI, r3
}
 8005342:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	e000ed04 	.word	0xe000ed04

08005350 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005354:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <vPortSetupTimerInterrupt+0x34>)
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800535a:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <vPortSetupTimerInterrupt+0x38>)
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005360:	4b0a      	ldr	r3, [pc, #40]	; (800538c <vPortSetupTimerInterrupt+0x3c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a0a      	ldr	r2, [pc, #40]	; (8005390 <vPortSetupTimerInterrupt+0x40>)
 8005366:	fba2 2303 	umull	r2, r3, r2, r3
 800536a:	099b      	lsrs	r3, r3, #6
 800536c:	4a09      	ldr	r2, [pc, #36]	; (8005394 <vPortSetupTimerInterrupt+0x44>)
 800536e:	3b01      	subs	r3, #1
 8005370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005372:	4b04      	ldr	r3, [pc, #16]	; (8005384 <vPortSetupTimerInterrupt+0x34>)
 8005374:	2207      	movs	r2, #7
 8005376:	601a      	str	r2, [r3, #0]
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	e000e010 	.word	0xe000e010
 8005388:	e000e018 	.word	0xe000e018
 800538c:	20000004 	.word	0x20000004
 8005390:	10624dd3 	.word	0x10624dd3
 8005394:	e000e014 	.word	0xe000e014

08005398 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005398:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053a8 <vPortEnableVFP+0x10>
 800539c:	6801      	ldr	r1, [r0, #0]
 800539e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053a2:	6001      	str	r1, [r0, #0]
 80053a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053a6:	bf00      	nop
 80053a8:	e000ed88 	.word	0xe000ed88

080053ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	; 0x28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053b8:	f7ff f816 	bl	80043e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053bc:	4b5b      	ldr	r3, [pc, #364]	; (800552c <pvPortMalloc+0x180>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053c4:	f000 f91a 	bl	80055fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053c8:	4b59      	ldr	r3, [pc, #356]	; (8005530 <pvPortMalloc+0x184>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f040 8092 	bne.w	80054fa <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01f      	beq.n	800541c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80053dc:	2208      	movs	r2, #8
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4413      	add	r3, r2
 80053e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d016      	beq.n	800541c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f023 0307 	bic.w	r3, r3, #7
 80053f4:	3308      	adds	r3, #8
 80053f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00c      	beq.n	800541c <pvPortMalloc+0x70>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	b672      	cpsid	i
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	b662      	cpsie	i
 8005416:	617b      	str	r3, [r7, #20]
}
 8005418:	bf00      	nop
 800541a:	e7fe      	b.n	800541a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d06b      	beq.n	80054fa <pvPortMalloc+0x14e>
 8005422:	4b44      	ldr	r3, [pc, #272]	; (8005534 <pvPortMalloc+0x188>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	429a      	cmp	r2, r3
 800542a:	d866      	bhi.n	80054fa <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800542c:	4b42      	ldr	r3, [pc, #264]	; (8005538 <pvPortMalloc+0x18c>)
 800542e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005430:	4b41      	ldr	r3, [pc, #260]	; (8005538 <pvPortMalloc+0x18c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005436:	e004      	b.n	8005442 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d903      	bls.n	8005454 <pvPortMalloc+0xa8>
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1f1      	bne.n	8005438 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005454:	4b35      	ldr	r3, [pc, #212]	; (800552c <pvPortMalloc+0x180>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545a:	429a      	cmp	r2, r3
 800545c:	d04d      	beq.n	80054fa <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2208      	movs	r2, #8
 8005464:	4413      	add	r3, r2
 8005466:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	1ad2      	subs	r2, r2, r3
 8005478:	2308      	movs	r3, #8
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	429a      	cmp	r2, r3
 800547e:	d921      	bls.n	80054c4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4413      	add	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00c      	beq.n	80054ac <pvPortMalloc+0x100>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	b672      	cpsid	i
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	b662      	cpsie	i
 80054a6:	613b      	str	r3, [r7, #16]
}
 80054a8:	bf00      	nop
 80054aa:	e7fe      	b.n	80054aa <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	1ad2      	subs	r2, r2, r3
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054be:	69b8      	ldr	r0, [r7, #24]
 80054c0:	f000 f8fe 	bl	80056c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054c4:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <pvPortMalloc+0x188>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	4a19      	ldr	r2, [pc, #100]	; (8005534 <pvPortMalloc+0x188>)
 80054d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054d2:	4b18      	ldr	r3, [pc, #96]	; (8005534 <pvPortMalloc+0x188>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	4b19      	ldr	r3, [pc, #100]	; (800553c <pvPortMalloc+0x190>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d203      	bcs.n	80054e6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054de:	4b15      	ldr	r3, [pc, #84]	; (8005534 <pvPortMalloc+0x188>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a16      	ldr	r2, [pc, #88]	; (800553c <pvPortMalloc+0x190>)
 80054e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	4b11      	ldr	r3, [pc, #68]	; (8005530 <pvPortMalloc+0x184>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054fa:	f7fe ff83 	bl	8004404 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00c      	beq.n	8005522 <pvPortMalloc+0x176>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550c:	b672      	cpsid	i
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	b662      	cpsie	i
 800551c:	60fb      	str	r3, [r7, #12]
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <pvPortMalloc+0x174>
	return pvReturn;
 8005522:	69fb      	ldr	r3, [r7, #28]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3728      	adds	r7, #40	; 0x28
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20004108 	.word	0x20004108
 8005530:	20004114 	.word	0x20004114
 8005534:	2000410c 	.word	0x2000410c
 8005538:	20004100 	.word	0x20004100
 800553c:	20004110 	.word	0x20004110

08005540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d04c      	beq.n	80055ec <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005552:	2308      	movs	r3, #8
 8005554:	425b      	negs	r3, r3
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4413      	add	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	4b23      	ldr	r3, [pc, #140]	; (80055f4 <vPortFree+0xb4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4013      	ands	r3, r2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10c      	bne.n	8005588 <vPortFree+0x48>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	b672      	cpsid	i
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	b662      	cpsie	i
 8005582:	60fb      	str	r3, [r7, #12]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00c      	beq.n	80055aa <vPortFree+0x6a>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	b672      	cpsid	i
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	b662      	cpsie	i
 80055a4:	60bb      	str	r3, [r7, #8]
}
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <vPortFree+0xb4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d019      	beq.n	80055ec <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d115      	bne.n	80055ec <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <vPortFree+0xb4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	43db      	mvns	r3, r3
 80055ca:	401a      	ands	r2, r3
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055d0:	f7fe ff0a 	bl	80043e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <vPortFree+0xb8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4413      	add	r3, r2
 80055de:	4a06      	ldr	r2, [pc, #24]	; (80055f8 <vPortFree+0xb8>)
 80055e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055e2:	6938      	ldr	r0, [r7, #16]
 80055e4:	f000 f86c 	bl	80056c0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80055e8:	f7fe ff0c 	bl	8004404 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055ec:	bf00      	nop
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20004114 	.word	0x20004114
 80055f8:	2000410c 	.word	0x2000410c

080055fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005602:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005606:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005608:	4b27      	ldr	r3, [pc, #156]	; (80056a8 <prvHeapInit+0xac>)
 800560a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00c      	beq.n	8005630 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3307      	adds	r3, #7
 800561a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0307 	bic.w	r3, r3, #7
 8005622:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	4a1f      	ldr	r2, [pc, #124]	; (80056a8 <prvHeapInit+0xac>)
 800562c:	4413      	add	r3, r2
 800562e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005634:	4a1d      	ldr	r2, [pc, #116]	; (80056ac <prvHeapInit+0xb0>)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800563a:	4b1c      	ldr	r3, [pc, #112]	; (80056ac <prvHeapInit+0xb0>)
 800563c:	2200      	movs	r2, #0
 800563e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	4413      	add	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005648:	2208      	movs	r2, #8
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0307 	bic.w	r3, r3, #7
 8005656:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a15      	ldr	r2, [pc, #84]	; (80056b0 <prvHeapInit+0xb4>)
 800565c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800565e:	4b14      	ldr	r3, [pc, #80]	; (80056b0 <prvHeapInit+0xb4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2200      	movs	r2, #0
 8005664:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <prvHeapInit+0xb4>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	1ad2      	subs	r2, r2, r3
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <prvHeapInit+0xb4>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <prvHeapInit+0xb8>)
 800568a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	4a09      	ldr	r2, [pc, #36]	; (80056b8 <prvHeapInit+0xbc>)
 8005692:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005694:	4b09      	ldr	r3, [pc, #36]	; (80056bc <prvHeapInit+0xc0>)
 8005696:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800569a:	601a      	str	r2, [r3, #0]
}
 800569c:	bf00      	nop
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	20000500 	.word	0x20000500
 80056ac:	20004100 	.word	0x20004100
 80056b0:	20004108 	.word	0x20004108
 80056b4:	20004110 	.word	0x20004110
 80056b8:	2000410c 	.word	0x2000410c
 80056bc:	20004114 	.word	0x20004114

080056c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056c8:	4b28      	ldr	r3, [pc, #160]	; (800576c <prvInsertBlockIntoFreeList+0xac>)
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	e002      	b.n	80056d4 <prvInsertBlockIntoFreeList+0x14>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d8f7      	bhi.n	80056ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	4413      	add	r3, r2
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d108      	bne.n	8005702 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	441a      	add	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	441a      	add	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d118      	bne.n	8005748 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4b15      	ldr	r3, [pc, #84]	; (8005770 <prvInsertBlockIntoFreeList+0xb0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d00d      	beq.n	800573e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	441a      	add	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	e008      	b.n	8005750 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800573e:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <prvInsertBlockIntoFreeList+0xb0>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	e003      	b.n	8005750 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	429a      	cmp	r2, r3
 8005756:	d002      	beq.n	800575e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20004100 	.word	0x20004100
 8005770:	20004108 	.word	0x20004108

08005774 <__errno>:
 8005774:	4b01      	ldr	r3, [pc, #4]	; (800577c <__errno+0x8>)
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	20000014 	.word	0x20000014

08005780 <__libc_init_array>:
 8005780:	b570      	push	{r4, r5, r6, lr}
 8005782:	4d0d      	ldr	r5, [pc, #52]	; (80057b8 <__libc_init_array+0x38>)
 8005784:	4c0d      	ldr	r4, [pc, #52]	; (80057bc <__libc_init_array+0x3c>)
 8005786:	1b64      	subs	r4, r4, r5
 8005788:	10a4      	asrs	r4, r4, #2
 800578a:	2600      	movs	r6, #0
 800578c:	42a6      	cmp	r6, r4
 800578e:	d109      	bne.n	80057a4 <__libc_init_array+0x24>
 8005790:	4d0b      	ldr	r5, [pc, #44]	; (80057c0 <__libc_init_array+0x40>)
 8005792:	4c0c      	ldr	r4, [pc, #48]	; (80057c4 <__libc_init_array+0x44>)
 8005794:	f001 f832 	bl	80067fc <_init>
 8005798:	1b64      	subs	r4, r4, r5
 800579a:	10a4      	asrs	r4, r4, #2
 800579c:	2600      	movs	r6, #0
 800579e:	42a6      	cmp	r6, r4
 80057a0:	d105      	bne.n	80057ae <__libc_init_array+0x2e>
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a8:	4798      	blx	r3
 80057aa:	3601      	adds	r6, #1
 80057ac:	e7ee      	b.n	800578c <__libc_init_array+0xc>
 80057ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b2:	4798      	blx	r3
 80057b4:	3601      	adds	r6, #1
 80057b6:	e7f2      	b.n	800579e <__libc_init_array+0x1e>
 80057b8:	0800699c 	.word	0x0800699c
 80057bc:	0800699c 	.word	0x0800699c
 80057c0:	0800699c 	.word	0x0800699c
 80057c4:	080069a0 	.word	0x080069a0

080057c8 <memcpy>:
 80057c8:	440a      	add	r2, r1
 80057ca:	4291      	cmp	r1, r2
 80057cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80057d0:	d100      	bne.n	80057d4 <memcpy+0xc>
 80057d2:	4770      	bx	lr
 80057d4:	b510      	push	{r4, lr}
 80057d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057de:	4291      	cmp	r1, r2
 80057e0:	d1f9      	bne.n	80057d6 <memcpy+0xe>
 80057e2:	bd10      	pop	{r4, pc}

080057e4 <memset>:
 80057e4:	4402      	add	r2, r0
 80057e6:	4603      	mov	r3, r0
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d100      	bne.n	80057ee <memset+0xa>
 80057ec:	4770      	bx	lr
 80057ee:	f803 1b01 	strb.w	r1, [r3], #1
 80057f2:	e7f9      	b.n	80057e8 <memset+0x4>

080057f4 <iprintf>:
 80057f4:	b40f      	push	{r0, r1, r2, r3}
 80057f6:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <iprintf+0x2c>)
 80057f8:	b513      	push	{r0, r1, r4, lr}
 80057fa:	681c      	ldr	r4, [r3, #0]
 80057fc:	b124      	cbz	r4, 8005808 <iprintf+0x14>
 80057fe:	69a3      	ldr	r3, [r4, #24]
 8005800:	b913      	cbnz	r3, 8005808 <iprintf+0x14>
 8005802:	4620      	mov	r0, r4
 8005804:	f000 fa5e 	bl	8005cc4 <__sinit>
 8005808:	ab05      	add	r3, sp, #20
 800580a:	9a04      	ldr	r2, [sp, #16]
 800580c:	68a1      	ldr	r1, [r4, #8]
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	4620      	mov	r0, r4
 8005812:	f000 fc67 	bl	80060e4 <_vfiprintf_r>
 8005816:	b002      	add	sp, #8
 8005818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800581c:	b004      	add	sp, #16
 800581e:	4770      	bx	lr
 8005820:	20000014 	.word	0x20000014

08005824 <_puts_r>:
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	460e      	mov	r6, r1
 8005828:	4605      	mov	r5, r0
 800582a:	b118      	cbz	r0, 8005834 <_puts_r+0x10>
 800582c:	6983      	ldr	r3, [r0, #24]
 800582e:	b90b      	cbnz	r3, 8005834 <_puts_r+0x10>
 8005830:	f000 fa48 	bl	8005cc4 <__sinit>
 8005834:	69ab      	ldr	r3, [r5, #24]
 8005836:	68ac      	ldr	r4, [r5, #8]
 8005838:	b913      	cbnz	r3, 8005840 <_puts_r+0x1c>
 800583a:	4628      	mov	r0, r5
 800583c:	f000 fa42 	bl	8005cc4 <__sinit>
 8005840:	4b2c      	ldr	r3, [pc, #176]	; (80058f4 <_puts_r+0xd0>)
 8005842:	429c      	cmp	r4, r3
 8005844:	d120      	bne.n	8005888 <_puts_r+0x64>
 8005846:	686c      	ldr	r4, [r5, #4]
 8005848:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800584a:	07db      	lsls	r3, r3, #31
 800584c:	d405      	bmi.n	800585a <_puts_r+0x36>
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	0598      	lsls	r0, r3, #22
 8005852:	d402      	bmi.n	800585a <_puts_r+0x36>
 8005854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005856:	f000 fad3 	bl	8005e00 <__retarget_lock_acquire_recursive>
 800585a:	89a3      	ldrh	r3, [r4, #12]
 800585c:	0719      	lsls	r1, r3, #28
 800585e:	d51d      	bpl.n	800589c <_puts_r+0x78>
 8005860:	6923      	ldr	r3, [r4, #16]
 8005862:	b1db      	cbz	r3, 800589c <_puts_r+0x78>
 8005864:	3e01      	subs	r6, #1
 8005866:	68a3      	ldr	r3, [r4, #8]
 8005868:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800586c:	3b01      	subs	r3, #1
 800586e:	60a3      	str	r3, [r4, #8]
 8005870:	bb39      	cbnz	r1, 80058c2 <_puts_r+0x9e>
 8005872:	2b00      	cmp	r3, #0
 8005874:	da38      	bge.n	80058e8 <_puts_r+0xc4>
 8005876:	4622      	mov	r2, r4
 8005878:	210a      	movs	r1, #10
 800587a:	4628      	mov	r0, r5
 800587c:	f000 f848 	bl	8005910 <__swbuf_r>
 8005880:	3001      	adds	r0, #1
 8005882:	d011      	beq.n	80058a8 <_puts_r+0x84>
 8005884:	250a      	movs	r5, #10
 8005886:	e011      	b.n	80058ac <_puts_r+0x88>
 8005888:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <_puts_r+0xd4>)
 800588a:	429c      	cmp	r4, r3
 800588c:	d101      	bne.n	8005892 <_puts_r+0x6e>
 800588e:	68ac      	ldr	r4, [r5, #8]
 8005890:	e7da      	b.n	8005848 <_puts_r+0x24>
 8005892:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <_puts_r+0xd8>)
 8005894:	429c      	cmp	r4, r3
 8005896:	bf08      	it	eq
 8005898:	68ec      	ldreq	r4, [r5, #12]
 800589a:	e7d5      	b.n	8005848 <_puts_r+0x24>
 800589c:	4621      	mov	r1, r4
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 f888 	bl	80059b4 <__swsetup_r>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d0dd      	beq.n	8005864 <_puts_r+0x40>
 80058a8:	f04f 35ff 	mov.w	r5, #4294967295
 80058ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058ae:	07da      	lsls	r2, r3, #31
 80058b0:	d405      	bmi.n	80058be <_puts_r+0x9a>
 80058b2:	89a3      	ldrh	r3, [r4, #12]
 80058b4:	059b      	lsls	r3, r3, #22
 80058b6:	d402      	bmi.n	80058be <_puts_r+0x9a>
 80058b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ba:	f000 faa2 	bl	8005e02 <__retarget_lock_release_recursive>
 80058be:	4628      	mov	r0, r5
 80058c0:	bd70      	pop	{r4, r5, r6, pc}
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	da04      	bge.n	80058d0 <_puts_r+0xac>
 80058c6:	69a2      	ldr	r2, [r4, #24]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	dc06      	bgt.n	80058da <_puts_r+0xb6>
 80058cc:	290a      	cmp	r1, #10
 80058ce:	d004      	beq.n	80058da <_puts_r+0xb6>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	6022      	str	r2, [r4, #0]
 80058d6:	7019      	strb	r1, [r3, #0]
 80058d8:	e7c5      	b.n	8005866 <_puts_r+0x42>
 80058da:	4622      	mov	r2, r4
 80058dc:	4628      	mov	r0, r5
 80058de:	f000 f817 	bl	8005910 <__swbuf_r>
 80058e2:	3001      	adds	r0, #1
 80058e4:	d1bf      	bne.n	8005866 <_puts_r+0x42>
 80058e6:	e7df      	b.n	80058a8 <_puts_r+0x84>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	250a      	movs	r5, #10
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	6022      	str	r2, [r4, #0]
 80058f0:	701d      	strb	r5, [r3, #0]
 80058f2:	e7db      	b.n	80058ac <_puts_r+0x88>
 80058f4:	08006920 	.word	0x08006920
 80058f8:	08006940 	.word	0x08006940
 80058fc:	08006900 	.word	0x08006900

08005900 <puts>:
 8005900:	4b02      	ldr	r3, [pc, #8]	; (800590c <puts+0xc>)
 8005902:	4601      	mov	r1, r0
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	f7ff bf8d 	b.w	8005824 <_puts_r>
 800590a:	bf00      	nop
 800590c:	20000014 	.word	0x20000014

08005910 <__swbuf_r>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	460e      	mov	r6, r1
 8005914:	4614      	mov	r4, r2
 8005916:	4605      	mov	r5, r0
 8005918:	b118      	cbz	r0, 8005922 <__swbuf_r+0x12>
 800591a:	6983      	ldr	r3, [r0, #24]
 800591c:	b90b      	cbnz	r3, 8005922 <__swbuf_r+0x12>
 800591e:	f000 f9d1 	bl	8005cc4 <__sinit>
 8005922:	4b21      	ldr	r3, [pc, #132]	; (80059a8 <__swbuf_r+0x98>)
 8005924:	429c      	cmp	r4, r3
 8005926:	d12b      	bne.n	8005980 <__swbuf_r+0x70>
 8005928:	686c      	ldr	r4, [r5, #4]
 800592a:	69a3      	ldr	r3, [r4, #24]
 800592c:	60a3      	str	r3, [r4, #8]
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	071a      	lsls	r2, r3, #28
 8005932:	d52f      	bpl.n	8005994 <__swbuf_r+0x84>
 8005934:	6923      	ldr	r3, [r4, #16]
 8005936:	b36b      	cbz	r3, 8005994 <__swbuf_r+0x84>
 8005938:	6923      	ldr	r3, [r4, #16]
 800593a:	6820      	ldr	r0, [r4, #0]
 800593c:	1ac0      	subs	r0, r0, r3
 800593e:	6963      	ldr	r3, [r4, #20]
 8005940:	b2f6      	uxtb	r6, r6
 8005942:	4283      	cmp	r3, r0
 8005944:	4637      	mov	r7, r6
 8005946:	dc04      	bgt.n	8005952 <__swbuf_r+0x42>
 8005948:	4621      	mov	r1, r4
 800594a:	4628      	mov	r0, r5
 800594c:	f000 f926 	bl	8005b9c <_fflush_r>
 8005950:	bb30      	cbnz	r0, 80059a0 <__swbuf_r+0x90>
 8005952:	68a3      	ldr	r3, [r4, #8]
 8005954:	3b01      	subs	r3, #1
 8005956:	60a3      	str	r3, [r4, #8]
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	6022      	str	r2, [r4, #0]
 800595e:	701e      	strb	r6, [r3, #0]
 8005960:	6963      	ldr	r3, [r4, #20]
 8005962:	3001      	adds	r0, #1
 8005964:	4283      	cmp	r3, r0
 8005966:	d004      	beq.n	8005972 <__swbuf_r+0x62>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	07db      	lsls	r3, r3, #31
 800596c:	d506      	bpl.n	800597c <__swbuf_r+0x6c>
 800596e:	2e0a      	cmp	r6, #10
 8005970:	d104      	bne.n	800597c <__swbuf_r+0x6c>
 8005972:	4621      	mov	r1, r4
 8005974:	4628      	mov	r0, r5
 8005976:	f000 f911 	bl	8005b9c <_fflush_r>
 800597a:	b988      	cbnz	r0, 80059a0 <__swbuf_r+0x90>
 800597c:	4638      	mov	r0, r7
 800597e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005980:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <__swbuf_r+0x9c>)
 8005982:	429c      	cmp	r4, r3
 8005984:	d101      	bne.n	800598a <__swbuf_r+0x7a>
 8005986:	68ac      	ldr	r4, [r5, #8]
 8005988:	e7cf      	b.n	800592a <__swbuf_r+0x1a>
 800598a:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <__swbuf_r+0xa0>)
 800598c:	429c      	cmp	r4, r3
 800598e:	bf08      	it	eq
 8005990:	68ec      	ldreq	r4, [r5, #12]
 8005992:	e7ca      	b.n	800592a <__swbuf_r+0x1a>
 8005994:	4621      	mov	r1, r4
 8005996:	4628      	mov	r0, r5
 8005998:	f000 f80c 	bl	80059b4 <__swsetup_r>
 800599c:	2800      	cmp	r0, #0
 800599e:	d0cb      	beq.n	8005938 <__swbuf_r+0x28>
 80059a0:	f04f 37ff 	mov.w	r7, #4294967295
 80059a4:	e7ea      	b.n	800597c <__swbuf_r+0x6c>
 80059a6:	bf00      	nop
 80059a8:	08006920 	.word	0x08006920
 80059ac:	08006940 	.word	0x08006940
 80059b0:	08006900 	.word	0x08006900

080059b4 <__swsetup_r>:
 80059b4:	4b32      	ldr	r3, [pc, #200]	; (8005a80 <__swsetup_r+0xcc>)
 80059b6:	b570      	push	{r4, r5, r6, lr}
 80059b8:	681d      	ldr	r5, [r3, #0]
 80059ba:	4606      	mov	r6, r0
 80059bc:	460c      	mov	r4, r1
 80059be:	b125      	cbz	r5, 80059ca <__swsetup_r+0x16>
 80059c0:	69ab      	ldr	r3, [r5, #24]
 80059c2:	b913      	cbnz	r3, 80059ca <__swsetup_r+0x16>
 80059c4:	4628      	mov	r0, r5
 80059c6:	f000 f97d 	bl	8005cc4 <__sinit>
 80059ca:	4b2e      	ldr	r3, [pc, #184]	; (8005a84 <__swsetup_r+0xd0>)
 80059cc:	429c      	cmp	r4, r3
 80059ce:	d10f      	bne.n	80059f0 <__swsetup_r+0x3c>
 80059d0:	686c      	ldr	r4, [r5, #4]
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059d8:	0719      	lsls	r1, r3, #28
 80059da:	d42c      	bmi.n	8005a36 <__swsetup_r+0x82>
 80059dc:	06dd      	lsls	r5, r3, #27
 80059de:	d411      	bmi.n	8005a04 <__swsetup_r+0x50>
 80059e0:	2309      	movs	r3, #9
 80059e2:	6033      	str	r3, [r6, #0]
 80059e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059e8:	81a3      	strh	r3, [r4, #12]
 80059ea:	f04f 30ff 	mov.w	r0, #4294967295
 80059ee:	e03e      	b.n	8005a6e <__swsetup_r+0xba>
 80059f0:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <__swsetup_r+0xd4>)
 80059f2:	429c      	cmp	r4, r3
 80059f4:	d101      	bne.n	80059fa <__swsetup_r+0x46>
 80059f6:	68ac      	ldr	r4, [r5, #8]
 80059f8:	e7eb      	b.n	80059d2 <__swsetup_r+0x1e>
 80059fa:	4b24      	ldr	r3, [pc, #144]	; (8005a8c <__swsetup_r+0xd8>)
 80059fc:	429c      	cmp	r4, r3
 80059fe:	bf08      	it	eq
 8005a00:	68ec      	ldreq	r4, [r5, #12]
 8005a02:	e7e6      	b.n	80059d2 <__swsetup_r+0x1e>
 8005a04:	0758      	lsls	r0, r3, #29
 8005a06:	d512      	bpl.n	8005a2e <__swsetup_r+0x7a>
 8005a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a0a:	b141      	cbz	r1, 8005a1e <__swsetup_r+0x6a>
 8005a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a10:	4299      	cmp	r1, r3
 8005a12:	d002      	beq.n	8005a1a <__swsetup_r+0x66>
 8005a14:	4630      	mov	r0, r6
 8005a16:	f000 fa5b 	bl	8005ed0 <_free_r>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	2300      	movs	r3, #0
 8005a28:	6063      	str	r3, [r4, #4]
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	f043 0308 	orr.w	r3, r3, #8
 8005a34:	81a3      	strh	r3, [r4, #12]
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	b94b      	cbnz	r3, 8005a4e <__swsetup_r+0x9a>
 8005a3a:	89a3      	ldrh	r3, [r4, #12]
 8005a3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a44:	d003      	beq.n	8005a4e <__swsetup_r+0x9a>
 8005a46:	4621      	mov	r1, r4
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f000 fa01 	bl	8005e50 <__smakebuf_r>
 8005a4e:	89a0      	ldrh	r0, [r4, #12]
 8005a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a54:	f010 0301 	ands.w	r3, r0, #1
 8005a58:	d00a      	beq.n	8005a70 <__swsetup_r+0xbc>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60a3      	str	r3, [r4, #8]
 8005a5e:	6963      	ldr	r3, [r4, #20]
 8005a60:	425b      	negs	r3, r3
 8005a62:	61a3      	str	r3, [r4, #24]
 8005a64:	6923      	ldr	r3, [r4, #16]
 8005a66:	b943      	cbnz	r3, 8005a7a <__swsetup_r+0xc6>
 8005a68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a6c:	d1ba      	bne.n	80059e4 <__swsetup_r+0x30>
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}
 8005a70:	0781      	lsls	r1, r0, #30
 8005a72:	bf58      	it	pl
 8005a74:	6963      	ldrpl	r3, [r4, #20]
 8005a76:	60a3      	str	r3, [r4, #8]
 8005a78:	e7f4      	b.n	8005a64 <__swsetup_r+0xb0>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	e7f7      	b.n	8005a6e <__swsetup_r+0xba>
 8005a7e:	bf00      	nop
 8005a80:	20000014 	.word	0x20000014
 8005a84:	08006920 	.word	0x08006920
 8005a88:	08006940 	.word	0x08006940
 8005a8c:	08006900 	.word	0x08006900

08005a90 <__sflush_r>:
 8005a90:	898a      	ldrh	r2, [r1, #12]
 8005a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a96:	4605      	mov	r5, r0
 8005a98:	0710      	lsls	r0, r2, #28
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	d458      	bmi.n	8005b50 <__sflush_r+0xc0>
 8005a9e:	684b      	ldr	r3, [r1, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	dc05      	bgt.n	8005ab0 <__sflush_r+0x20>
 8005aa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	dc02      	bgt.n	8005ab0 <__sflush_r+0x20>
 8005aaa:	2000      	movs	r0, #0
 8005aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ab2:	2e00      	cmp	r6, #0
 8005ab4:	d0f9      	beq.n	8005aaa <__sflush_r+0x1a>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005abc:	682f      	ldr	r7, [r5, #0]
 8005abe:	602b      	str	r3, [r5, #0]
 8005ac0:	d032      	beq.n	8005b28 <__sflush_r+0x98>
 8005ac2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	075a      	lsls	r2, r3, #29
 8005ac8:	d505      	bpl.n	8005ad6 <__sflush_r+0x46>
 8005aca:	6863      	ldr	r3, [r4, #4]
 8005acc:	1ac0      	subs	r0, r0, r3
 8005ace:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ad0:	b10b      	cbz	r3, 8005ad6 <__sflush_r+0x46>
 8005ad2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ad4:	1ac0      	subs	r0, r0, r3
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	4602      	mov	r2, r0
 8005ada:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005adc:	6a21      	ldr	r1, [r4, #32]
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b0      	blx	r6
 8005ae2:	1c43      	adds	r3, r0, #1
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	d106      	bne.n	8005af6 <__sflush_r+0x66>
 8005ae8:	6829      	ldr	r1, [r5, #0]
 8005aea:	291d      	cmp	r1, #29
 8005aec:	d82c      	bhi.n	8005b48 <__sflush_r+0xb8>
 8005aee:	4a2a      	ldr	r2, [pc, #168]	; (8005b98 <__sflush_r+0x108>)
 8005af0:	40ca      	lsrs	r2, r1
 8005af2:	07d6      	lsls	r6, r2, #31
 8005af4:	d528      	bpl.n	8005b48 <__sflush_r+0xb8>
 8005af6:	2200      	movs	r2, #0
 8005af8:	6062      	str	r2, [r4, #4]
 8005afa:	04d9      	lsls	r1, r3, #19
 8005afc:	6922      	ldr	r2, [r4, #16]
 8005afe:	6022      	str	r2, [r4, #0]
 8005b00:	d504      	bpl.n	8005b0c <__sflush_r+0x7c>
 8005b02:	1c42      	adds	r2, r0, #1
 8005b04:	d101      	bne.n	8005b0a <__sflush_r+0x7a>
 8005b06:	682b      	ldr	r3, [r5, #0]
 8005b08:	b903      	cbnz	r3, 8005b0c <__sflush_r+0x7c>
 8005b0a:	6560      	str	r0, [r4, #84]	; 0x54
 8005b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b0e:	602f      	str	r7, [r5, #0]
 8005b10:	2900      	cmp	r1, #0
 8005b12:	d0ca      	beq.n	8005aaa <__sflush_r+0x1a>
 8005b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b18:	4299      	cmp	r1, r3
 8005b1a:	d002      	beq.n	8005b22 <__sflush_r+0x92>
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f000 f9d7 	bl	8005ed0 <_free_r>
 8005b22:	2000      	movs	r0, #0
 8005b24:	6360      	str	r0, [r4, #52]	; 0x34
 8005b26:	e7c1      	b.n	8005aac <__sflush_r+0x1c>
 8005b28:	6a21      	ldr	r1, [r4, #32]
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	47b0      	blx	r6
 8005b30:	1c41      	adds	r1, r0, #1
 8005b32:	d1c7      	bne.n	8005ac4 <__sflush_r+0x34>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0c4      	beq.n	8005ac4 <__sflush_r+0x34>
 8005b3a:	2b1d      	cmp	r3, #29
 8005b3c:	d001      	beq.n	8005b42 <__sflush_r+0xb2>
 8005b3e:	2b16      	cmp	r3, #22
 8005b40:	d101      	bne.n	8005b46 <__sflush_r+0xb6>
 8005b42:	602f      	str	r7, [r5, #0]
 8005b44:	e7b1      	b.n	8005aaa <__sflush_r+0x1a>
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b4c:	81a3      	strh	r3, [r4, #12]
 8005b4e:	e7ad      	b.n	8005aac <__sflush_r+0x1c>
 8005b50:	690f      	ldr	r7, [r1, #16]
 8005b52:	2f00      	cmp	r7, #0
 8005b54:	d0a9      	beq.n	8005aaa <__sflush_r+0x1a>
 8005b56:	0793      	lsls	r3, r2, #30
 8005b58:	680e      	ldr	r6, [r1, #0]
 8005b5a:	bf08      	it	eq
 8005b5c:	694b      	ldreq	r3, [r1, #20]
 8005b5e:	600f      	str	r7, [r1, #0]
 8005b60:	bf18      	it	ne
 8005b62:	2300      	movne	r3, #0
 8005b64:	eba6 0807 	sub.w	r8, r6, r7
 8005b68:	608b      	str	r3, [r1, #8]
 8005b6a:	f1b8 0f00 	cmp.w	r8, #0
 8005b6e:	dd9c      	ble.n	8005aaa <__sflush_r+0x1a>
 8005b70:	6a21      	ldr	r1, [r4, #32]
 8005b72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b74:	4643      	mov	r3, r8
 8005b76:	463a      	mov	r2, r7
 8005b78:	4628      	mov	r0, r5
 8005b7a:	47b0      	blx	r6
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	dc06      	bgt.n	8005b8e <__sflush_r+0xfe>
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b86:	81a3      	strh	r3, [r4, #12]
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8c:	e78e      	b.n	8005aac <__sflush_r+0x1c>
 8005b8e:	4407      	add	r7, r0
 8005b90:	eba8 0800 	sub.w	r8, r8, r0
 8005b94:	e7e9      	b.n	8005b6a <__sflush_r+0xda>
 8005b96:	bf00      	nop
 8005b98:	20400001 	.word	0x20400001

08005b9c <_fflush_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	690b      	ldr	r3, [r1, #16]
 8005ba0:	4605      	mov	r5, r0
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	b913      	cbnz	r3, 8005bac <_fflush_r+0x10>
 8005ba6:	2500      	movs	r5, #0
 8005ba8:	4628      	mov	r0, r5
 8005baa:	bd38      	pop	{r3, r4, r5, pc}
 8005bac:	b118      	cbz	r0, 8005bb6 <_fflush_r+0x1a>
 8005bae:	6983      	ldr	r3, [r0, #24]
 8005bb0:	b90b      	cbnz	r3, 8005bb6 <_fflush_r+0x1a>
 8005bb2:	f000 f887 	bl	8005cc4 <__sinit>
 8005bb6:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <_fflush_r+0x6c>)
 8005bb8:	429c      	cmp	r4, r3
 8005bba:	d11b      	bne.n	8005bf4 <_fflush_r+0x58>
 8005bbc:	686c      	ldr	r4, [r5, #4]
 8005bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0ef      	beq.n	8005ba6 <_fflush_r+0xa>
 8005bc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bc8:	07d0      	lsls	r0, r2, #31
 8005bca:	d404      	bmi.n	8005bd6 <_fflush_r+0x3a>
 8005bcc:	0599      	lsls	r1, r3, #22
 8005bce:	d402      	bmi.n	8005bd6 <_fflush_r+0x3a>
 8005bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bd2:	f000 f915 	bl	8005e00 <__retarget_lock_acquire_recursive>
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	4621      	mov	r1, r4
 8005bda:	f7ff ff59 	bl	8005a90 <__sflush_r>
 8005bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005be0:	07da      	lsls	r2, r3, #31
 8005be2:	4605      	mov	r5, r0
 8005be4:	d4e0      	bmi.n	8005ba8 <_fflush_r+0xc>
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	059b      	lsls	r3, r3, #22
 8005bea:	d4dd      	bmi.n	8005ba8 <_fflush_r+0xc>
 8005bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bee:	f000 f908 	bl	8005e02 <__retarget_lock_release_recursive>
 8005bf2:	e7d9      	b.n	8005ba8 <_fflush_r+0xc>
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <_fflush_r+0x70>)
 8005bf6:	429c      	cmp	r4, r3
 8005bf8:	d101      	bne.n	8005bfe <_fflush_r+0x62>
 8005bfa:	68ac      	ldr	r4, [r5, #8]
 8005bfc:	e7df      	b.n	8005bbe <_fflush_r+0x22>
 8005bfe:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <_fflush_r+0x74>)
 8005c00:	429c      	cmp	r4, r3
 8005c02:	bf08      	it	eq
 8005c04:	68ec      	ldreq	r4, [r5, #12]
 8005c06:	e7da      	b.n	8005bbe <_fflush_r+0x22>
 8005c08:	08006920 	.word	0x08006920
 8005c0c:	08006940 	.word	0x08006940
 8005c10:	08006900 	.word	0x08006900

08005c14 <std>:
 8005c14:	2300      	movs	r3, #0
 8005c16:	b510      	push	{r4, lr}
 8005c18:	4604      	mov	r4, r0
 8005c1a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c22:	6083      	str	r3, [r0, #8]
 8005c24:	8181      	strh	r1, [r0, #12]
 8005c26:	6643      	str	r3, [r0, #100]	; 0x64
 8005c28:	81c2      	strh	r2, [r0, #14]
 8005c2a:	6183      	str	r3, [r0, #24]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	2208      	movs	r2, #8
 8005c30:	305c      	adds	r0, #92	; 0x5c
 8005c32:	f7ff fdd7 	bl	80057e4 <memset>
 8005c36:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <std+0x38>)
 8005c38:	6263      	str	r3, [r4, #36]	; 0x24
 8005c3a:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <std+0x3c>)
 8005c3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <std+0x40>)
 8005c40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c42:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <std+0x44>)
 8005c44:	6224      	str	r4, [r4, #32]
 8005c46:	6323      	str	r3, [r4, #48]	; 0x30
 8005c48:	bd10      	pop	{r4, pc}
 8005c4a:	bf00      	nop
 8005c4c:	0800668d 	.word	0x0800668d
 8005c50:	080066af 	.word	0x080066af
 8005c54:	080066e7 	.word	0x080066e7
 8005c58:	0800670b 	.word	0x0800670b

08005c5c <_cleanup_r>:
 8005c5c:	4901      	ldr	r1, [pc, #4]	; (8005c64 <_cleanup_r+0x8>)
 8005c5e:	f000 b8af 	b.w	8005dc0 <_fwalk_reent>
 8005c62:	bf00      	nop
 8005c64:	08005b9d 	.word	0x08005b9d

08005c68 <__sfmoreglue>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	2268      	movs	r2, #104	; 0x68
 8005c6c:	1e4d      	subs	r5, r1, #1
 8005c6e:	4355      	muls	r5, r2
 8005c70:	460e      	mov	r6, r1
 8005c72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c76:	f000 f997 	bl	8005fa8 <_malloc_r>
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	b140      	cbz	r0, 8005c90 <__sfmoreglue+0x28>
 8005c7e:	2100      	movs	r1, #0
 8005c80:	e9c0 1600 	strd	r1, r6, [r0]
 8005c84:	300c      	adds	r0, #12
 8005c86:	60a0      	str	r0, [r4, #8]
 8005c88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c8c:	f7ff fdaa 	bl	80057e4 <memset>
 8005c90:	4620      	mov	r0, r4
 8005c92:	bd70      	pop	{r4, r5, r6, pc}

08005c94 <__sfp_lock_acquire>:
 8005c94:	4801      	ldr	r0, [pc, #4]	; (8005c9c <__sfp_lock_acquire+0x8>)
 8005c96:	f000 b8b3 	b.w	8005e00 <__retarget_lock_acquire_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	20004119 	.word	0x20004119

08005ca0 <__sfp_lock_release>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	; (8005ca8 <__sfp_lock_release+0x8>)
 8005ca2:	f000 b8ae 	b.w	8005e02 <__retarget_lock_release_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	20004119 	.word	0x20004119

08005cac <__sinit_lock_acquire>:
 8005cac:	4801      	ldr	r0, [pc, #4]	; (8005cb4 <__sinit_lock_acquire+0x8>)
 8005cae:	f000 b8a7 	b.w	8005e00 <__retarget_lock_acquire_recursive>
 8005cb2:	bf00      	nop
 8005cb4:	2000411a 	.word	0x2000411a

08005cb8 <__sinit_lock_release>:
 8005cb8:	4801      	ldr	r0, [pc, #4]	; (8005cc0 <__sinit_lock_release+0x8>)
 8005cba:	f000 b8a2 	b.w	8005e02 <__retarget_lock_release_recursive>
 8005cbe:	bf00      	nop
 8005cc0:	2000411a 	.word	0x2000411a

08005cc4 <__sinit>:
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	f7ff fff0 	bl	8005cac <__sinit_lock_acquire>
 8005ccc:	69a3      	ldr	r3, [r4, #24]
 8005cce:	b11b      	cbz	r3, 8005cd8 <__sinit+0x14>
 8005cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cd4:	f7ff bff0 	b.w	8005cb8 <__sinit_lock_release>
 8005cd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005cdc:	6523      	str	r3, [r4, #80]	; 0x50
 8005cde:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <__sinit+0x68>)
 8005ce0:	4a13      	ldr	r2, [pc, #76]	; (8005d30 <__sinit+0x6c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ce6:	42a3      	cmp	r3, r4
 8005ce8:	bf04      	itt	eq
 8005cea:	2301      	moveq	r3, #1
 8005cec:	61a3      	streq	r3, [r4, #24]
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 f820 	bl	8005d34 <__sfp>
 8005cf4:	6060      	str	r0, [r4, #4]
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f000 f81c 	bl	8005d34 <__sfp>
 8005cfc:	60a0      	str	r0, [r4, #8]
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 f818 	bl	8005d34 <__sfp>
 8005d04:	2200      	movs	r2, #0
 8005d06:	60e0      	str	r0, [r4, #12]
 8005d08:	2104      	movs	r1, #4
 8005d0a:	6860      	ldr	r0, [r4, #4]
 8005d0c:	f7ff ff82 	bl	8005c14 <std>
 8005d10:	68a0      	ldr	r0, [r4, #8]
 8005d12:	2201      	movs	r2, #1
 8005d14:	2109      	movs	r1, #9
 8005d16:	f7ff ff7d 	bl	8005c14 <std>
 8005d1a:	68e0      	ldr	r0, [r4, #12]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	2112      	movs	r1, #18
 8005d20:	f7ff ff78 	bl	8005c14 <std>
 8005d24:	2301      	movs	r3, #1
 8005d26:	61a3      	str	r3, [r4, #24]
 8005d28:	e7d2      	b.n	8005cd0 <__sinit+0xc>
 8005d2a:	bf00      	nop
 8005d2c:	080068fc 	.word	0x080068fc
 8005d30:	08005c5d 	.word	0x08005c5d

08005d34 <__sfp>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	4607      	mov	r7, r0
 8005d38:	f7ff ffac 	bl	8005c94 <__sfp_lock_acquire>
 8005d3c:	4b1e      	ldr	r3, [pc, #120]	; (8005db8 <__sfp+0x84>)
 8005d3e:	681e      	ldr	r6, [r3, #0]
 8005d40:	69b3      	ldr	r3, [r6, #24]
 8005d42:	b913      	cbnz	r3, 8005d4a <__sfp+0x16>
 8005d44:	4630      	mov	r0, r6
 8005d46:	f7ff ffbd 	bl	8005cc4 <__sinit>
 8005d4a:	3648      	adds	r6, #72	; 0x48
 8005d4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	d503      	bpl.n	8005d5c <__sfp+0x28>
 8005d54:	6833      	ldr	r3, [r6, #0]
 8005d56:	b30b      	cbz	r3, 8005d9c <__sfp+0x68>
 8005d58:	6836      	ldr	r6, [r6, #0]
 8005d5a:	e7f7      	b.n	8005d4c <__sfp+0x18>
 8005d5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d60:	b9d5      	cbnz	r5, 8005d98 <__sfp+0x64>
 8005d62:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <__sfp+0x88>)
 8005d64:	60e3      	str	r3, [r4, #12]
 8005d66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d6a:	6665      	str	r5, [r4, #100]	; 0x64
 8005d6c:	f000 f847 	bl	8005dfe <__retarget_lock_init_recursive>
 8005d70:	f7ff ff96 	bl	8005ca0 <__sfp_lock_release>
 8005d74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d7c:	6025      	str	r5, [r4, #0]
 8005d7e:	61a5      	str	r5, [r4, #24]
 8005d80:	2208      	movs	r2, #8
 8005d82:	4629      	mov	r1, r5
 8005d84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d88:	f7ff fd2c 	bl	80057e4 <memset>
 8005d8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d94:	4620      	mov	r0, r4
 8005d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d98:	3468      	adds	r4, #104	; 0x68
 8005d9a:	e7d9      	b.n	8005d50 <__sfp+0x1c>
 8005d9c:	2104      	movs	r1, #4
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f7ff ff62 	bl	8005c68 <__sfmoreglue>
 8005da4:	4604      	mov	r4, r0
 8005da6:	6030      	str	r0, [r6, #0]
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d1d5      	bne.n	8005d58 <__sfp+0x24>
 8005dac:	f7ff ff78 	bl	8005ca0 <__sfp_lock_release>
 8005db0:	230c      	movs	r3, #12
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	e7ee      	b.n	8005d94 <__sfp+0x60>
 8005db6:	bf00      	nop
 8005db8:	080068fc 	.word	0x080068fc
 8005dbc:	ffff0001 	.word	0xffff0001

08005dc0 <_fwalk_reent>:
 8005dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	4688      	mov	r8, r1
 8005dc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005dcc:	2700      	movs	r7, #0
 8005dce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dd2:	f1b9 0901 	subs.w	r9, r9, #1
 8005dd6:	d505      	bpl.n	8005de4 <_fwalk_reent+0x24>
 8005dd8:	6824      	ldr	r4, [r4, #0]
 8005dda:	2c00      	cmp	r4, #0
 8005ddc:	d1f7      	bne.n	8005dce <_fwalk_reent+0xe>
 8005dde:	4638      	mov	r0, r7
 8005de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de4:	89ab      	ldrh	r3, [r5, #12]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d907      	bls.n	8005dfa <_fwalk_reent+0x3a>
 8005dea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dee:	3301      	adds	r3, #1
 8005df0:	d003      	beq.n	8005dfa <_fwalk_reent+0x3a>
 8005df2:	4629      	mov	r1, r5
 8005df4:	4630      	mov	r0, r6
 8005df6:	47c0      	blx	r8
 8005df8:	4307      	orrs	r7, r0
 8005dfa:	3568      	adds	r5, #104	; 0x68
 8005dfc:	e7e9      	b.n	8005dd2 <_fwalk_reent+0x12>

08005dfe <__retarget_lock_init_recursive>:
 8005dfe:	4770      	bx	lr

08005e00 <__retarget_lock_acquire_recursive>:
 8005e00:	4770      	bx	lr

08005e02 <__retarget_lock_release_recursive>:
 8005e02:	4770      	bx	lr

08005e04 <__swhatbuf_r>:
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	460e      	mov	r6, r1
 8005e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0c:	2900      	cmp	r1, #0
 8005e0e:	b096      	sub	sp, #88	; 0x58
 8005e10:	4614      	mov	r4, r2
 8005e12:	461d      	mov	r5, r3
 8005e14:	da08      	bge.n	8005e28 <__swhatbuf_r+0x24>
 8005e16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	602a      	str	r2, [r5, #0]
 8005e1e:	061a      	lsls	r2, r3, #24
 8005e20:	d410      	bmi.n	8005e44 <__swhatbuf_r+0x40>
 8005e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e26:	e00e      	b.n	8005e46 <__swhatbuf_r+0x42>
 8005e28:	466a      	mov	r2, sp
 8005e2a:	f000 fc95 	bl	8006758 <_fstat_r>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	dbf1      	blt.n	8005e16 <__swhatbuf_r+0x12>
 8005e32:	9a01      	ldr	r2, [sp, #4]
 8005e34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e3c:	425a      	negs	r2, r3
 8005e3e:	415a      	adcs	r2, r3
 8005e40:	602a      	str	r2, [r5, #0]
 8005e42:	e7ee      	b.n	8005e22 <__swhatbuf_r+0x1e>
 8005e44:	2340      	movs	r3, #64	; 0x40
 8005e46:	2000      	movs	r0, #0
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	b016      	add	sp, #88	; 0x58
 8005e4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e50 <__smakebuf_r>:
 8005e50:	898b      	ldrh	r3, [r1, #12]
 8005e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e54:	079d      	lsls	r5, r3, #30
 8005e56:	4606      	mov	r6, r0
 8005e58:	460c      	mov	r4, r1
 8005e5a:	d507      	bpl.n	8005e6c <__smakebuf_r+0x1c>
 8005e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	6123      	str	r3, [r4, #16]
 8005e64:	2301      	movs	r3, #1
 8005e66:	6163      	str	r3, [r4, #20]
 8005e68:	b002      	add	sp, #8
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	ab01      	add	r3, sp, #4
 8005e6e:	466a      	mov	r2, sp
 8005e70:	f7ff ffc8 	bl	8005e04 <__swhatbuf_r>
 8005e74:	9900      	ldr	r1, [sp, #0]
 8005e76:	4605      	mov	r5, r0
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f000 f895 	bl	8005fa8 <_malloc_r>
 8005e7e:	b948      	cbnz	r0, 8005e94 <__smakebuf_r+0x44>
 8005e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e84:	059a      	lsls	r2, r3, #22
 8005e86:	d4ef      	bmi.n	8005e68 <__smakebuf_r+0x18>
 8005e88:	f023 0303 	bic.w	r3, r3, #3
 8005e8c:	f043 0302 	orr.w	r3, r3, #2
 8005e90:	81a3      	strh	r3, [r4, #12]
 8005e92:	e7e3      	b.n	8005e5c <__smakebuf_r+0xc>
 8005e94:	4b0d      	ldr	r3, [pc, #52]	; (8005ecc <__smakebuf_r+0x7c>)
 8005e96:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	6020      	str	r0, [r4, #0]
 8005e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	9b00      	ldr	r3, [sp, #0]
 8005ea4:	6163      	str	r3, [r4, #20]
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	6120      	str	r0, [r4, #16]
 8005eaa:	b15b      	cbz	r3, 8005ec4 <__smakebuf_r+0x74>
 8005eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f000 fc63 	bl	800677c <_isatty_r>
 8005eb6:	b128      	cbz	r0, 8005ec4 <__smakebuf_r+0x74>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	89a0      	ldrh	r0, [r4, #12]
 8005ec6:	4305      	orrs	r5, r0
 8005ec8:	81a5      	strh	r5, [r4, #12]
 8005eca:	e7cd      	b.n	8005e68 <__smakebuf_r+0x18>
 8005ecc:	08005c5d 	.word	0x08005c5d

08005ed0 <_free_r>:
 8005ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ed2:	2900      	cmp	r1, #0
 8005ed4:	d044      	beq.n	8005f60 <_free_r+0x90>
 8005ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eda:	9001      	str	r0, [sp, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f1a1 0404 	sub.w	r4, r1, #4
 8005ee2:	bfb8      	it	lt
 8005ee4:	18e4      	addlt	r4, r4, r3
 8005ee6:	f000 fc6b 	bl	80067c0 <__malloc_lock>
 8005eea:	4a1e      	ldr	r2, [pc, #120]	; (8005f64 <_free_r+0x94>)
 8005eec:	9801      	ldr	r0, [sp, #4]
 8005eee:	6813      	ldr	r3, [r2, #0]
 8005ef0:	b933      	cbnz	r3, 8005f00 <_free_r+0x30>
 8005ef2:	6063      	str	r3, [r4, #4]
 8005ef4:	6014      	str	r4, [r2, #0]
 8005ef6:	b003      	add	sp, #12
 8005ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005efc:	f000 bc66 	b.w	80067cc <__malloc_unlock>
 8005f00:	42a3      	cmp	r3, r4
 8005f02:	d908      	bls.n	8005f16 <_free_r+0x46>
 8005f04:	6825      	ldr	r5, [r4, #0]
 8005f06:	1961      	adds	r1, r4, r5
 8005f08:	428b      	cmp	r3, r1
 8005f0a:	bf01      	itttt	eq
 8005f0c:	6819      	ldreq	r1, [r3, #0]
 8005f0e:	685b      	ldreq	r3, [r3, #4]
 8005f10:	1949      	addeq	r1, r1, r5
 8005f12:	6021      	streq	r1, [r4, #0]
 8005f14:	e7ed      	b.n	8005ef2 <_free_r+0x22>
 8005f16:	461a      	mov	r2, r3
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	b10b      	cbz	r3, 8005f20 <_free_r+0x50>
 8005f1c:	42a3      	cmp	r3, r4
 8005f1e:	d9fa      	bls.n	8005f16 <_free_r+0x46>
 8005f20:	6811      	ldr	r1, [r2, #0]
 8005f22:	1855      	adds	r5, r2, r1
 8005f24:	42a5      	cmp	r5, r4
 8005f26:	d10b      	bne.n	8005f40 <_free_r+0x70>
 8005f28:	6824      	ldr	r4, [r4, #0]
 8005f2a:	4421      	add	r1, r4
 8005f2c:	1854      	adds	r4, r2, r1
 8005f2e:	42a3      	cmp	r3, r4
 8005f30:	6011      	str	r1, [r2, #0]
 8005f32:	d1e0      	bne.n	8005ef6 <_free_r+0x26>
 8005f34:	681c      	ldr	r4, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	6053      	str	r3, [r2, #4]
 8005f3a:	4421      	add	r1, r4
 8005f3c:	6011      	str	r1, [r2, #0]
 8005f3e:	e7da      	b.n	8005ef6 <_free_r+0x26>
 8005f40:	d902      	bls.n	8005f48 <_free_r+0x78>
 8005f42:	230c      	movs	r3, #12
 8005f44:	6003      	str	r3, [r0, #0]
 8005f46:	e7d6      	b.n	8005ef6 <_free_r+0x26>
 8005f48:	6825      	ldr	r5, [r4, #0]
 8005f4a:	1961      	adds	r1, r4, r5
 8005f4c:	428b      	cmp	r3, r1
 8005f4e:	bf04      	itt	eq
 8005f50:	6819      	ldreq	r1, [r3, #0]
 8005f52:	685b      	ldreq	r3, [r3, #4]
 8005f54:	6063      	str	r3, [r4, #4]
 8005f56:	bf04      	itt	eq
 8005f58:	1949      	addeq	r1, r1, r5
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	6054      	str	r4, [r2, #4]
 8005f5e:	e7ca      	b.n	8005ef6 <_free_r+0x26>
 8005f60:	b003      	add	sp, #12
 8005f62:	bd30      	pop	{r4, r5, pc}
 8005f64:	2000411c 	.word	0x2000411c

08005f68 <sbrk_aligned>:
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	4e0e      	ldr	r6, [pc, #56]	; (8005fa4 <sbrk_aligned+0x3c>)
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	6831      	ldr	r1, [r6, #0]
 8005f70:	4605      	mov	r5, r0
 8005f72:	b911      	cbnz	r1, 8005f7a <sbrk_aligned+0x12>
 8005f74:	f000 fb7a 	bl	800666c <_sbrk_r>
 8005f78:	6030      	str	r0, [r6, #0]
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f000 fb75 	bl	800666c <_sbrk_r>
 8005f82:	1c43      	adds	r3, r0, #1
 8005f84:	d00a      	beq.n	8005f9c <sbrk_aligned+0x34>
 8005f86:	1cc4      	adds	r4, r0, #3
 8005f88:	f024 0403 	bic.w	r4, r4, #3
 8005f8c:	42a0      	cmp	r0, r4
 8005f8e:	d007      	beq.n	8005fa0 <sbrk_aligned+0x38>
 8005f90:	1a21      	subs	r1, r4, r0
 8005f92:	4628      	mov	r0, r5
 8005f94:	f000 fb6a 	bl	800666c <_sbrk_r>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d101      	bne.n	8005fa0 <sbrk_aligned+0x38>
 8005f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	20004120 	.word	0x20004120

08005fa8 <_malloc_r>:
 8005fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fac:	1ccd      	adds	r5, r1, #3
 8005fae:	f025 0503 	bic.w	r5, r5, #3
 8005fb2:	3508      	adds	r5, #8
 8005fb4:	2d0c      	cmp	r5, #12
 8005fb6:	bf38      	it	cc
 8005fb8:	250c      	movcc	r5, #12
 8005fba:	2d00      	cmp	r5, #0
 8005fbc:	4607      	mov	r7, r0
 8005fbe:	db01      	blt.n	8005fc4 <_malloc_r+0x1c>
 8005fc0:	42a9      	cmp	r1, r5
 8005fc2:	d905      	bls.n	8005fd0 <_malloc_r+0x28>
 8005fc4:	230c      	movs	r3, #12
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	2600      	movs	r6, #0
 8005fca:	4630      	mov	r0, r6
 8005fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd0:	4e2e      	ldr	r6, [pc, #184]	; (800608c <_malloc_r+0xe4>)
 8005fd2:	f000 fbf5 	bl	80067c0 <__malloc_lock>
 8005fd6:	6833      	ldr	r3, [r6, #0]
 8005fd8:	461c      	mov	r4, r3
 8005fda:	bb34      	cbnz	r4, 800602a <_malloc_r+0x82>
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4638      	mov	r0, r7
 8005fe0:	f7ff ffc2 	bl	8005f68 <sbrk_aligned>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	d14d      	bne.n	8006086 <_malloc_r+0xde>
 8005fea:	6834      	ldr	r4, [r6, #0]
 8005fec:	4626      	mov	r6, r4
 8005fee:	2e00      	cmp	r6, #0
 8005ff0:	d140      	bne.n	8006074 <_malloc_r+0xcc>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	eb04 0803 	add.w	r8, r4, r3
 8005ffc:	f000 fb36 	bl	800666c <_sbrk_r>
 8006000:	4580      	cmp	r8, r0
 8006002:	d13a      	bne.n	800607a <_malloc_r+0xd2>
 8006004:	6821      	ldr	r1, [r4, #0]
 8006006:	3503      	adds	r5, #3
 8006008:	1a6d      	subs	r5, r5, r1
 800600a:	f025 0503 	bic.w	r5, r5, #3
 800600e:	3508      	adds	r5, #8
 8006010:	2d0c      	cmp	r5, #12
 8006012:	bf38      	it	cc
 8006014:	250c      	movcc	r5, #12
 8006016:	4629      	mov	r1, r5
 8006018:	4638      	mov	r0, r7
 800601a:	f7ff ffa5 	bl	8005f68 <sbrk_aligned>
 800601e:	3001      	adds	r0, #1
 8006020:	d02b      	beq.n	800607a <_malloc_r+0xd2>
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	442b      	add	r3, r5
 8006026:	6023      	str	r3, [r4, #0]
 8006028:	e00e      	b.n	8006048 <_malloc_r+0xa0>
 800602a:	6822      	ldr	r2, [r4, #0]
 800602c:	1b52      	subs	r2, r2, r5
 800602e:	d41e      	bmi.n	800606e <_malloc_r+0xc6>
 8006030:	2a0b      	cmp	r2, #11
 8006032:	d916      	bls.n	8006062 <_malloc_r+0xba>
 8006034:	1961      	adds	r1, r4, r5
 8006036:	42a3      	cmp	r3, r4
 8006038:	6025      	str	r5, [r4, #0]
 800603a:	bf18      	it	ne
 800603c:	6059      	strne	r1, [r3, #4]
 800603e:	6863      	ldr	r3, [r4, #4]
 8006040:	bf08      	it	eq
 8006042:	6031      	streq	r1, [r6, #0]
 8006044:	5162      	str	r2, [r4, r5]
 8006046:	604b      	str	r3, [r1, #4]
 8006048:	4638      	mov	r0, r7
 800604a:	f104 060b 	add.w	r6, r4, #11
 800604e:	f000 fbbd 	bl	80067cc <__malloc_unlock>
 8006052:	f026 0607 	bic.w	r6, r6, #7
 8006056:	1d23      	adds	r3, r4, #4
 8006058:	1af2      	subs	r2, r6, r3
 800605a:	d0b6      	beq.n	8005fca <_malloc_r+0x22>
 800605c:	1b9b      	subs	r3, r3, r6
 800605e:	50a3      	str	r3, [r4, r2]
 8006060:	e7b3      	b.n	8005fca <_malloc_r+0x22>
 8006062:	6862      	ldr	r2, [r4, #4]
 8006064:	42a3      	cmp	r3, r4
 8006066:	bf0c      	ite	eq
 8006068:	6032      	streq	r2, [r6, #0]
 800606a:	605a      	strne	r2, [r3, #4]
 800606c:	e7ec      	b.n	8006048 <_malloc_r+0xa0>
 800606e:	4623      	mov	r3, r4
 8006070:	6864      	ldr	r4, [r4, #4]
 8006072:	e7b2      	b.n	8005fda <_malloc_r+0x32>
 8006074:	4634      	mov	r4, r6
 8006076:	6876      	ldr	r6, [r6, #4]
 8006078:	e7b9      	b.n	8005fee <_malloc_r+0x46>
 800607a:	230c      	movs	r3, #12
 800607c:	603b      	str	r3, [r7, #0]
 800607e:	4638      	mov	r0, r7
 8006080:	f000 fba4 	bl	80067cc <__malloc_unlock>
 8006084:	e7a1      	b.n	8005fca <_malloc_r+0x22>
 8006086:	6025      	str	r5, [r4, #0]
 8006088:	e7de      	b.n	8006048 <_malloc_r+0xa0>
 800608a:	bf00      	nop
 800608c:	2000411c 	.word	0x2000411c

08006090 <__sfputc_r>:
 8006090:	6893      	ldr	r3, [r2, #8]
 8006092:	3b01      	subs	r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	b410      	push	{r4}
 8006098:	6093      	str	r3, [r2, #8]
 800609a:	da08      	bge.n	80060ae <__sfputc_r+0x1e>
 800609c:	6994      	ldr	r4, [r2, #24]
 800609e:	42a3      	cmp	r3, r4
 80060a0:	db01      	blt.n	80060a6 <__sfputc_r+0x16>
 80060a2:	290a      	cmp	r1, #10
 80060a4:	d103      	bne.n	80060ae <__sfputc_r+0x1e>
 80060a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060aa:	f7ff bc31 	b.w	8005910 <__swbuf_r>
 80060ae:	6813      	ldr	r3, [r2, #0]
 80060b0:	1c58      	adds	r0, r3, #1
 80060b2:	6010      	str	r0, [r2, #0]
 80060b4:	7019      	strb	r1, [r3, #0]
 80060b6:	4608      	mov	r0, r1
 80060b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060bc:	4770      	bx	lr

080060be <__sfputs_r>:
 80060be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c0:	4606      	mov	r6, r0
 80060c2:	460f      	mov	r7, r1
 80060c4:	4614      	mov	r4, r2
 80060c6:	18d5      	adds	r5, r2, r3
 80060c8:	42ac      	cmp	r4, r5
 80060ca:	d101      	bne.n	80060d0 <__sfputs_r+0x12>
 80060cc:	2000      	movs	r0, #0
 80060ce:	e007      	b.n	80060e0 <__sfputs_r+0x22>
 80060d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d4:	463a      	mov	r2, r7
 80060d6:	4630      	mov	r0, r6
 80060d8:	f7ff ffda 	bl	8006090 <__sfputc_r>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d1f3      	bne.n	80060c8 <__sfputs_r+0xa>
 80060e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060e4 <_vfiprintf_r>:
 80060e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e8:	460d      	mov	r5, r1
 80060ea:	b09d      	sub	sp, #116	; 0x74
 80060ec:	4614      	mov	r4, r2
 80060ee:	4698      	mov	r8, r3
 80060f0:	4606      	mov	r6, r0
 80060f2:	b118      	cbz	r0, 80060fc <_vfiprintf_r+0x18>
 80060f4:	6983      	ldr	r3, [r0, #24]
 80060f6:	b90b      	cbnz	r3, 80060fc <_vfiprintf_r+0x18>
 80060f8:	f7ff fde4 	bl	8005cc4 <__sinit>
 80060fc:	4b89      	ldr	r3, [pc, #548]	; (8006324 <_vfiprintf_r+0x240>)
 80060fe:	429d      	cmp	r5, r3
 8006100:	d11b      	bne.n	800613a <_vfiprintf_r+0x56>
 8006102:	6875      	ldr	r5, [r6, #4]
 8006104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006106:	07d9      	lsls	r1, r3, #31
 8006108:	d405      	bmi.n	8006116 <_vfiprintf_r+0x32>
 800610a:	89ab      	ldrh	r3, [r5, #12]
 800610c:	059a      	lsls	r2, r3, #22
 800610e:	d402      	bmi.n	8006116 <_vfiprintf_r+0x32>
 8006110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006112:	f7ff fe75 	bl	8005e00 <__retarget_lock_acquire_recursive>
 8006116:	89ab      	ldrh	r3, [r5, #12]
 8006118:	071b      	lsls	r3, r3, #28
 800611a:	d501      	bpl.n	8006120 <_vfiprintf_r+0x3c>
 800611c:	692b      	ldr	r3, [r5, #16]
 800611e:	b9eb      	cbnz	r3, 800615c <_vfiprintf_r+0x78>
 8006120:	4629      	mov	r1, r5
 8006122:	4630      	mov	r0, r6
 8006124:	f7ff fc46 	bl	80059b4 <__swsetup_r>
 8006128:	b1c0      	cbz	r0, 800615c <_vfiprintf_r+0x78>
 800612a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800612c:	07dc      	lsls	r4, r3, #31
 800612e:	d50e      	bpl.n	800614e <_vfiprintf_r+0x6a>
 8006130:	f04f 30ff 	mov.w	r0, #4294967295
 8006134:	b01d      	add	sp, #116	; 0x74
 8006136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613a:	4b7b      	ldr	r3, [pc, #492]	; (8006328 <_vfiprintf_r+0x244>)
 800613c:	429d      	cmp	r5, r3
 800613e:	d101      	bne.n	8006144 <_vfiprintf_r+0x60>
 8006140:	68b5      	ldr	r5, [r6, #8]
 8006142:	e7df      	b.n	8006104 <_vfiprintf_r+0x20>
 8006144:	4b79      	ldr	r3, [pc, #484]	; (800632c <_vfiprintf_r+0x248>)
 8006146:	429d      	cmp	r5, r3
 8006148:	bf08      	it	eq
 800614a:	68f5      	ldreq	r5, [r6, #12]
 800614c:	e7da      	b.n	8006104 <_vfiprintf_r+0x20>
 800614e:	89ab      	ldrh	r3, [r5, #12]
 8006150:	0598      	lsls	r0, r3, #22
 8006152:	d4ed      	bmi.n	8006130 <_vfiprintf_r+0x4c>
 8006154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006156:	f7ff fe54 	bl	8005e02 <__retarget_lock_release_recursive>
 800615a:	e7e9      	b.n	8006130 <_vfiprintf_r+0x4c>
 800615c:	2300      	movs	r3, #0
 800615e:	9309      	str	r3, [sp, #36]	; 0x24
 8006160:	2320      	movs	r3, #32
 8006162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006166:	f8cd 800c 	str.w	r8, [sp, #12]
 800616a:	2330      	movs	r3, #48	; 0x30
 800616c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006330 <_vfiprintf_r+0x24c>
 8006170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006174:	f04f 0901 	mov.w	r9, #1
 8006178:	4623      	mov	r3, r4
 800617a:	469a      	mov	sl, r3
 800617c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006180:	b10a      	cbz	r2, 8006186 <_vfiprintf_r+0xa2>
 8006182:	2a25      	cmp	r2, #37	; 0x25
 8006184:	d1f9      	bne.n	800617a <_vfiprintf_r+0x96>
 8006186:	ebba 0b04 	subs.w	fp, sl, r4
 800618a:	d00b      	beq.n	80061a4 <_vfiprintf_r+0xc0>
 800618c:	465b      	mov	r3, fp
 800618e:	4622      	mov	r2, r4
 8006190:	4629      	mov	r1, r5
 8006192:	4630      	mov	r0, r6
 8006194:	f7ff ff93 	bl	80060be <__sfputs_r>
 8006198:	3001      	adds	r0, #1
 800619a:	f000 80aa 	beq.w	80062f2 <_vfiprintf_r+0x20e>
 800619e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061a0:	445a      	add	r2, fp
 80061a2:	9209      	str	r2, [sp, #36]	; 0x24
 80061a4:	f89a 3000 	ldrb.w	r3, [sl]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 80a2 	beq.w	80062f2 <_vfiprintf_r+0x20e>
 80061ae:	2300      	movs	r3, #0
 80061b0:	f04f 32ff 	mov.w	r2, #4294967295
 80061b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061b8:	f10a 0a01 	add.w	sl, sl, #1
 80061bc:	9304      	str	r3, [sp, #16]
 80061be:	9307      	str	r3, [sp, #28]
 80061c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061c4:	931a      	str	r3, [sp, #104]	; 0x68
 80061c6:	4654      	mov	r4, sl
 80061c8:	2205      	movs	r2, #5
 80061ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ce:	4858      	ldr	r0, [pc, #352]	; (8006330 <_vfiprintf_r+0x24c>)
 80061d0:	f7fa f81e 	bl	8000210 <memchr>
 80061d4:	9a04      	ldr	r2, [sp, #16]
 80061d6:	b9d8      	cbnz	r0, 8006210 <_vfiprintf_r+0x12c>
 80061d8:	06d1      	lsls	r1, r2, #27
 80061da:	bf44      	itt	mi
 80061dc:	2320      	movmi	r3, #32
 80061de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061e2:	0713      	lsls	r3, r2, #28
 80061e4:	bf44      	itt	mi
 80061e6:	232b      	movmi	r3, #43	; 0x2b
 80061e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ec:	f89a 3000 	ldrb.w	r3, [sl]
 80061f0:	2b2a      	cmp	r3, #42	; 0x2a
 80061f2:	d015      	beq.n	8006220 <_vfiprintf_r+0x13c>
 80061f4:	9a07      	ldr	r2, [sp, #28]
 80061f6:	4654      	mov	r4, sl
 80061f8:	2000      	movs	r0, #0
 80061fa:	f04f 0c0a 	mov.w	ip, #10
 80061fe:	4621      	mov	r1, r4
 8006200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006204:	3b30      	subs	r3, #48	; 0x30
 8006206:	2b09      	cmp	r3, #9
 8006208:	d94e      	bls.n	80062a8 <_vfiprintf_r+0x1c4>
 800620a:	b1b0      	cbz	r0, 800623a <_vfiprintf_r+0x156>
 800620c:	9207      	str	r2, [sp, #28]
 800620e:	e014      	b.n	800623a <_vfiprintf_r+0x156>
 8006210:	eba0 0308 	sub.w	r3, r0, r8
 8006214:	fa09 f303 	lsl.w	r3, r9, r3
 8006218:	4313      	orrs	r3, r2
 800621a:	9304      	str	r3, [sp, #16]
 800621c:	46a2      	mov	sl, r4
 800621e:	e7d2      	b.n	80061c6 <_vfiprintf_r+0xe2>
 8006220:	9b03      	ldr	r3, [sp, #12]
 8006222:	1d19      	adds	r1, r3, #4
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	9103      	str	r1, [sp, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	bfbb      	ittet	lt
 800622c:	425b      	neglt	r3, r3
 800622e:	f042 0202 	orrlt.w	r2, r2, #2
 8006232:	9307      	strge	r3, [sp, #28]
 8006234:	9307      	strlt	r3, [sp, #28]
 8006236:	bfb8      	it	lt
 8006238:	9204      	strlt	r2, [sp, #16]
 800623a:	7823      	ldrb	r3, [r4, #0]
 800623c:	2b2e      	cmp	r3, #46	; 0x2e
 800623e:	d10c      	bne.n	800625a <_vfiprintf_r+0x176>
 8006240:	7863      	ldrb	r3, [r4, #1]
 8006242:	2b2a      	cmp	r3, #42	; 0x2a
 8006244:	d135      	bne.n	80062b2 <_vfiprintf_r+0x1ce>
 8006246:	9b03      	ldr	r3, [sp, #12]
 8006248:	1d1a      	adds	r2, r3, #4
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	9203      	str	r2, [sp, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	bfb8      	it	lt
 8006252:	f04f 33ff 	movlt.w	r3, #4294967295
 8006256:	3402      	adds	r4, #2
 8006258:	9305      	str	r3, [sp, #20]
 800625a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006340 <_vfiprintf_r+0x25c>
 800625e:	7821      	ldrb	r1, [r4, #0]
 8006260:	2203      	movs	r2, #3
 8006262:	4650      	mov	r0, sl
 8006264:	f7f9 ffd4 	bl	8000210 <memchr>
 8006268:	b140      	cbz	r0, 800627c <_vfiprintf_r+0x198>
 800626a:	2340      	movs	r3, #64	; 0x40
 800626c:	eba0 000a 	sub.w	r0, r0, sl
 8006270:	fa03 f000 	lsl.w	r0, r3, r0
 8006274:	9b04      	ldr	r3, [sp, #16]
 8006276:	4303      	orrs	r3, r0
 8006278:	3401      	adds	r4, #1
 800627a:	9304      	str	r3, [sp, #16]
 800627c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006280:	482c      	ldr	r0, [pc, #176]	; (8006334 <_vfiprintf_r+0x250>)
 8006282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006286:	2206      	movs	r2, #6
 8006288:	f7f9 ffc2 	bl	8000210 <memchr>
 800628c:	2800      	cmp	r0, #0
 800628e:	d03f      	beq.n	8006310 <_vfiprintf_r+0x22c>
 8006290:	4b29      	ldr	r3, [pc, #164]	; (8006338 <_vfiprintf_r+0x254>)
 8006292:	bb1b      	cbnz	r3, 80062dc <_vfiprintf_r+0x1f8>
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	3307      	adds	r3, #7
 8006298:	f023 0307 	bic.w	r3, r3, #7
 800629c:	3308      	adds	r3, #8
 800629e:	9303      	str	r3, [sp, #12]
 80062a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a2:	443b      	add	r3, r7
 80062a4:	9309      	str	r3, [sp, #36]	; 0x24
 80062a6:	e767      	b.n	8006178 <_vfiprintf_r+0x94>
 80062a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80062ac:	460c      	mov	r4, r1
 80062ae:	2001      	movs	r0, #1
 80062b0:	e7a5      	b.n	80061fe <_vfiprintf_r+0x11a>
 80062b2:	2300      	movs	r3, #0
 80062b4:	3401      	adds	r4, #1
 80062b6:	9305      	str	r3, [sp, #20]
 80062b8:	4619      	mov	r1, r3
 80062ba:	f04f 0c0a 	mov.w	ip, #10
 80062be:	4620      	mov	r0, r4
 80062c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062c4:	3a30      	subs	r2, #48	; 0x30
 80062c6:	2a09      	cmp	r2, #9
 80062c8:	d903      	bls.n	80062d2 <_vfiprintf_r+0x1ee>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0c5      	beq.n	800625a <_vfiprintf_r+0x176>
 80062ce:	9105      	str	r1, [sp, #20]
 80062d0:	e7c3      	b.n	800625a <_vfiprintf_r+0x176>
 80062d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80062d6:	4604      	mov	r4, r0
 80062d8:	2301      	movs	r3, #1
 80062da:	e7f0      	b.n	80062be <_vfiprintf_r+0x1da>
 80062dc:	ab03      	add	r3, sp, #12
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	462a      	mov	r2, r5
 80062e2:	4b16      	ldr	r3, [pc, #88]	; (800633c <_vfiprintf_r+0x258>)
 80062e4:	a904      	add	r1, sp, #16
 80062e6:	4630      	mov	r0, r6
 80062e8:	f3af 8000 	nop.w
 80062ec:	4607      	mov	r7, r0
 80062ee:	1c78      	adds	r0, r7, #1
 80062f0:	d1d6      	bne.n	80062a0 <_vfiprintf_r+0x1bc>
 80062f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f4:	07d9      	lsls	r1, r3, #31
 80062f6:	d405      	bmi.n	8006304 <_vfiprintf_r+0x220>
 80062f8:	89ab      	ldrh	r3, [r5, #12]
 80062fa:	059a      	lsls	r2, r3, #22
 80062fc:	d402      	bmi.n	8006304 <_vfiprintf_r+0x220>
 80062fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006300:	f7ff fd7f 	bl	8005e02 <__retarget_lock_release_recursive>
 8006304:	89ab      	ldrh	r3, [r5, #12]
 8006306:	065b      	lsls	r3, r3, #25
 8006308:	f53f af12 	bmi.w	8006130 <_vfiprintf_r+0x4c>
 800630c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800630e:	e711      	b.n	8006134 <_vfiprintf_r+0x50>
 8006310:	ab03      	add	r3, sp, #12
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	462a      	mov	r2, r5
 8006316:	4b09      	ldr	r3, [pc, #36]	; (800633c <_vfiprintf_r+0x258>)
 8006318:	a904      	add	r1, sp, #16
 800631a:	4630      	mov	r0, r6
 800631c:	f000 f880 	bl	8006420 <_printf_i>
 8006320:	e7e4      	b.n	80062ec <_vfiprintf_r+0x208>
 8006322:	bf00      	nop
 8006324:	08006920 	.word	0x08006920
 8006328:	08006940 	.word	0x08006940
 800632c:	08006900 	.word	0x08006900
 8006330:	08006960 	.word	0x08006960
 8006334:	0800696a 	.word	0x0800696a
 8006338:	00000000 	.word	0x00000000
 800633c:	080060bf 	.word	0x080060bf
 8006340:	08006966 	.word	0x08006966

08006344 <_printf_common>:
 8006344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006348:	4616      	mov	r6, r2
 800634a:	4699      	mov	r9, r3
 800634c:	688a      	ldr	r2, [r1, #8]
 800634e:	690b      	ldr	r3, [r1, #16]
 8006350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006354:	4293      	cmp	r3, r2
 8006356:	bfb8      	it	lt
 8006358:	4613      	movlt	r3, r2
 800635a:	6033      	str	r3, [r6, #0]
 800635c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006360:	4607      	mov	r7, r0
 8006362:	460c      	mov	r4, r1
 8006364:	b10a      	cbz	r2, 800636a <_printf_common+0x26>
 8006366:	3301      	adds	r3, #1
 8006368:	6033      	str	r3, [r6, #0]
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	0699      	lsls	r1, r3, #26
 800636e:	bf42      	ittt	mi
 8006370:	6833      	ldrmi	r3, [r6, #0]
 8006372:	3302      	addmi	r3, #2
 8006374:	6033      	strmi	r3, [r6, #0]
 8006376:	6825      	ldr	r5, [r4, #0]
 8006378:	f015 0506 	ands.w	r5, r5, #6
 800637c:	d106      	bne.n	800638c <_printf_common+0x48>
 800637e:	f104 0a19 	add.w	sl, r4, #25
 8006382:	68e3      	ldr	r3, [r4, #12]
 8006384:	6832      	ldr	r2, [r6, #0]
 8006386:	1a9b      	subs	r3, r3, r2
 8006388:	42ab      	cmp	r3, r5
 800638a:	dc26      	bgt.n	80063da <_printf_common+0x96>
 800638c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006390:	1e13      	subs	r3, r2, #0
 8006392:	6822      	ldr	r2, [r4, #0]
 8006394:	bf18      	it	ne
 8006396:	2301      	movne	r3, #1
 8006398:	0692      	lsls	r2, r2, #26
 800639a:	d42b      	bmi.n	80063f4 <_printf_common+0xb0>
 800639c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063a0:	4649      	mov	r1, r9
 80063a2:	4638      	mov	r0, r7
 80063a4:	47c0      	blx	r8
 80063a6:	3001      	adds	r0, #1
 80063a8:	d01e      	beq.n	80063e8 <_printf_common+0xa4>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	68e5      	ldr	r5, [r4, #12]
 80063ae:	6832      	ldr	r2, [r6, #0]
 80063b0:	f003 0306 	and.w	r3, r3, #6
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	bf08      	it	eq
 80063b8:	1aad      	subeq	r5, r5, r2
 80063ba:	68a3      	ldr	r3, [r4, #8]
 80063bc:	6922      	ldr	r2, [r4, #16]
 80063be:	bf0c      	ite	eq
 80063c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063c4:	2500      	movne	r5, #0
 80063c6:	4293      	cmp	r3, r2
 80063c8:	bfc4      	itt	gt
 80063ca:	1a9b      	subgt	r3, r3, r2
 80063cc:	18ed      	addgt	r5, r5, r3
 80063ce:	2600      	movs	r6, #0
 80063d0:	341a      	adds	r4, #26
 80063d2:	42b5      	cmp	r5, r6
 80063d4:	d11a      	bne.n	800640c <_printf_common+0xc8>
 80063d6:	2000      	movs	r0, #0
 80063d8:	e008      	b.n	80063ec <_printf_common+0xa8>
 80063da:	2301      	movs	r3, #1
 80063dc:	4652      	mov	r2, sl
 80063de:	4649      	mov	r1, r9
 80063e0:	4638      	mov	r0, r7
 80063e2:	47c0      	blx	r8
 80063e4:	3001      	adds	r0, #1
 80063e6:	d103      	bne.n	80063f0 <_printf_common+0xac>
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f0:	3501      	adds	r5, #1
 80063f2:	e7c6      	b.n	8006382 <_printf_common+0x3e>
 80063f4:	18e1      	adds	r1, r4, r3
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	2030      	movs	r0, #48	; 0x30
 80063fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063fe:	4422      	add	r2, r4
 8006400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006408:	3302      	adds	r3, #2
 800640a:	e7c7      	b.n	800639c <_printf_common+0x58>
 800640c:	2301      	movs	r3, #1
 800640e:	4622      	mov	r2, r4
 8006410:	4649      	mov	r1, r9
 8006412:	4638      	mov	r0, r7
 8006414:	47c0      	blx	r8
 8006416:	3001      	adds	r0, #1
 8006418:	d0e6      	beq.n	80063e8 <_printf_common+0xa4>
 800641a:	3601      	adds	r6, #1
 800641c:	e7d9      	b.n	80063d2 <_printf_common+0x8e>
	...

08006420 <_printf_i>:
 8006420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006424:	7e0f      	ldrb	r7, [r1, #24]
 8006426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006428:	2f78      	cmp	r7, #120	; 0x78
 800642a:	4691      	mov	r9, r2
 800642c:	4680      	mov	r8, r0
 800642e:	460c      	mov	r4, r1
 8006430:	469a      	mov	sl, r3
 8006432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006436:	d807      	bhi.n	8006448 <_printf_i+0x28>
 8006438:	2f62      	cmp	r7, #98	; 0x62
 800643a:	d80a      	bhi.n	8006452 <_printf_i+0x32>
 800643c:	2f00      	cmp	r7, #0
 800643e:	f000 80d8 	beq.w	80065f2 <_printf_i+0x1d2>
 8006442:	2f58      	cmp	r7, #88	; 0x58
 8006444:	f000 80a3 	beq.w	800658e <_printf_i+0x16e>
 8006448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800644c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006450:	e03a      	b.n	80064c8 <_printf_i+0xa8>
 8006452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006456:	2b15      	cmp	r3, #21
 8006458:	d8f6      	bhi.n	8006448 <_printf_i+0x28>
 800645a:	a101      	add	r1, pc, #4	; (adr r1, 8006460 <_printf_i+0x40>)
 800645c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006460:	080064b9 	.word	0x080064b9
 8006464:	080064cd 	.word	0x080064cd
 8006468:	08006449 	.word	0x08006449
 800646c:	08006449 	.word	0x08006449
 8006470:	08006449 	.word	0x08006449
 8006474:	08006449 	.word	0x08006449
 8006478:	080064cd 	.word	0x080064cd
 800647c:	08006449 	.word	0x08006449
 8006480:	08006449 	.word	0x08006449
 8006484:	08006449 	.word	0x08006449
 8006488:	08006449 	.word	0x08006449
 800648c:	080065d9 	.word	0x080065d9
 8006490:	080064fd 	.word	0x080064fd
 8006494:	080065bb 	.word	0x080065bb
 8006498:	08006449 	.word	0x08006449
 800649c:	08006449 	.word	0x08006449
 80064a0:	080065fb 	.word	0x080065fb
 80064a4:	08006449 	.word	0x08006449
 80064a8:	080064fd 	.word	0x080064fd
 80064ac:	08006449 	.word	0x08006449
 80064b0:	08006449 	.word	0x08006449
 80064b4:	080065c3 	.word	0x080065c3
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	1d1a      	adds	r2, r3, #4
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	602a      	str	r2, [r5, #0]
 80064c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0a3      	b.n	8006614 <_printf_i+0x1f4>
 80064cc:	6820      	ldr	r0, [r4, #0]
 80064ce:	6829      	ldr	r1, [r5, #0]
 80064d0:	0606      	lsls	r6, r0, #24
 80064d2:	f101 0304 	add.w	r3, r1, #4
 80064d6:	d50a      	bpl.n	80064ee <_printf_i+0xce>
 80064d8:	680e      	ldr	r6, [r1, #0]
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	2e00      	cmp	r6, #0
 80064de:	da03      	bge.n	80064e8 <_printf_i+0xc8>
 80064e0:	232d      	movs	r3, #45	; 0x2d
 80064e2:	4276      	negs	r6, r6
 80064e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064e8:	485e      	ldr	r0, [pc, #376]	; (8006664 <_printf_i+0x244>)
 80064ea:	230a      	movs	r3, #10
 80064ec:	e019      	b.n	8006522 <_printf_i+0x102>
 80064ee:	680e      	ldr	r6, [r1, #0]
 80064f0:	602b      	str	r3, [r5, #0]
 80064f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064f6:	bf18      	it	ne
 80064f8:	b236      	sxthne	r6, r6
 80064fa:	e7ef      	b.n	80064dc <_printf_i+0xbc>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	6820      	ldr	r0, [r4, #0]
 8006500:	1d19      	adds	r1, r3, #4
 8006502:	6029      	str	r1, [r5, #0]
 8006504:	0601      	lsls	r1, r0, #24
 8006506:	d501      	bpl.n	800650c <_printf_i+0xec>
 8006508:	681e      	ldr	r6, [r3, #0]
 800650a:	e002      	b.n	8006512 <_printf_i+0xf2>
 800650c:	0646      	lsls	r6, r0, #25
 800650e:	d5fb      	bpl.n	8006508 <_printf_i+0xe8>
 8006510:	881e      	ldrh	r6, [r3, #0]
 8006512:	4854      	ldr	r0, [pc, #336]	; (8006664 <_printf_i+0x244>)
 8006514:	2f6f      	cmp	r7, #111	; 0x6f
 8006516:	bf0c      	ite	eq
 8006518:	2308      	moveq	r3, #8
 800651a:	230a      	movne	r3, #10
 800651c:	2100      	movs	r1, #0
 800651e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006522:	6865      	ldr	r5, [r4, #4]
 8006524:	60a5      	str	r5, [r4, #8]
 8006526:	2d00      	cmp	r5, #0
 8006528:	bfa2      	ittt	ge
 800652a:	6821      	ldrge	r1, [r4, #0]
 800652c:	f021 0104 	bicge.w	r1, r1, #4
 8006530:	6021      	strge	r1, [r4, #0]
 8006532:	b90e      	cbnz	r6, 8006538 <_printf_i+0x118>
 8006534:	2d00      	cmp	r5, #0
 8006536:	d04d      	beq.n	80065d4 <_printf_i+0x1b4>
 8006538:	4615      	mov	r5, r2
 800653a:	fbb6 f1f3 	udiv	r1, r6, r3
 800653e:	fb03 6711 	mls	r7, r3, r1, r6
 8006542:	5dc7      	ldrb	r7, [r0, r7]
 8006544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006548:	4637      	mov	r7, r6
 800654a:	42bb      	cmp	r3, r7
 800654c:	460e      	mov	r6, r1
 800654e:	d9f4      	bls.n	800653a <_printf_i+0x11a>
 8006550:	2b08      	cmp	r3, #8
 8006552:	d10b      	bne.n	800656c <_printf_i+0x14c>
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	07de      	lsls	r6, r3, #31
 8006558:	d508      	bpl.n	800656c <_printf_i+0x14c>
 800655a:	6923      	ldr	r3, [r4, #16]
 800655c:	6861      	ldr	r1, [r4, #4]
 800655e:	4299      	cmp	r1, r3
 8006560:	bfde      	ittt	le
 8006562:	2330      	movle	r3, #48	; 0x30
 8006564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800656c:	1b52      	subs	r2, r2, r5
 800656e:	6122      	str	r2, [r4, #16]
 8006570:	f8cd a000 	str.w	sl, [sp]
 8006574:	464b      	mov	r3, r9
 8006576:	aa03      	add	r2, sp, #12
 8006578:	4621      	mov	r1, r4
 800657a:	4640      	mov	r0, r8
 800657c:	f7ff fee2 	bl	8006344 <_printf_common>
 8006580:	3001      	adds	r0, #1
 8006582:	d14c      	bne.n	800661e <_printf_i+0x1fe>
 8006584:	f04f 30ff 	mov.w	r0, #4294967295
 8006588:	b004      	add	sp, #16
 800658a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658e:	4835      	ldr	r0, [pc, #212]	; (8006664 <_printf_i+0x244>)
 8006590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006594:	6829      	ldr	r1, [r5, #0]
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	f851 6b04 	ldr.w	r6, [r1], #4
 800659c:	6029      	str	r1, [r5, #0]
 800659e:	061d      	lsls	r5, r3, #24
 80065a0:	d514      	bpl.n	80065cc <_printf_i+0x1ac>
 80065a2:	07df      	lsls	r7, r3, #31
 80065a4:	bf44      	itt	mi
 80065a6:	f043 0320 	orrmi.w	r3, r3, #32
 80065aa:	6023      	strmi	r3, [r4, #0]
 80065ac:	b91e      	cbnz	r6, 80065b6 <_printf_i+0x196>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	f023 0320 	bic.w	r3, r3, #32
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	2310      	movs	r3, #16
 80065b8:	e7b0      	b.n	800651c <_printf_i+0xfc>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	f043 0320 	orr.w	r3, r3, #32
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	2378      	movs	r3, #120	; 0x78
 80065c4:	4828      	ldr	r0, [pc, #160]	; (8006668 <_printf_i+0x248>)
 80065c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065ca:	e7e3      	b.n	8006594 <_printf_i+0x174>
 80065cc:	0659      	lsls	r1, r3, #25
 80065ce:	bf48      	it	mi
 80065d0:	b2b6      	uxthmi	r6, r6
 80065d2:	e7e6      	b.n	80065a2 <_printf_i+0x182>
 80065d4:	4615      	mov	r5, r2
 80065d6:	e7bb      	b.n	8006550 <_printf_i+0x130>
 80065d8:	682b      	ldr	r3, [r5, #0]
 80065da:	6826      	ldr	r6, [r4, #0]
 80065dc:	6961      	ldr	r1, [r4, #20]
 80065de:	1d18      	adds	r0, r3, #4
 80065e0:	6028      	str	r0, [r5, #0]
 80065e2:	0635      	lsls	r5, r6, #24
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	d501      	bpl.n	80065ec <_printf_i+0x1cc>
 80065e8:	6019      	str	r1, [r3, #0]
 80065ea:	e002      	b.n	80065f2 <_printf_i+0x1d2>
 80065ec:	0670      	lsls	r0, r6, #25
 80065ee:	d5fb      	bpl.n	80065e8 <_printf_i+0x1c8>
 80065f0:	8019      	strh	r1, [r3, #0]
 80065f2:	2300      	movs	r3, #0
 80065f4:	6123      	str	r3, [r4, #16]
 80065f6:	4615      	mov	r5, r2
 80065f8:	e7ba      	b.n	8006570 <_printf_i+0x150>
 80065fa:	682b      	ldr	r3, [r5, #0]
 80065fc:	1d1a      	adds	r2, r3, #4
 80065fe:	602a      	str	r2, [r5, #0]
 8006600:	681d      	ldr	r5, [r3, #0]
 8006602:	6862      	ldr	r2, [r4, #4]
 8006604:	2100      	movs	r1, #0
 8006606:	4628      	mov	r0, r5
 8006608:	f7f9 fe02 	bl	8000210 <memchr>
 800660c:	b108      	cbz	r0, 8006612 <_printf_i+0x1f2>
 800660e:	1b40      	subs	r0, r0, r5
 8006610:	6060      	str	r0, [r4, #4]
 8006612:	6863      	ldr	r3, [r4, #4]
 8006614:	6123      	str	r3, [r4, #16]
 8006616:	2300      	movs	r3, #0
 8006618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800661c:	e7a8      	b.n	8006570 <_printf_i+0x150>
 800661e:	6923      	ldr	r3, [r4, #16]
 8006620:	462a      	mov	r2, r5
 8006622:	4649      	mov	r1, r9
 8006624:	4640      	mov	r0, r8
 8006626:	47d0      	blx	sl
 8006628:	3001      	adds	r0, #1
 800662a:	d0ab      	beq.n	8006584 <_printf_i+0x164>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	079b      	lsls	r3, r3, #30
 8006630:	d413      	bmi.n	800665a <_printf_i+0x23a>
 8006632:	68e0      	ldr	r0, [r4, #12]
 8006634:	9b03      	ldr	r3, [sp, #12]
 8006636:	4298      	cmp	r0, r3
 8006638:	bfb8      	it	lt
 800663a:	4618      	movlt	r0, r3
 800663c:	e7a4      	b.n	8006588 <_printf_i+0x168>
 800663e:	2301      	movs	r3, #1
 8006640:	4632      	mov	r2, r6
 8006642:	4649      	mov	r1, r9
 8006644:	4640      	mov	r0, r8
 8006646:	47d0      	blx	sl
 8006648:	3001      	adds	r0, #1
 800664a:	d09b      	beq.n	8006584 <_printf_i+0x164>
 800664c:	3501      	adds	r5, #1
 800664e:	68e3      	ldr	r3, [r4, #12]
 8006650:	9903      	ldr	r1, [sp, #12]
 8006652:	1a5b      	subs	r3, r3, r1
 8006654:	42ab      	cmp	r3, r5
 8006656:	dcf2      	bgt.n	800663e <_printf_i+0x21e>
 8006658:	e7eb      	b.n	8006632 <_printf_i+0x212>
 800665a:	2500      	movs	r5, #0
 800665c:	f104 0619 	add.w	r6, r4, #25
 8006660:	e7f5      	b.n	800664e <_printf_i+0x22e>
 8006662:	bf00      	nop
 8006664:	08006971 	.word	0x08006971
 8006668:	08006982 	.word	0x08006982

0800666c <_sbrk_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4d06      	ldr	r5, [pc, #24]	; (8006688 <_sbrk_r+0x1c>)
 8006670:	2300      	movs	r3, #0
 8006672:	4604      	mov	r4, r0
 8006674:	4608      	mov	r0, r1
 8006676:	602b      	str	r3, [r5, #0]
 8006678:	f7fa fabc 	bl	8000bf4 <_sbrk>
 800667c:	1c43      	adds	r3, r0, #1
 800667e:	d102      	bne.n	8006686 <_sbrk_r+0x1a>
 8006680:	682b      	ldr	r3, [r5, #0]
 8006682:	b103      	cbz	r3, 8006686 <_sbrk_r+0x1a>
 8006684:	6023      	str	r3, [r4, #0]
 8006686:	bd38      	pop	{r3, r4, r5, pc}
 8006688:	20004124 	.word	0x20004124

0800668c <__sread>:
 800668c:	b510      	push	{r4, lr}
 800668e:	460c      	mov	r4, r1
 8006690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006694:	f000 f8a0 	bl	80067d8 <_read_r>
 8006698:	2800      	cmp	r0, #0
 800669a:	bfab      	itete	ge
 800669c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800669e:	89a3      	ldrhlt	r3, [r4, #12]
 80066a0:	181b      	addge	r3, r3, r0
 80066a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066a6:	bfac      	ite	ge
 80066a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80066aa:	81a3      	strhlt	r3, [r4, #12]
 80066ac:	bd10      	pop	{r4, pc}

080066ae <__swrite>:
 80066ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b2:	461f      	mov	r7, r3
 80066b4:	898b      	ldrh	r3, [r1, #12]
 80066b6:	05db      	lsls	r3, r3, #23
 80066b8:	4605      	mov	r5, r0
 80066ba:	460c      	mov	r4, r1
 80066bc:	4616      	mov	r6, r2
 80066be:	d505      	bpl.n	80066cc <__swrite+0x1e>
 80066c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c4:	2302      	movs	r3, #2
 80066c6:	2200      	movs	r2, #0
 80066c8:	f000 f868 	bl	800679c <_lseek_r>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	4632      	mov	r2, r6
 80066da:	463b      	mov	r3, r7
 80066dc:	4628      	mov	r0, r5
 80066de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066e2:	f000 b817 	b.w	8006714 <_write_r>

080066e6 <__sseek>:
 80066e6:	b510      	push	{r4, lr}
 80066e8:	460c      	mov	r4, r1
 80066ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ee:	f000 f855 	bl	800679c <_lseek_r>
 80066f2:	1c43      	adds	r3, r0, #1
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	bf15      	itete	ne
 80066f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80066fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006702:	81a3      	strheq	r3, [r4, #12]
 8006704:	bf18      	it	ne
 8006706:	81a3      	strhne	r3, [r4, #12]
 8006708:	bd10      	pop	{r4, pc}

0800670a <__sclose>:
 800670a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670e:	f000 b813 	b.w	8006738 <_close_r>
	...

08006714 <_write_r>:
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	4d07      	ldr	r5, [pc, #28]	; (8006734 <_write_r+0x20>)
 8006718:	4604      	mov	r4, r0
 800671a:	4608      	mov	r0, r1
 800671c:	4611      	mov	r1, r2
 800671e:	2200      	movs	r2, #0
 8006720:	602a      	str	r2, [r5, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	f7fa fa15 	bl	8000b52 <_write>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_write_r+0x1e>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_write_r+0x1e>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	20004124 	.word	0x20004124

08006738 <_close_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	4d06      	ldr	r5, [pc, #24]	; (8006754 <_close_r+0x1c>)
 800673c:	2300      	movs	r3, #0
 800673e:	4604      	mov	r4, r0
 8006740:	4608      	mov	r0, r1
 8006742:	602b      	str	r3, [r5, #0]
 8006744:	f7fa fa21 	bl	8000b8a <_close>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_close_r+0x1a>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	b103      	cbz	r3, 8006752 <_close_r+0x1a>
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	20004124 	.word	0x20004124

08006758 <_fstat_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4d07      	ldr	r5, [pc, #28]	; (8006778 <_fstat_r+0x20>)
 800675c:	2300      	movs	r3, #0
 800675e:	4604      	mov	r4, r0
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	602b      	str	r3, [r5, #0]
 8006766:	f7fa fa1c 	bl	8000ba2 <_fstat>
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	d102      	bne.n	8006774 <_fstat_r+0x1c>
 800676e:	682b      	ldr	r3, [r5, #0]
 8006770:	b103      	cbz	r3, 8006774 <_fstat_r+0x1c>
 8006772:	6023      	str	r3, [r4, #0]
 8006774:	bd38      	pop	{r3, r4, r5, pc}
 8006776:	bf00      	nop
 8006778:	20004124 	.word	0x20004124

0800677c <_isatty_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	4d06      	ldr	r5, [pc, #24]	; (8006798 <_isatty_r+0x1c>)
 8006780:	2300      	movs	r3, #0
 8006782:	4604      	mov	r4, r0
 8006784:	4608      	mov	r0, r1
 8006786:	602b      	str	r3, [r5, #0]
 8006788:	f7fa fa1b 	bl	8000bc2 <_isatty>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d102      	bne.n	8006796 <_isatty_r+0x1a>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	b103      	cbz	r3, 8006796 <_isatty_r+0x1a>
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	20004124 	.word	0x20004124

0800679c <_lseek_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	4d07      	ldr	r5, [pc, #28]	; (80067bc <_lseek_r+0x20>)
 80067a0:	4604      	mov	r4, r0
 80067a2:	4608      	mov	r0, r1
 80067a4:	4611      	mov	r1, r2
 80067a6:	2200      	movs	r2, #0
 80067a8:	602a      	str	r2, [r5, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	f7fa fa14 	bl	8000bd8 <_lseek>
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	d102      	bne.n	80067ba <_lseek_r+0x1e>
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	b103      	cbz	r3, 80067ba <_lseek_r+0x1e>
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	bd38      	pop	{r3, r4, r5, pc}
 80067bc:	20004124 	.word	0x20004124

080067c0 <__malloc_lock>:
 80067c0:	4801      	ldr	r0, [pc, #4]	; (80067c8 <__malloc_lock+0x8>)
 80067c2:	f7ff bb1d 	b.w	8005e00 <__retarget_lock_acquire_recursive>
 80067c6:	bf00      	nop
 80067c8:	20004118 	.word	0x20004118

080067cc <__malloc_unlock>:
 80067cc:	4801      	ldr	r0, [pc, #4]	; (80067d4 <__malloc_unlock+0x8>)
 80067ce:	f7ff bb18 	b.w	8005e02 <__retarget_lock_release_recursive>
 80067d2:	bf00      	nop
 80067d4:	20004118 	.word	0x20004118

080067d8 <_read_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d07      	ldr	r5, [pc, #28]	; (80067f8 <_read_r+0x20>)
 80067dc:	4604      	mov	r4, r0
 80067de:	4608      	mov	r0, r1
 80067e0:	4611      	mov	r1, r2
 80067e2:	2200      	movs	r2, #0
 80067e4:	602a      	str	r2, [r5, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f7fa f996 	bl	8000b18 <_read>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_read_r+0x1e>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_read_r+0x1e>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	20004124 	.word	0x20004124

080067fc <_init>:
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fe:	bf00      	nop
 8006800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006802:	bc08      	pop	{r3}
 8006804:	469e      	mov	lr, r3
 8006806:	4770      	bx	lr

08006808 <_fini>:
 8006808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680a:	bf00      	nop
 800680c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680e:	bc08      	pop	{r3}
 8006810:	469e      	mov	lr, r3
 8006812:	4770      	bx	lr
